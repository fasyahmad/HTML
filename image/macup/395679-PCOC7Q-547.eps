%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Money Logo-3 up-01.eps
%%Creator: Adobe Illustrator(R) 20.1
%%For: Ayib
%%CreationDate: 30/07/18
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 20.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 20.1.0 x174 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: font GlacialIndifference-Regular
%%+ font GlacialIndifference-Bold
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: GlacialIndifference-Regular
%%+ GlacialIndifference-Bold
%%DocumentNeededFonts: GlacialIndifference-Regular
%%+ GlacialIndifference-Bold
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                            
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c132 79.159284, 2016/04/19-13:13:40        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Money Logo-3 up-01</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-07-30T17:06:35+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-07-30T17:06:35+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-07-30T17:06:35+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015.3 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9QYEuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxVE4UOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVDYEuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxVE4UOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVDYEuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVE4UOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVD&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:14dc0719-d9af-4d24-91ff-9cee8099ab1a</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:14dc0719-d9af-4d24-91ff-9cee8099ab1a</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:194fdb52-18d4-fe49-892b-54a890f9ec16</stRef:instanceID>
            <stRef:documentID>xmp.did:c5291d10-bec5-416a-bb42-698cacfca68e</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9055feea-6df3-418a-84b0-35eb367eec15</stEvt:instanceID>
                  <stEvt:when>2016-04-18T22:41:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:14dc0719-d9af-4d24-91ff-9cee8099ab1a</stEvt:instanceID>
                  <stEvt:when>2018-07-30T17:06:35+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>499.999987</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>GlacialIndifference-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Glacial Indifference</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 1.01 2015</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>GlacialIndifference-Regular.otf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>GlacialIndifference-Bold</stFnt:fontName>
                  <stFnt:fontFamily>Glacial Indifference</stFnt:fontFamily>
                  <stFnt:fontFace>Bold</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 1.001</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>GlacialIndifference-Bold.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=178 G=134 B=56 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>178</xmpG:red>
                           <xmpG:green>134</xmpG:green>
                           <xmpG:blue>56</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=166 G=168 B=78 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>166</xmpG:red>
                           <xmpG:green>168</xmpG:green>
                           <xmpG:blue>78</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Kulit</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=216 G=208 B=188</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>216</xmpG:red>
                           <xmpG:green>208</xmpG:green>
                           <xmpG:blue>188</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=249 G=248 B=247</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>248</xmpG:green>
                           <xmpG:blue>247</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Gold 2</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=20 M=40 Y=96 K=7</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>195</xmpG:red>
                           <xmpG:green>146</xmpG:green>
                           <xmpG:blue>46</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=16 M=32 Y=82 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>205</xmpG:red>
                           <xmpG:green>163</xmpG:green>
                           <xmpG:blue>73</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=4 M=14 Y=60 K=8</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>226</xmpG:red>
                           <xmpG:green>198</xmpG:green>
                           <xmpG:blue>117</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>65</xmpG:red>
                           <xmpG:green>64</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>88</xmpG:red>
                           <xmpG:green>89</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>109</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>113</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>130</xmpG:green>
                           <xmpG:blue>133</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>149</xmpG:green>
                           <xmpG:blue>152</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>167</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>172</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>188</xmpG:red>
                           <xmpG:green>190</xmpG:green>
                           <xmpG:blue>192</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>209</xmpG:red>
                           <xmpG:green>211</xmpG:green>
                           <xmpG:blue>212</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>231</xmpG:green>
                           <xmpG:blue>232</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
250 250 mo
0 250 li
0 0 li
250 0 li
250 250 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.0153201 .0126345 .0151369 0 cmyk
f
500 500 mo
250 500 li
250 250 li
500 250 li
500 500 li
cp
f
387.94 322.537 mo
353.631 322.537 li
353.631 310.867 li
387.94 310.867 li
390.702 310.867 392.94 313.106 392.94 315.867 cv
392.94 317.537 li
392.94 320.299 390.702 322.537 387.94 322.537 cv
cp
.346838 .257786 .925963 .0171206 cmyk
f
417.94 369.218 mo
353.631 369.218 li
353.631 357.548 li
417.94 357.548 li
420.702 357.548 422.94 359.786 422.94 362.548 cv
422.94 364.218 li
422.94 366.979 420.702 369.218 417.94 369.218 cv
cp
f
387.94 392.558 mo
353.631 392.558 li
353.631 380.888 li
387.94 380.888 li
390.702 380.888 392.94 383.127 392.94 385.888 cv
392.94 387.558 li
392.94 390.319 390.702 392.558 387.94 392.558 cv
cp
f
417.94 345.878 mo
353.631 345.878 li
353.631 334.208 li
417.94 334.208 li
420.702 334.208 422.94 336.446 422.94 339.208 cv
422.94 340.878 li
422.94 343.639 420.702 345.878 417.94 345.878 cv
cp
f
431.823 334.208 mo
353.631 334.208 li
353.631 322.537 li
431.823 322.537 li
434.585 322.537 436.823 324.776 436.823 327.537 cv
436.823 329.208 li
436.823 331.969 434.585 334.208 431.823 334.208 cv
cp
.428992 .357702 1 .100069 cmyk
f
431.823 380.888 mo
353.631 380.888 li
353.631 369.218 li
431.823 369.218 li
434.585 369.218 436.823 371.456 436.823 374.218 cv
436.823 375.888 li
436.823 378.649 434.585 380.888 431.823 380.888 cv
cp
f
431.823 357.548 mo
353.631 357.548 li
353.631 345.878 li
431.823 345.878 li
434.585 345.878 436.823 348.116 436.823 350.878 cv
436.823 352.548 li
436.823 355.309 434.585 357.548 431.823 357.548 cv
cp
f
394.476 351.713 mo
394.476 374.271 376.189 392.558 353.631 392.558 cv
331.072 392.558 312.785 374.271 312.785 351.713 cv
312.785 329.155 331.072 310.867 353.631 310.867 cv
376.189 310.867 394.476 329.155 394.476 351.713 cv
cp
.346838 .257786 .925963 .0171206 cmyk
f
386.064 351.713 mo
386.064 369.625 371.543 384.146 353.631 384.146 cv
335.718 384.146 321.197 369.625 321.197 351.713 cv
321.197 333.8 335.718 319.279 353.631 319.279 cv
371.543 319.279 386.064 333.8 386.064 351.713 cv
cp
0 0 0 0 cmyk
f
350.08 375.955 mo
350.08 370.796 li
343.313 369.741 337.876 365.581 337.821 357.759 cv
346.419 357.759 li
346.641 362.252 350.025 364.027 354.13 364.027 cv
356.737 364.027 360.842 363.251 360.842 359.867 cv
360.842 352.545 339.041 357.259 339.041 343.336 cv
339.041 336.735 344.255 333.074 350.08 332.13 cv
350.08 327.471 li
357.292 327.471 li
357.292 332.241 li
363.228 333.351 367.943 336.902 368.165 343.947 cv
359.567 343.947 li
359.123 340.008 356.294 339.01 352.799 339.01 cv
350.469 339.01 347.64 339.841 347.64 342.67 cv
347.64 349.383 369.44 344.556 369.44 358.924 cv
369.44 366.413 363.726 369.963 357.292 370.851 cv
357.292 375.955 li
350.08 375.955 li
cp
.346838 .257786 .925963 .0171206 cmyk
f
411.436 320.908 mo
400.692 320.908 li
398.688 320.908 397.064 319.284 397.064 317.281 cv
397.064 316.124 li
397.064 314.12 398.688 312.496 400.692 312.496 cv
411.436 312.496 li
413.44 312.496 415.064 314.12 415.064 316.124 cv
415.064 317.281 li
415.064 319.284 413.44 320.908 411.436 320.908 cv
cp
f
411.436 390.929 mo
400.692 390.929 li
398.688 390.929 397.064 389.305 397.064 387.301 cv
397.064 386.145 li
397.064 384.141 398.688 382.517 400.692 382.517 cv
411.436 382.517 li
413.44 382.517 415.064 384.141 415.064 386.145 cv
415.064 387.301 li
415.064 389.305 413.44 390.929 411.436 390.929 cv
cp
f
.428992 .357702 1 .100069 cmyk
%%IncludeResource: font GlacialIndifference-Bold
/MROGHE+GlacialIndifference-Bold /GlacialIndifference-Bold findfont ct_VMDictPut/MROGHE+GlacialIndifference-Bold*1 [32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C 2{/.notdef}rp /F /.notdef /H 10{/.notdef}rp /S /T 171{/.notdef}rp]MROGHE+GlacialIndifference-Bold nfMROGHE+GlacialIndifference-Bold*1 [23.8328 0 0 -23.8328 0 0 ]msf312.785 422.316 mo(FAST CASH)[10.272 16.4209 15.0146 13.0601 5.95801 16.6826 16.4209 15.0146 0 ]xsh.346838 .257786 .925963 .0171206 cmyk
%%IncludeResource: font GlacialIndifference-Regular
/MROGHF+GlacialIndifference-Regular /GlacialIndifference-Regular findfont ct_VMDictPut/MROGHF+GlacialIndifference-Regular*1 [32{/.notdef}rp /space 36{/.notdef}rp /E 3{/.notdef}rp /I 2{/.notdef}rp /L /M /.notdef /O /P /.notdef /R /S /.notdef /U 170{/.notdef}rp]MROGHF+GlacialIndifference-Regular nfMROGHF+GlacialIndifference-Regular*1 [10.2367 0 0 -10.2367 0 0 ]msf338.497 436.553 mo(LOREM IPSUM)[4.69824 9.10059 6.59229 6.69482 9.03857 3.7876 3.27539 6.43896 6.89941 7.44238 0 ]xsh399.843 94.4602 mo
399.843 108.181 388.72 119.303 375 119.303 cv
361.279 119.303 350.157 108.181 350.157 94.4602 cv
350.157 80.7397 361.279 69.617 375 69.617 cv
388.72 69.617 399.843 80.7397 399.843 94.4602 cv
cp
f
369.4 73.7507 mo
367.806 73.7507 366.365 72.654 365.992 71.0348 cv
365.558 69.1511 366.734 67.2722 368.618 66.8386 cv
372.728 65.8932 377.111 65.8805 381.22 66.8024 cv
383.105 67.2253 384.292 69.0973 383.869 70.9831 cv
383.446 72.8708 381.577 74.0554 379.687 73.6325 cv
376.595 72.9391 373.281 72.947 370.188 73.6608 cv
369.924 73.7214 369.66 73.7507 369.4 73.7507 cv
cp
397.35 87.0964 mo
396.053 87.0964 394.807 86.3727 394.201 85.1276 cv
392.808 82.2692 390.75 79.7097 388.248 77.7253 cv
386.734 76.5241 386.48 74.3229 387.681 72.8083 cv
388.881 71.2946 391.083 71.0388 392.598 72.2409 cv
395.915 74.8718 398.645 78.2673 400.494 82.0632 cv
401.341 83.8005 400.618 85.8952 398.88 86.7419 cv
398.387 86.9821 397.864 87.0964 397.35 87.0964 cv
cp
352.585 87.2302 mo
352.078 87.2302 351.562 87.1188 351.074 86.8854 cv
349.331 86.0495 348.596 83.9587 349.432 82.2155 cv
351.258 78.4079 353.968 74.9948 357.27 72.3464 cv
358.779 71.1354 360.982 71.3786 362.191 72.8854 cv
363.4 74.3932 363.159 76.5964 361.651 77.8054 cv
359.162 79.8034 357.119 82.3747 355.743 85.2429 cv
355.142 86.4977 353.889 87.2302 352.585 87.2302 cv
cp
397.388 108.737 mo
396.878 108.737 396.36 108.625 395.87 108.388 cv
394.129 107.549 393.398 105.457 394.238 103.715 cv
395.635 100.819 396.343 97.7057 396.343 94.4606 cv
396.343 94.36 li
396.343 92.4274 397.91 90.86 399.843 90.86 cv
401.776 90.86 403.343 92.4274 403.343 94.36 cv
403.343 94.4606 li
403.343 98.7673 402.401 102.904 400.543 106.757 cv
399.94 108.007 398.69 108.737 397.388 108.737 cv
cp
352.632 108.78 mo
351.333 108.78 350.085 108.053 349.48 106.805 cv
347.615 102.956 346.665 98.821 346.657 94.5173 cv
346.653 92.5837 348.217 91.0143 350.15 91.0104 cv
350.152 91.0104 350.155 91.0104 350.157 91.0104 cv
352.087 91.0104 353.653 92.5729 353.657 94.5036 cv
353.663 97.7468 354.377 100.858 355.78 103.753 cv
356.622 105.492 355.895 107.586 354.156 108.428 cv
353.664 108.667 353.144 108.78 352.632 108.78 cv
cp
380.545 122.183 mo
378.948 122.183 377.506 121.084 377.136 119.462 cv
376.705 117.577 377.884 115.701 379.768 115.27 cv
382.865 114.563 385.82 113.135 388.314 111.142 cv
389.824 109.934 392.026 110.182 393.233 111.691 cv
394.44 113.202 394.194 115.404 392.684 116.611 cv
389.371 119.258 385.444 121.154 381.327 122.094 cv
381.065 122.154 380.803 122.183 380.545 122.183 cv
cp
369.501 122.193 mo
369.245 122.193 368.985 122.165 368.725 122.106 cv
364.605 121.174 360.674 119.286 357.357 116.644 cv
355.845 115.439 355.595 113.238 356.799 111.725 cv
358.003 110.214 360.204 109.964 361.717 111.168 cv
364.214 113.157 367.171 114.578 370.269 115.278 cv
372.155 115.705 373.338 117.579 372.912 119.464 cv
372.544 121.09 371.1 122.193 369.501 122.193 cv
cp
f
383 54.4602 mo
375 46.4602 li
375 50.4602 li
350.738 50.4602 331 70.1985 331 94.4602 cv
331 105.018 334.737 114.718 340.958 122.309 cv
342.453 124.133 345.207 124.253 346.874 122.586 cv
346.874 122.586 li
348.32 121.14 348.448 118.832 347.152 117.251 cv
342.059 111.039 339 103.1 339 94.4602 cv
339 74.6097 355.149 58.4602 375 58.4602 cv
375 62.4602 li
383 54.4602 li
cp
.428992 .357702 1 .100069 cmyk
f
367 134.46 mo
375 142.46 li
375 138.46 li
399.262 138.46 419 118.722 419 94.4602 cv
419 83.903 415.262 74.2022 409.041 66.6115 cv
407.546 64.7876 404.793 64.6674 403.125 66.3349 cv
403.125 66.3349 li
401.679 67.7807 401.551 70.0888 402.848 71.6699 cv
407.94 77.8812 411 85.8201 411 94.4602 cv
411 114.311 394.85 130.46 375 130.46 cv
375 126.46 li
367 134.46 li
cp
f
.346838 .257786 .925963 .0171206 cmyk
MROGHE+GlacialIndifference-Bold*1 [23.8328 0 0 -23.8328 0 0 ]msf343.147 165.604 mo(CASH)[16.6826 16.4209 15.0146 0 ]xsh%%IncludeResource: font GlacialIndifference-Bold
/MROGHE+GlacialIndifference-Bold*1 [32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C /.notdef /E /F /G /H 5{/.notdef}rp /N 4{/.notdef}rp /S /T 171{/.notdef}rp]MROGHE+GlacialIndifference-Bold nfMROGHE+GlacialIndifference-Bold*1 [23.8328 0 0 -23.8328 0 0 ]msf326.882 187.604 mo(CHA)sh376.597 187.604 mo(NGE)[15.5864 18.6851 0 ]xsh372.129 114.063 mo
372.129 109.891 li
366.657 109.038 362.261 105.675 362.216 99.3495 cv
369.168 99.3495 li
369.348 102.982 372.084 104.418 375.404 104.418 cv
377.511 104.418 380.831 103.79 380.831 101.054 cv
380.831 95.1331 363.202 98.9455 363.202 87.6867 cv
363.202 82.349 367.419 79.3884 372.129 78.6253 cv
372.129 74.8578 li
377.96 74.8578 li
377.96 78.7151 li
382.76 79.6129 386.573 82.4837 386.752 88.1805 cv
379.8 88.1805 li
379.441 84.9954 377.153 84.1885 374.328 84.1885 cv
372.443 84.1885 370.156 84.8607 370.156 87.148 cv
370.156 92.5765 387.784 88.6732 387.784 100.291 cv
387.784 106.347 383.163 109.218 377.96 109.936 cv
377.96 114.063 li
372.129 114.063 li
cp
0 0 0 0 cmyk
f
.346838 .257786 .925963 .0171206 cmyk
MROGHF+GlacialIndifference-Regular*1 [10.2367 0 0 -10.2367 0 0 ]msf338.497 200.96 mo(LOREM IPSUM)[4.69824 9.10059 6.59229 6.69482 9.03857 3.7876 3.27539 6.43896 6.89941 7.44238 0 ]xsh.200626 .342412 .848539 .00741588 cmyk
%%IncludeResource: font GlacialIndifference-Bold
/MROGHE+GlacialIndifference-Bold*1 [32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C /.notdef /E /F /G /H /I 4{/.notdef}rp /N 4{/.notdef}rp /S /T 171{/.notdef}rp]MROGHE+GlacialIndifference-Bold nfMROGHE+GlacialIndifference-Bold*1 [27.8716 0 0 -27.8716 0 0 ]msf68.8667 427.512 mo(FIN)sh108.667 427.512 mo(ANCE)[19.2036 18.228 20.7085 0 ]xsh78.2216 371.377 mo
78.2216 386.878 99.1646 399.444 125 399.444 cv
150.835 399.444 171.779 386.878 171.779 371.377 cv
171.779 362.021 li
78.2216 362.021 li
78.2216 371.377 li
cp
.122988 .190036 .644739 0 cmyk
f
78.2216 362.021 mo
78.2216 377.522 99.1646 390.088 125 390.088 cv
150.835 390.088 171.779 377.522 171.779 362.021 cv
171.779 352.666 li
78.2216 352.666 li
78.2216 362.021 li
cp
.200626 .342412 .848539 .00741588 cmyk
f
78.2216 352.666 mo
78.2216 368.167 99.1646 380.733 125 380.733 cv
150.835 380.733 171.779 368.167 171.779 352.666 cv
171.779 343.31 li
78.2216 343.31 li
78.2216 352.666 li
cp
.122988 .190036 .644739 0 cmyk
f
106.518 340.139 mo
101.548 340.139 li
101.548 395.658 li
103.148 396.216 104.804 396.721 106.518 397.164 cv
106.518 340.139 li
cp
.200626 .342412 .848539 .00741588 cmyk
f
96.0341 340.139 mo
91.0639 340.139 li
91.0639 390.683 li
92.6093 391.661 94.2697 392.571 96.0341 393.407 cv
96.0341 340.139 li
cp
f
117.002 340.139 mo
112.031 340.139 li
112.031 398.343 li
113.654 398.623 115.312 398.852 117.002 399.027 cv
117.002 340.139 li
cp
f
80.5802 380.177 mo
81.8061 382.405 83.4842 384.509 85.5504 386.452 cv
85.5504 340.139 li
80.5802 340.139 li
80.5802 380.177 li
cp
f
148.453 340.139 mo
143.482 340.139 li
143.482 397.164 li
145.196 396.721 146.852 396.216 148.453 395.658 cv
148.453 340.139 li
cp
f
127.485 399.404 mo
127.485 340.139 li
122.515 340.139 li
122.515 399.404 li
123.338 399.43 124.166 399.444 125 399.444 cv
125.834 399.444 126.662 399.43 127.485 399.404 cv
cp
f
158.936 340.139 mo
153.966 340.139 li
153.966 393.407 li
155.73 392.571 157.391 391.661 158.936 390.683 cv
158.936 340.139 li
cp
f
169.42 380.176 mo
169.42 340.139 li
164.45 340.139 li
164.45 386.452 li
166.516 384.509 168.194 382.405 169.42 380.176 cv
cp
f
137.969 340.139 mo
132.999 340.139 li
132.999 399.027 li
134.689 398.852 136.346 398.623 137.969 398.343 cv
137.969 340.139 li
cp
f
171.779 343.31 mo
171.779 358.811 150.835 371.377 125 371.377 cv
99.1646 371.377 78.2216 358.811 78.2216 343.31 cv
78.2216 327.809 99.1646 315.243 125 315.243 cv
150.835 315.243 171.779 327.809 171.779 343.31 cv
cp
f
125 366.306 mo
101.948 366.306 84.7224 353.907 84.7224 342.821 cv
84.7224 331.735 101.948 319.336 125 319.336 cv
148.052 319.336 165.278 331.735 165.278 342.821 cv
165.278 353.907 148.052 366.306 125 366.306 cv
cp
.122988 .190036 .644739 0 cmyk
f
120.809 360.589 mo
120.893 356.161 li
113.189 355.278 107.275 351.866 107.734 345.737 cv
117.103 345.737 li
117.214 349.213 120.937 350.619 125.518 350.619 cv
128.427 350.619 132.984 350.002 132.881 347.353 cv
132.668 341.848 109.093 345.358 109.879 335.332 cv
110.225 330.917 115.611 328.555 121.432 327.956 cv
121.487 325.053 li
128.543 325.053 li
128.602 328.026 li
134.541 328.732 139.424 331.026 140.017 335.75 cv
131.11 335.75 li
130.571 333.08 127.672 332.416 124.114 332.416 cv
121.742 332.416 118.845 332.969 118.783 334.877 cv
118.632 339.561 141.374 336.17 142.263 346.627 cv
142.766 352.539 136.489 355.464 129.156 356.208 cv
129.242 360.589 li
120.809 360.589 li
cp
.200626 .342412 .848539 .00741588 cmyk
f
.122988 .190036 .644739 0 cmyk
MROGHF+GlacialIndifference-Regular*1 [10.2367 0 0 -10.2367 0 0 ]msf88.4961 439.96 mo(LOREM IPSUM)[4.69824 9.10059 6.59229 6.69482 9.03857 3.7876 3.27539 6.43896 6.89941 7.44238 0 ]xsh.200626 .342412 .848539 .00741588 cmyk
%%IncludeResource: font GlacialIndifference-Bold
/MROGHE+GlacialIndifference-Bold*1 [32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C /.notdef /E /F /G /H /I 2{/.notdef}rp /L /.notdef /N 4{/.notdef}rp /S /T 2{/.notdef}rp /W 168{/.notdef}rp]MROGHE+GlacialIndifference-Bold nfMROGHE+GlacialIndifference-Bold*1 [23.8328 0 0 -23.8328 0 0 ]msf58.7798 177.626 mo(THE W)sh126.369 177.626 mo(ALLE)sh178.348 177.626 mo(T)shMROGHF+GlacialIndifference-Regular*1 [10.2367 0 0 -10.2367 0 0 ]msf88.5903 191.03 mo(LOREM IPSUM)[4.69873 9.1001 6.59229 6.69482 9.03857 3.7876 3.27588 6.43848 6.89941 7.44238 0 ]xsh180.753 150.436 mo
76.216 150.436 li
72.3671 150.436 69.2469 147.316 69.2469 143.467 cv
69.2469 87.7141 li
180.753 87.7141 li
180.753 150.436 li
cp
.235325 .417395 .990997 .0303349 cmyk
f
69.2469 84.2295 mo
173.784 77.2603 li
173.784 84.2295 li
69.2469 84.2295 li
cp
.200626 .342412 .848539 .00741588 cmyk
f
166.815 73.7758 mo
166.815 66.8066 li
69.2469 80.7449 li
166.815 73.7758 li
cp
f
147.503 119.075 mo
147.503 131.503 137.428 141.578 125 141.578 cv
112.572 141.578 102.497 131.503 102.497 119.075 cv
102.497 106.647 112.572 96.5726 125 96.5726 cv
137.428 96.5726 147.503 106.647 147.503 119.075 cv
cp
0 0 0 0 cmyk
f
122.389 136.905 mo
122.389 133.11 li
117.412 132.335 113.413 129.275 113.372 123.522 cv
119.696 123.522 li
119.859 126.826 122.348 128.132 125.368 128.132 cv
127.285 128.132 130.304 127.562 130.304 125.073 cv
130.304 119.687 114.27 123.155 114.27 112.914 cv
114.27 108.059 118.105 105.367 122.389 104.672 cv
122.389 101.246 li
127.693 101.246 li
127.693 104.754 li
132.059 105.571 135.526 108.182 135.69 113.363 cv
129.366 113.363 li
129.039 110.466 126.959 109.732 124.389 109.732 cv
122.675 109.732 120.594 110.344 120.594 112.424 cv
120.594 117.362 136.628 113.812 136.628 124.379 cv
136.628 129.887 132.425 132.498 127.693 133.151 cv
127.693 136.905 li
122.389 136.905 li
cp
.235325 .417395 .990997 .0303349 cmyk
f
177.12 468.984 mo
177.12 469.424 177.188 469.797 177.325 470.106 cv
177.461 470.415 177.648 470.647 177.886 470.803 cv
178.123 470.959 178.382 471.039 178.663 471.039 cv
178.948 471.039 179.208 470.964 179.444 470.815 cv
179.679 470.668 179.867 470.439 180.008 470.133 cv
180.148 469.826 180.218 469.442 180.218 468.984 cv
180.218 468.552 180.148 468.181 180.008 467.87 cv
179.867 467.56 179.678 467.323 179.438 467.158 cv
179.198 466.994 178.936 466.913 178.652 466.913 cv
178.355 466.913 178.09 466.997 177.856 467.164 cv
177.622 467.333 177.442 467.573 177.313 467.888 cv
177.184 468.203 177.12 468.568 177.12 468.984 cv
cp
180.308 471.365 mo
180.308 471.203 li
180.09 471.452 179.875 471.656 179.664 471.811 cv
179.452 471.969 179.222 472.087 178.975 472.168 cv
178.728 472.251 178.458 472.29 178.165 472.29 cv
177.777 472.29 177.417 472.208 177.087 472.044 cv
176.757 471.88 176.471 471.645 176.23 471.34 cv
175.988 471.036 175.805 470.679 175.68 470.266 cv
175.556 469.855 175.493 469.409 175.493 468.93 cv
175.493 467.917 175.741 467.128 176.235 466.561 cv
176.73 465.996 177.381 465.713 178.189 465.713 cv
178.655 465.713 179.049 465.793 179.37 465.953 cv
179.69 466.113 180.003 466.361 180.308 466.692 cv
180.308 464.3 li
180.308 463.967 180.374 463.717 180.507 463.546 cv
180.639 463.376 180.828 463.291 181.073 463.291 cv
181.319 463.291 181.507 463.369 181.64 463.525 cv
181.773 463.683 181.839 463.912 181.839 464.217 cv
181.839 471.365 li
181.839 471.673 181.768 471.904 181.625 472.059 cv
181.483 472.213 181.299 472.29 181.073 472.29 cv
180.852 472.29 180.669 472.21 180.524 472.051 cv
180.38 471.889 180.308 471.661 180.308 471.365 cv
cp
.148653 .13901 .253941 0 cmyk
f
184.284 468.474 mo
187.223 468.474 li
187.184 467.92 187.033 467.505 186.774 467.23 cv
186.515 466.954 186.174 466.818 185.751 466.818 cv
185.347 466.818 185.015 466.957 184.756 467.235 cv
184.497 467.514 184.34 467.927 184.284 468.474 cv
cp
187.454 469.394 mo
184.284 469.394 li
184.288 469.762 184.362 470.086 184.507 470.367 cv
184.651 470.648 184.843 470.861 185.083 471.002 cv
185.322 471.145 185.586 471.216 185.875 471.216 cv
186.069 471.216 186.246 471.194 186.406 471.148 cv
186.567 471.102 186.722 471.031 186.873 470.934 cv
187.023 470.837 187.161 470.733 187.288 470.622 cv
187.414 470.511 187.578 470.36 187.781 470.171 cv
187.864 470.1 187.983 470.063 188.137 470.063 cv
188.303 470.063 188.438 470.11 188.54 470.201 cv
188.643 470.293 188.695 470.42 188.695 470.587 cv
188.695 470.733 188.637 470.903 188.523 471.1 cv
188.408 471.296 188.234 471.484 188.003 471.664 cv
187.771 471.844 187.481 471.993 187.13 472.112 cv
186.781 472.231 186.378 472.29 185.922 472.29 cv
184.882 472.29 184.072 471.993 183.495 471.4 cv
182.917 470.807 182.628 470.001 182.628 468.984 cv
182.628 468.504 182.699 468.06 182.842 467.651 cv
182.984 467.241 183.192 466.891 183.465 466.598 cv
183.738 466.305 184.074 466.08 184.474 465.924 cv
184.874 465.768 185.317 465.689 185.804 465.689 cv
186.437 465.689 186.98 465.823 187.433 466.09 cv
187.886 466.357 188.226 466.703 188.451 467.125 cv
188.676 467.549 188.79 467.981 188.79 468.419 cv
188.79 468.828 188.673 469.092 188.44 469.212 cv
188.207 469.333 187.878 469.394 187.454 469.394 cv
cp
f
194.838 470.171 mo
194.838 470.617 194.73 471.001 194.512 471.319 cv
194.294 471.638 193.973 471.88 193.547 472.044 cv
193.122 472.208 192.604 472.29 191.995 472.29 cv
191.413 472.29 190.914 472.201 190.499 472.022 cv
190.083 471.845 189.776 471.622 189.579 471.356 cv
189.381 471.087 189.282 470.82 189.282 470.55 cv
189.282 470.372 189.345 470.221 189.472 470.094 cv
189.599 469.968 189.759 469.905 189.953 469.905 cv
190.123 469.905 190.253 469.946 190.344 470.029 cv
190.436 470.112 190.523 470.229 190.605 470.378 cv
190.772 470.669 190.971 470.882 191.203 471.026 cv
191.434 471.168 191.749 471.24 192.149 471.24 cv
192.474 471.24 192.74 471.167 192.948 471.023 cv
193.155 470.878 193.259 470.713 193.259 470.527 cv
193.259 470.241 193.152 470.035 192.936 469.905 cv
192.72 469.774 192.365 469.648 191.87 469.53 cv
191.312 469.392 190.858 469.245 190.508 469.093 cv
190.157 468.941 189.877 468.74 189.668 468.491 cv
189.458 468.242 189.353 467.934 189.353 467.571 cv
189.353 467.247 189.45 466.939 189.644 466.65 cv
189.838 466.362 190.124 466.132 190.502 465.959 cv
190.88 465.787 191.336 465.701 191.87 465.701 cv
192.29 465.701 192.667 465.744 193.001 465.832 cv
193.335 465.918 193.615 466.036 193.838 466.183 cv
194.062 466.328 194.232 466.49 194.348 466.668 cv
194.465 466.847 194.523 467.02 194.523 467.191 cv
194.523 467.376 194.461 467.529 194.337 467.649 cv
194.212 467.766 194.035 467.827 193.805 467.827 cv
193.639 467.827 193.497 467.779 193.381 467.683 cv
193.264 467.589 193.131 467.446 192.98 467.257 cv
192.857 467.098 192.714 466.971 192.547 466.876 cv
192.381 466.781 192.155 466.734 191.87 466.734 cv
191.577 466.734 191.334 466.796 191.14 466.921 cv
190.946 467.046 190.849 467.201 190.849 467.386 cv
190.849 467.557 190.92 467.696 191.063 467.805 cv
191.205 467.915 191.397 468.005 191.639 468.076 cv
191.88 468.147 192.212 468.233 192.636 468.336 cv
193.138 468.459 193.549 468.606 193.868 468.775 cv
194.186 468.945 194.427 469.147 194.592 469.378 cv
194.756 469.611 194.838 469.874 194.838 470.171 cv
cp
f
197.295 466.621 mo
197.295 471.305 li
197.295 471.629 197.218 471.875 197.064 472.041 cv
196.909 472.207 196.714 472.29 196.476 472.29 cv
196.238 472.29 196.045 472.206 195.897 472.035 cv
195.748 471.865 195.675 471.621 195.675 471.305 cv
195.675 466.668 li
195.675 466.349 195.748 466.107 195.897 465.945 cv
196.045 465.782 196.238 465.701 196.476 465.701 cv
196.714 465.701 196.909 465.782 197.064 465.945 cv
197.218 466.107 197.295 466.333 197.295 466.621 cv
cp
196.494 464.947 mo
196.268 464.947 196.075 464.878 195.915 464.74 cv
195.755 464.602 195.675 464.405 195.675 464.151 cv
195.675 463.922 195.757 463.734 195.921 463.585 cv
196.085 463.436 196.276 463.362 196.494 463.362 cv
196.704 463.362 196.889 463.429 197.052 463.564 cv
197.214 463.699 197.295 463.894 197.295 464.151 cv
197.295 464.402 197.216 464.596 197.057 464.736 cv
196.899 464.876 196.711 464.947 196.494 464.947 cv
cp
f
199.699 468.943 mo
199.699 469.599 199.842 470.096 200.129 470.432 cv
200.416 470.769 200.787 470.937 201.242 470.937 cv
201.511 470.937 201.765 470.864 202.005 470.72 cv
202.244 470.576 202.439 470.357 202.59 470.067 cv
202.74 469.776 202.815 469.424 202.815 469.007 cv
202.815 468.347 202.67 467.832 202.379 467.464 cv
202.088 467.097 201.705 466.913 201.23 466.913 cv
200.767 466.913 200.396 467.089 200.117 467.441 cv
199.838 467.793 199.699 468.293 199.699 468.943 cv
cp
204.395 466.888 mo
204.395 471.595 li
204.395 472.134 204.337 472.598 204.222 472.986 cv
204.108 473.373 203.923 473.694 203.67 473.946 cv
203.417 474.199 203.085 474.388 202.676 474.51 cv
202.266 474.634 201.757 474.695 201.147 474.695 cv
200.589 474.695 200.09 474.616 199.651 474.46 cv
199.212 474.303 198.874 474.101 198.636 473.855 cv
198.399 473.607 198.28 473.353 198.28 473.092 cv
198.28 472.894 198.347 472.732 198.482 472.608 cv
198.616 472.483 198.779 472.421 198.968 472.421 cv
199.206 472.421 199.414 472.525 199.592 472.736 cv
199.678 472.842 199.768 472.95 199.862 473.059 cv
199.955 473.169 200.058 473.262 200.171 473.339 cv
200.283 473.415 200.419 473.473 200.577 473.511 cv
200.735 473.547 200.918 473.567 201.123 473.567 cv
201.543 473.567 201.868 473.508 202.1 473.391 cv
202.332 473.275 202.494 473.111 202.587 472.901 cv
202.68 472.693 202.734 472.468 202.75 472.228 cv
202.766 471.988 202.778 471.604 202.785 471.073 cv
202.536 471.422 202.249 471.687 201.922 471.869 cv
201.595 472.051 201.206 472.142 200.755 472.142 cv
200.213 472.142 199.739 472.003 199.333 471.726 cv
198.928 471.449 198.616 471.062 198.399 470.563 cv
198.181 470.063 198.073 469.488 198.073 468.835 cv
198.073 468.349 198.139 467.909 198.271 467.518 cv
198.404 467.125 198.593 466.796 198.838 466.526 cv
199.083 466.257 199.366 466.055 199.687 465.918 cv
200.007 465.781 200.359 465.713 200.744 465.713 cv
201.202 465.713 201.6 465.802 201.937 465.976 cv
202.273 466.153 202.586 466.429 202.875 466.805 cv
202.875 466.585 li
202.875 466.305 202.944 466.087 203.082 465.932 cv
203.221 465.779 203.399 465.701 203.617 465.701 cv
203.929 465.701 204.137 465.803 204.24 466.007 cv
204.343 466.211 204.395 466.505 204.395 466.888 cv
cp
f
206.97 466.598 mo
206.97 466.793 li
207.255 466.417 207.566 466.141 207.905 465.965 cv
208.243 465.79 208.632 465.701 209.071 465.701 cv
209.499 465.701 209.88 465.794 210.217 465.98 cv
210.553 466.167 210.805 466.429 210.971 466.769 cv
211.078 466.968 211.147 467.181 211.178 467.411 cv
211.21 467.64 211.227 467.933 211.227 468.29 cv
211.227 471.305 li
211.227 471.629 211.152 471.875 211.004 472.041 cv
210.855 472.207 210.662 472.29 210.425 472.29 cv
210.183 472.29 209.988 472.206 209.837 472.035 cv
209.686 471.865 209.612 471.621 209.612 471.305 cv
209.612 468.603 li
209.612 468.07 209.537 467.661 209.389 467.378 cv
209.24 467.096 208.945 466.953 208.501 466.953 cv
208.213 466.953 207.949 467.04 207.712 467.212 cv
207.474 467.384 207.3 467.621 207.189 467.921 cv
207.11 468.163 207.071 468.613 207.071 469.275 cv
207.071 471.305 li
207.071 471.633 206.994 471.88 206.842 472.044 cv
206.69 472.208 206.493 472.29 206.252 472.29 cv
206.018 472.29 205.827 472.206 205.676 472.035 cv
205.526 471.865 205.45 471.621 205.45 471.305 cv
205.45 466.621 li
205.45 466.312 205.517 466.081 205.652 465.929 cv
205.787 465.777 205.971 465.701 206.204 465.701 cv
206.347 465.701 206.475 465.735 206.59 465.802 cv
206.705 465.87 206.797 465.97 206.866 466.105 cv
206.936 466.239 206.97 466.404 206.97 466.598 cv
cp
f
213.66 468.474 mo
216.598 468.474 li
216.558 467.92 216.409 467.505 216.15 467.23 cv
215.89 466.954 215.549 466.818 215.126 466.818 cv
214.722 466.818 214.39 466.957 214.131 467.235 cv
213.872 467.514 213.715 467.927 213.66 468.474 cv
cp
216.829 469.394 mo
213.66 469.394 li
213.664 469.762 213.737 470.086 213.882 470.367 cv
214.027 470.648 214.218 470.861 214.458 471.002 cv
214.697 471.145 214.961 471.216 215.25 471.216 cv
215.444 471.216 215.621 471.194 215.782 471.148 cv
215.942 471.102 216.097 471.031 216.248 470.934 cv
216.398 470.837 216.536 470.733 216.664 470.622 cv
216.79 470.511 216.954 470.36 217.156 470.171 cv
217.239 470.1 217.358 470.063 217.512 470.063 cv
217.678 470.063 217.813 470.11 217.916 470.201 cv
218.019 470.293 218.07 470.42 218.07 470.587 cv
218.07 470.733 218.013 470.903 217.898 471.1 cv
217.783 471.296 217.61 471.484 217.378 471.664 cv
217.146 471.844 216.856 471.993 216.506 472.112 cv
216.156 472.231 215.753 472.29 215.298 472.29 cv
214.257 472.29 213.448 471.993 212.869 471.4 cv
212.292 470.807 212.003 470.001 212.003 468.984 cv
212.003 468.504 212.074 468.06 212.217 467.651 cv
212.359 467.241 212.567 466.891 212.84 466.598 cv
213.113 466.305 213.45 466.08 213.849 465.924 cv
214.249 465.768 214.693 465.689 215.179 465.689 cv
215.812 465.689 216.355 465.823 216.808 466.09 cv
217.261 466.357 217.601 466.703 217.827 467.125 cv
218.052 467.549 218.165 467.981 218.165 468.419 cv
218.165 468.828 218.049 469.092 217.815 469.212 cv
217.582 469.333 217.253 469.394 216.829 469.394 cv
cp
f
220.248 468.984 mo
220.248 469.424 220.316 469.797 220.452 470.106 cv
220.589 470.415 220.776 470.647 221.014 470.803 cv
221.251 470.959 221.51 471.039 221.791 471.039 cv
222.076 471.039 222.337 470.964 222.572 470.815 cv
222.807 470.668 222.995 470.439 223.135 470.133 cv
223.276 469.826 223.346 469.442 223.346 468.984 cv
223.346 468.552 223.276 468.181 223.135 467.87 cv
222.995 467.56 222.805 467.323 222.566 467.158 cv
222.326 466.994 222.064 466.913 221.779 466.913 cv
221.483 466.913 221.217 466.997 220.984 467.164 cv
220.751 467.333 220.569 467.573 220.44 467.888 cv
220.312 468.203 220.248 468.568 220.248 468.984 cv
cp
223.435 471.365 mo
223.435 471.203 li
223.218 471.452 223.003 471.656 222.791 471.811 cv
222.579 471.969 222.35 472.087 222.103 472.168 cv
221.856 472.251 221.586 472.29 221.293 472.29 cv
220.904 472.29 220.546 472.208 220.215 472.044 cv
219.885 471.88 219.599 471.645 219.357 471.34 cv
219.116 471.036 218.933 470.679 218.809 470.266 cv
218.684 469.855 218.621 469.409 218.621 468.93 cv
218.621 467.917 218.869 467.128 219.363 466.561 cv
219.858 465.996 220.509 465.713 221.316 465.713 cv
221.783 465.713 222.177 465.793 222.498 465.953 cv
222.818 466.113 223.131 466.361 223.435 466.692 cv
223.435 464.3 li
223.435 463.967 223.502 463.717 223.634 463.546 cv
223.767 463.376 223.956 463.291 224.201 463.291 cv
224.447 463.291 224.635 463.369 224.768 463.525 cv
224.901 463.683 224.967 463.912 224.967 464.217 cv
224.967 471.365 li
224.967 471.673 224.896 471.904 224.754 472.059 cv
224.611 472.213 224.427 472.29 224.201 472.29 cv
223.98 472.29 223.797 472.21 223.652 472.051 cv
223.508 471.889 223.435 471.661 223.435 471.365 cv
cp
f
230.136 469.032 mo
230.136 469.676 230.284 470.172 230.578 470.517 cv
230.873 470.864 231.26 471.039 231.739 471.039 cv
232.146 471.039 232.498 470.862 232.792 470.507 cv
233.087 470.152 233.235 469.645 233.235 468.984 cv
233.235 468.557 233.174 468.188 233.051 467.879 cv
232.928 467.571 232.754 467.333 232.529 467.164 cv
232.303 466.997 232.04 466.913 231.739 466.913 cv
231.43 466.913 231.155 466.997 230.914 467.164 cv
230.673 467.333 230.483 467.576 230.344 467.894 cv
230.206 468.213 230.136 468.592 230.136 469.032 cv
cp
230.059 464.217 mo
230.059 466.692 li
230.364 466.376 230.674 466.133 230.991 465.965 cv
231.307 465.797 231.7 465.713 232.167 465.713 cv
232.705 465.713 233.176 465.841 233.583 466.095 cv
233.988 466.351 234.302 466.721 234.526 467.206 cv
234.75 467.69 234.862 468.265 234.862 468.93 cv
234.862 469.421 234.799 469.87 234.675 470.281 cv
234.55 470.691 234.369 471.046 234.132 471.346 cv
233.894 471.647 233.606 471.88 233.268 472.044 cv
232.929 472.208 232.556 472.29 232.149 472.29 cv
231.899 472.29 231.665 472.261 231.445 472.201 cv
231.225 472.142 231.038 472.064 230.884 471.966 cv
230.73 471.87 230.599 471.77 230.49 471.667 cv
230.381 471.565 230.237 471.41 230.059 471.203 cv
230.059 471.365 li
230.059 471.668 229.986 471.899 229.839 472.057 cv
229.693 472.213 229.507 472.29 229.281 472.29 cv
229.052 472.29 228.869 472.213 228.732 472.057 cv
228.596 471.899 228.528 471.668 228.528 471.365 cv
228.528 464.288 li
228.528 463.96 228.594 463.711 228.726 463.543 cv
228.859 463.375 229.044 463.291 229.281 463.291 cv
229.531 463.291 229.723 463.371 229.857 463.531 cv
229.992 463.693 230.059 463.919 230.059 464.217 cv
cp
f
236.963 472.492 mo
237.111 472.13 li
235.117 467.108 li
234.994 466.82 234.932 466.609 234.932 466.478 cv
234.932 466.34 234.968 466.212 235.039 466.094 cv
235.111 465.974 235.208 465.879 235.333 465.808 cv
235.458 465.736 235.587 465.701 235.722 465.701 cv
235.955 465.701 236.131 465.775 236.25 465.924 cv
236.369 466.072 236.474 466.284 236.565 466.561 cv
237.936 470.55 li
239.236 466.841 li
239.339 466.54 239.432 466.305 239.515 466.134 cv
239.598 465.964 239.686 465.849 239.779 465.791 cv
239.872 465.731 240.004 465.701 240.174 465.701 cv
240.297 465.701 240.415 465.733 240.527 465.799 cv
240.64 465.864 240.727 465.952 240.788 466.063 cv
240.85 466.174 240.881 466.29 240.881 466.413 cv
240.865 466.488 240.839 466.595 240.803 466.734 cv
240.767 466.872 240.724 467.014 240.673 467.156 cv
238.56 472.688 li
238.377 473.175 238.199 473.556 238.025 473.833 cv
237.851 474.11 237.621 474.324 237.333 474.471 cv
237.046 474.62 236.66 474.695 236.173 474.695 cv
235.698 474.695 235.342 474.643 235.105 474.541 cv
234.867 474.437 234.749 474.249 234.749 473.976 cv
234.749 473.79 234.805 473.646 234.918 473.546 cv
235.03 473.445 235.198 473.393 235.419 473.393 cv
235.506 473.393 235.592 473.406 235.675 473.43 cv
235.777 473.453 235.866 473.465 235.941 473.465 cv
236.127 473.465 236.274 473.439 236.381 473.382 cv
236.488 473.327 236.583 473.231 236.669 473.094 cv
236.754 472.959 236.852 472.757 236.963 472.492 cv
cp
f
260.439 465.841 mo
260.826 465.841 li
260.826 465.355 li
260.826 464.846 260.888 464.444 261.018 464.144 cv
261.145 463.845 261.365 463.628 261.672 463.491 cv
261.979 463.356 262.398 463.287 262.932 463.287 cv
263.882 463.287 264.353 463.517 264.353 463.983 cv
264.353 464.132 264.303 464.261 264.203 464.367 cv
264.106 464.474 263.988 464.527 263.854 464.527 cv
263.791 464.527 263.68 464.516 263.524 464.491 cv
263.376 464.47 263.242 464.455 263.135 464.455 cv
262.843 464.455 262.656 464.543 262.569 464.715 cv
262.49 464.887 262.447 465.133 262.447 465.455 cv
262.447 465.841 li
262.843 465.841 li
263.462 465.841 263.768 466.026 263.768 466.401 cv
263.768 466.662 263.689 466.832 263.523 466.904 cv
263.359 466.975 263.133 467.01 262.843 467.01 cv
262.447 467.01 li
262.447 471.305 li
262.447 471.625 262.372 471.867 262.217 472.035 cv
262.065 472.206 261.87 472.289 261.627 472.289 cv
261.398 472.289 261.208 472.206 261.053 472.035 cv
260.901 471.867 260.826 471.625 260.826 471.305 cv
260.826 467.01 li
260.379 467.01 li
260.137 467.01 259.953 466.958 259.822 466.847 cv
259.691 466.741 259.625 466.598 259.625 466.423 cv
259.625 466.034 259.896 465.841 260.439 465.841 cv
f
265.746 469.95 mo
265.746 471.305 li
265.746 471.632 265.663 471.88 265.511 472.042 cv
265.357 472.208 265.162 472.289 264.925 472.289 cv
264.687 472.289 264.496 472.207 264.347 472.038 cv
264.199 471.874 264.121 471.628 264.121 471.305 cv
264.121 466.791 li
264.121 466.062 264.383 465.698 264.909 465.698 cv
265.18 465.698 265.373 465.782 265.493 465.953 cv
265.611 466.124 265.677 466.374 265.691 466.708 cv
265.884 466.374 266.081 466.124 266.284 465.953 cv
266.492 465.782 266.76 465.698 267.102 465.698 cv
267.445 465.698 267.772 465.782 268.093 465.953 cv
268.415 466.124 268.575 466.351 268.575 466.631 cv
268.575 466.827 268.506 466.993 268.371 467.119 cv
268.233 467.25 268.087 467.314 267.93 467.314 cv
267.867 467.314 267.723 467.275 267.497 467.202 cv
267.269 467.131 267.066 467.093 266.896 467.093 cv
266.658 467.093 266.462 467.158 266.313 467.28 cv
266.162 467.408 266.044 467.59 265.961 467.834 cv
265.88 468.081 265.824 468.375 265.79 468.712 cv
265.759 469.05 265.746 469.464 265.746 469.95 cv
f
270.024 468.47 mo
272.962 468.47 li
272.923 467.917 272.777 467.502 272.517 467.229 cv
272.256 466.953 271.918 466.816 271.492 466.816 cv
271.087 466.816 270.755 466.954 270.497 467.235 cv
270.238 467.513 270.079 467.925 270.024 468.47 cv
273.196 469.392 mo
270.024 469.392 li
270.03 469.759 270.102 470.086 270.246 470.366 cv
270.393 470.646 270.583 470.858 270.824 471.002 cv
271.064 471.144 271.327 471.214 271.617 471.214 cv
271.811 471.214 271.987 471.194 272.148 471.145 cv
272.307 471.101 272.463 471.029 272.613 470.931 cv
272.765 470.836 272.901 470.732 273.028 470.619 cv
273.155 470.51 273.32 470.359 273.523 470.169 cv
273.607 470.099 273.725 470.061 273.878 470.061 cv
274.045 470.061 274.178 470.107 274.283 470.2 cv
274.387 470.292 274.436 470.418 274.436 470.586 cv
274.436 470.732 274.38 470.903 274.269 471.097 cv
274.151 471.296 273.979 471.483 273.746 471.664 cv
273.512 471.842 273.221 471.993 272.872 472.111 cv
272.523 472.229 272.119 472.289 271.665 472.289 cv
270.621 472.289 269.813 471.993 269.236 471.4 cv
268.658 470.805 268.367 469.999 268.367 468.983 cv
268.367 468.503 268.44 468.059 268.584 467.649 cv
268.724 467.237 268.932 466.888 269.208 466.594 cv
269.48 466.3 269.814 466.076 270.216 465.92 cv
270.614 465.764 271.057 465.686 271.545 465.686 cv
272.178 465.686 272.721 465.82 273.175 466.09 cv
273.627 466.354 273.971 466.7 274.193 467.124 cv
274.419 467.549 274.531 467.978 274.531 468.42 cv
274.531 468.826 274.414 469.089 274.181 469.211 cv
273.948 469.332 273.619 469.392 273.196 469.392 cv
f
276.767 468.47 mo
279.706 468.47 li
279.665 467.917 279.515 467.502 279.259 467.229 cv
278.995 466.953 278.657 466.816 278.232 466.816 cv
277.828 466.816 277.497 466.954 277.236 467.235 cv
276.979 467.513 276.82 467.925 276.767 468.47 cv
279.938 469.392 mo
276.767 469.392 li
276.771 469.759 276.846 470.086 276.988 470.366 cv
277.134 470.646 277.325 470.858 277.565 471.002 cv
277.804 471.144 278.067 471.214 278.359 471.214 cv
278.551 471.214 278.729 471.194 278.887 471.145 cv
279.049 471.101 279.203 471.029 279.355 470.931 cv
279.507 470.836 279.643 470.732 279.77 470.619 cv
279.895 470.51 280.061 470.359 280.263 470.169 cv
280.348 470.099 280.467 470.061 280.619 470.061 cv
280.786 470.061 280.92 470.107 281.025 470.2 cv
281.128 470.292 281.175 470.418 281.175 470.586 cv
281.175 470.732 281.12 470.903 281.004 471.097 cv
280.893 471.296 280.72 471.483 280.486 471.664 cv
280.254 471.842 279.961 471.993 279.613 472.111 cv
279.265 472.229 278.858 472.289 278.404 472.289 cv
277.362 472.289 276.555 471.993 275.975 471.4 cv
275.398 470.805 275.107 469.999 275.107 468.983 cv
275.107 468.503 275.179 468.059 275.325 467.649 cv
275.466 467.237 275.674 466.888 275.947 466.594 cv
276.219 466.3 276.555 466.076 276.955 465.92 cv
277.355 465.764 277.8 465.686 278.286 465.686 cv
278.917 465.686 279.46 465.82 279.919 466.09 cv
280.37 466.354 280.71 466.7 280.932 467.124 cv
281.157 467.549 281.273 467.978 281.273 468.42 cv
281.273 468.826 281.153 469.089 280.923 469.211 cv
280.688 469.332 280.36 469.392 279.938 469.392 cv
f
286.665 468.965 mo
286.665 468.536 286.599 468.169 286.468 467.862 cv
286.338 467.555 286.157 467.32 285.928 467.158 cv
285.698 466.993 285.438 466.91 285.157 466.91 cv
284.711 466.91 284.333 467.087 284.027 467.438 cv
283.719 467.792 283.564 468.309 283.564 468.995 cv
283.564 469.637 283.717 470.141 284.024 470.499 cv
284.328 470.858 284.703 471.036 285.157 471.036 cv
285.425 471.036 285.676 470.957 285.906 470.803 cv
286.138 470.646 286.321 470.411 286.457 470.099 cv
286.595 469.785 286.665 469.407 286.665 468.965 cv
283.487 466.61 mo
283.487 466.804 li
283.791 466.428 284.109 466.152 284.441 465.976 cv
284.764 465.798 285.139 465.709 285.554 465.709 cv
286.051 465.709 286.513 465.84 286.934 466.095 cv
287.353 466.354 287.683 466.73 287.927 467.224 cv
288.17 467.721 288.293 468.305 288.293 468.983 cv
288.293 469.48 288.222 469.94 288.083 470.359 cv
287.943 470.776 287.748 471.125 287.502 471.408 cv
287.257 471.689 286.968 471.909 286.634 472.062 cv
286.295 472.213 285.94 472.289 285.554 472.289 cv
285.093 472.289 284.702 472.196 284.388 472.009 cv
284.075 471.827 283.774 471.551 283.487 471.194 cv
283.487 473.626 li
283.487 474.336 283.227 474.695 282.71 474.695 cv
282.403 474.695 282.204 474.603 282.103 474.42 cv
282.008 474.233 281.957 473.968 281.957 473.613 cv
281.957 466.617 li
281.957 466.309 282.024 466.08 282.157 465.925 cv
282.291 465.776 282.477 465.698 282.71 465.698 cv
282.94 465.698 283.126 465.776 283.27 465.931 cv
283.417 466.09 283.487 466.313 283.487 466.61 cv
f
290.727 466.617 mo
290.727 471.306 li
290.727 471.628 290.65 471.874 290.497 472.038 cv
290.34 472.207 290.146 472.289 289.908 472.289 cv
289.67 472.289 289.48 472.206 289.328 472.035 cv
289.182 471.863 289.106 471.62 289.106 471.306 cv
289.106 466.664 li
289.106 466.345 289.182 466.105 289.328 465.942 cv
289.48 465.777 289.67 465.698 289.908 465.698 cv
290.146 465.698 290.34 465.777 290.497 465.942 cv
290.65 466.105 290.727 466.332 290.727 466.617 cv
289.925 464.944 mo
289.698 464.944 289.507 464.872 289.348 464.734 cv
289.186 464.595 289.106 464.402 289.106 464.149 cv
289.106 463.918 289.188 463.73 289.354 463.58 cv
289.518 463.434 289.708 463.358 289.925 463.358 cv
290.138 463.358 290.322 463.424 290.483 463.557 cv
290.646 463.694 290.727 463.891 290.727 464.149 cv
290.727 464.398 290.648 464.593 290.492 464.734 cv
290.333 464.872 290.145 464.944 289.925 464.944 cv
f
295.952 471.549 mo
294.525 469.195 li
293.645 470.025 li
293.645 471.317 li
293.645 471.628 293.562 471.867 293.397 472.035 cv
293.236 472.206 293.043 472.289 292.831 472.289 cv
292.582 472.289 292.384 472.207 292.242 472.038 cv
292.101 471.874 292.027 471.628 292.027 471.305 cv
292.027 464.391 li
292.027 464.032 292.099 463.758 292.235 463.569 cv
292.374 463.379 292.576 463.287 292.831 463.287 cv
293.08 463.287 293.276 463.373 293.424 463.543 cv
293.57 463.713 293.645 463.965 293.645 464.296 cv
293.645 468.229 li
295.467 466.314 li
295.693 466.079 295.863 465.914 295.984 465.827 cv
296.102 465.741 296.246 465.698 296.415 465.698 cv
296.618 465.698 296.786 465.763 296.925 465.891 cv
297.057 466.019 297.125 466.181 297.125 466.374 cv
297.125 466.611 296.904 466.93 296.466 467.325 cv
295.605 468.114 li
297.267 470.729 li
297.388 470.924 297.479 471.068 297.532 471.169 cv
297.584 471.269 297.613 471.369 297.613 471.459 cv
297.613 471.716 297.541 471.918 297.4 472.068 cv
297.259 472.215 297.073 472.289 296.847 472.289 cv
296.649 472.289 296.494 472.239 296.388 472.129 cv
296.282 472.021 296.134 471.827 295.952 471.549 cv
f
299.475 472.289 mo
299.23 472.289 299.02 472.21 298.841 472.051 cv
298.663 471.896 298.573 471.672 298.573 471.385 cv
298.573 471.145 298.659 470.936 298.829 470.764 cv
299.001 470.589 299.209 470.501 299.459 470.501 cv
299.708 470.501 299.919 470.589 300.099 470.759 cv
300.273 470.931 300.362 471.142 300.362 471.385 cv
300.362 471.668 300.273 471.891 300.099 472.048 cv
299.919 472.21 299.712 472.289 299.475 472.289 cv
f
307.536 470.283 mo
307.536 470.483 307.475 470.701 307.355 470.929 cv
307.235 471.161 307.049 471.378 306.8 471.585 cv
306.554 471.793 306.244 471.961 305.867 472.087 cv
305.491 472.214 305.066 472.279 304.597 472.279 cv
303.594 472.279 302.811 471.986 302.248 471.404 cv
301.689 470.819 301.407 470.035 301.407 469.054 cv
301.407 468.386 301.535 467.8 301.794 467.289 cv
302.049 466.78 302.422 466.384 302.908 466.105 cv
303.395 465.825 303.981 465.686 304.654 465.686 cv
305.076 465.686 305.459 465.747 305.812 465.87 cv
306.162 465.992 306.457 466.152 306.703 466.345 cv
306.944 466.542 307.131 466.747 307.258 466.965 cv
307.388 467.185 307.451 467.39 307.451 467.582 cv
307.451 467.775 307.38 467.939 307.236 468.074 cv
307.09 468.208 306.914 468.276 306.712 468.276 cv
306.576 468.276 306.464 468.241 306.374 468.172 cv
306.284 468.103 306.184 467.992 306.075 467.834 cv
305.876 467.535 305.671 467.308 305.453 467.159 cv
305.238 467.008 304.964 466.934 304.631 466.934 cv
304.155 466.934 303.767 467.119 303.473 467.494 cv
303.181 467.866 303.033 468.381 303.033 469.028 cv
303.033 469.333 303.072 469.615 303.148 469.87 cv
303.221 470.124 303.33 470.343 303.473 470.522 cv
303.617 470.702 303.788 470.839 303.989 470.931 cv
304.192 471.028 304.415 471.073 304.654 471.073 cv
304.98 471.073 305.259 470.997 305.489 470.847 cv
305.725 470.697 305.929 470.467 306.106 470.158 cv
306.205 469.977 306.311 469.835 306.424 469.731 cv
306.538 469.629 306.68 469.575 306.847 469.575 cv
307.044 469.575 307.209 469.652 307.337 469.802 cv
307.469 469.952 307.536 470.113 307.536 470.283 cv
f
312.903 468.995 mo
312.903 468.334 312.756 467.82 312.467 467.452 cv
312.178 467.08 311.786 466.897 311.295 466.897 cv
310.978 466.897 310.698 466.98 310.456 467.143 cv
310.215 467.307 310.03 467.549 309.9 467.871 cv
309.769 468.192 309.703 468.567 309.703 468.995 cv
309.703 469.419 309.767 469.787 309.896 470.104 cv
310.027 470.422 310.21 470.664 310.45 470.832 cv
310.691 470.998 310.971 471.085 311.295 471.085 cv
311.786 471.085 312.178 470.9 312.467 470.527 cv
312.756 470.158 312.903 469.646 312.903 468.995 cv
314.53 468.995 mo
314.53 469.476 314.454 469.923 314.308 470.332 cv
314.154 470.74 313.938 471.09 313.652 471.38 cv
313.368 471.673 313.026 471.898 312.632 472.055 cv
312.232 472.21 311.788 472.29 311.295 472.29 cv
310.804 472.29 310.362 472.21 309.969 472.051 cv
309.58 471.896 309.238 471.667 308.954 471.374 cv
308.666 471.076 308.448 470.729 308.296 470.327 cv
308.153 469.924 308.077 469.48 308.077 468.995 cv
308.077 468.503 308.154 468.054 308.301 467.646 cv
308.452 467.237 308.669 466.888 308.95 466.6 cv
309.232 466.312 309.571 466.09 309.969 465.931 cv
310.372 465.776 310.813 465.698 311.295 465.698 cv
311.786 465.698 312.231 465.776 312.632 465.936 cv
313.031 466.094 313.371 466.321 313.659 466.611 cv
313.945 466.908 314.161 467.254 314.309 467.656 cv
314.456 468.063 314.53 468.506 314.53 468.995 cv
f
320.713 469.114 mo
320.713 471.268 li
320.713 471.61 320.637 471.863 320.482 472.035 cv
320.326 472.206 320.124 472.29 319.87 472.29 cv
319.625 472.29 319.425 472.206 319.276 472.035 cv
319.122 471.863 319.044 471.61 319.044 471.268 cv
319.044 468.686 li
319.044 468.277 319.031 467.96 319.004 467.733 cv
318.976 467.512 318.899 467.324 318.778 467.181 cv
318.655 467.035 318.459 466.961 318.196 466.961 cv
317.665 466.961 317.317 467.143 317.148 467.512 cv
316.981 467.872 316.894 468.396 316.894 469.079 cv
316.894 471.268 li
316.894 471.604 316.818 471.859 316.669 472.032 cv
316.512 472.203 316.313 472.29 316.065 472.29 cv
315.818 472.29 315.617 472.203 315.461 472.032 cv
315.304 471.859 315.226 471.604 315.226 471.268 cv
315.226 466.631 li
315.226 466.326 315.295 466.094 315.436 465.936 cv
315.578 465.776 315.764 465.698 315.991 465.698 cv
316.214 465.698 316.399 465.775 316.549 465.92 cv
316.697 466.069 316.77 466.274 316.77 466.535 cv
316.77 466.688 li
317.053 466.354 317.355 466.106 317.673 465.951 cv
317.995 465.788 318.349 465.709 318.744 465.709 cv
319.15 465.709 319.501 465.791 319.792 465.953 cv
320.085 466.116 320.326 466.362 320.517 466.688 cv
320.792 466.358 321.085 466.112 321.399 465.951 cv
321.711 465.79 322.057 465.709 322.438 465.709 cv
322.878 465.709 323.263 465.798 323.584 465.971 cv
323.902 466.145 324.142 466.396 324.3 466.719 cv
324.438 467.014 324.507 467.474 324.507 468.104 cv
324.507 471.268 li
324.507 471.61 324.431 471.863 324.277 472.035 cv
324.123 472.206 323.918 472.29 323.666 472.29 cv
323.419 472.29 323.219 472.203 323.063 472.032 cv
322.906 471.859 322.827 471.604 322.827 471.268 cv
322.827 468.542 li
322.827 468.193 322.812 467.915 322.784 467.706 cv
322.755 467.495 322.673 467.318 322.545 467.176 cv
322.412 467.035 322.213 466.961 321.949 466.961 cv
321.736 466.961 321.533 467.029 321.34 467.154 cv
321.148 467.278 320.998 467.452 320.89 467.662 cv
320.774 467.936 320.713 468.42 320.713 469.114 cv
f
245.272 468.602 mo
245.271 468.6 245.271 468.596 245.271 468.591 cv
245.271 468.596 245.271 468.6 245.272 468.602 cv
cp
f
245.354 469.121 mo
245.355 469.121 245.355 469.121 245.356 469.121 cv
245.325 468.973 245.3 468.827 245.281 468.681 cv
245.3 468.828 245.325 468.974 245.354 469.121 cv
cp
f
245.89 470.625 mo
245.887 470.619 245.884 470.611 245.88 470.604 cv
245.884 470.611 245.887 470.619 245.89 470.625 cv
cp
f
245.839 470.525 mo
245.825 470.497 245.812 470.469 245.798 470.44 cv
245.812 470.47 245.825 470.497 245.839 470.525 cv
cp
f
245.505 469.699 mo
245.584 469.95 245.679 470.193 245.79 470.423 cv
245.678 470.188 245.584 469.945 245.507 469.699 cv
245.507 469.699 245.505 469.699 245.505 469.699 cv
cp
f
251.545 462.392 mo
251.859 462.392 252.09 462.417 252.355 462.462 cv
252.43 461.985 li
252.43 461.985 251.698 461.76 250.736 461.838 cv
250.66 461.579 li
250.959 461.516 251.184 461.25 251.184 460.932 cv
251.184 460.569 250.888 460.275 250.523 460.275 cv
250.159 460.275 249.863 460.569 249.863 460.932 cv
249.863 461.25 250.087 461.516 250.386 461.579 cv
250.469 461.869 li
249.448 462.009 248.635 462.407 248.635 462.407 cv
248.779 462.848 li
249.397 462.643 249.933 462.517 250.419 462.464 cv
250.895 462.414 251.253 462.392 251.545 462.392 cv
cp
f
245.878 464.803 mo
245.882 464.798 li
245.906 464.768 245.929 464.739 245.953 464.709 cv
245.757 464.569 li
245.452 464.345 li
245.435 464.37 244.955 464.811 244.576 465.626 cv
244.56 465.6 244.541 465.575 244.52 465.552 cv
244.407 465.427 244.248 465.364 244.046 465.367 cv
244.044 465.367 244.04 465.367 244.037 465.367 cv
243.912 465.367 243.826 465.326 243.77 465.276 cv
243.826 465.205 243.86 465.116 243.86 465.017 cv
243.86 464.787 243.672 464.599 243.441 464.599 cv
243.211 464.599 243.023 464.787 243.023 465.017 cv
243.023 465.249 243.211 465.436 243.441 465.436 cv
243.478 465.436 243.512 465.43 243.546 465.422 cv
243.648 465.537 243.811 465.636 244.05 465.631 cv
244.173 465.63 244.263 465.661 244.324 465.729 cv
244.393 465.804 244.417 465.913 244.424 465.996 cv
244.423 465.997 244.423 465.998 244.422 465.998 cv
244.15 466.742 244.227 467.667 244.227 467.667 cv
244.888 467.694 li
244.902 467.357 244.95 466.767 245.12 466.3 cv
245.449 465.394 245.861 464.828 245.878 464.803 cv
cp
f
257.295 462.944 mo
257.065 462.944 256.877 463.131 256.877 463.363 cv
256.877 463.398 256.882 463.432 256.892 463.465 cv
256.777 463.569 256.677 463.733 256.681 463.972 cv
256.683 464.095 256.651 464.184 256.584 464.245 cv
256.532 464.292 256.465 464.318 256.4 464.333 cv
255.908 463.644 255.303 463.224 255.303 463.224 cv
254.828 463.731 li
255.187 464.057 255.553 464.466 255.908 464.975 cv
256.155 465.328 256.407 465.782 256.618 466.235 cv
257.258 465.931 li
257.258 465.931 256.966 465.209 256.555 464.562 cv
256.626 464.536 256.698 464.497 256.761 464.441 cv
256.887 464.328 256.948 464.168 256.944 463.967 cv
256.943 463.838 256.986 463.75 257.037 463.691 cv
257.109 463.746 257.198 463.78 257.295 463.78 cv
257.527 463.78 257.714 463.594 257.714 463.363 cv
257.714 463.131 257.527 462.944 257.295 462.944 cv
cp
f
255.635 468.696 mo
254.753 469.125 253.304 469.692 251.396 469.958 cv
250.647 470.062 249.921 470.1 249.253 470.1 cv
248.384 470.1 247.616 470.035 247.027 469.961 cv
246.354 469.876 245.828 469.773 245.507 469.699 cv
245.584 469.945 245.678 470.188 245.79 470.423 cv
245.792 470.43 245.795 470.437 245.798 470.44 cv
245.812 470.469 245.825 470.497 245.839 470.525 cv
245.852 470.552 245.866 470.578 245.88 470.604 cv
245.884 470.611 245.887 470.619 245.89 470.625 cv
246.08 470.981 246.307 471.309 246.566 471.593 cv
247.466 472.577 248.383 472.733 248.391 472.734 cv
248.406 472.736 li
248.419 472.74 li
248.427 472.744 249.24 473.007 250.476 473.007 cv
251.692 473.007 252.886 472.761 254.022 472.276 cv
254.864 471.845 255.661 471.191 256.056 470.608 cv
256.361 470.156 256.582 469.675 256.712 469.175 cv
256.782 468.908 256.837 468.482 256.804 468.033 cv
256.556 468.201 256.164 468.437 255.635 468.696 cv
cp
f
248.678 464.552 mo
249.651 464.552 250.439 465.34 250.439 466.313 cv
250.439 467.285 249.651 468.072 248.678 468.072 cv
247.707 468.072 246.919 467.285 246.919 466.313 cv
246.919 465.34 247.707 464.552 248.678 464.552 cv
cp
253.829 464.596 mo
254.43 464.596 254.919 465.084 254.919 465.685 cv
254.919 466.286 254.43 466.775 253.829 466.775 cv
253.229 466.775 252.74 466.286 252.74 465.685 cv
252.74 465.084 253.229 464.596 253.829 464.596 cv
cp
246.161 465.012 mo
246.135 465.05 245.753 465.591 245.451 466.421 cv
245.225 467.042 245.235 467.948 245.235 467.958 cv
245.235 467.96 li
245.235 468.172 245.247 468.382 245.271 468.591 cv
245.271 468.596 245.271 468.6 245.272 468.602 cv
245.274 468.629 245.279 468.655 245.281 468.681 cv
245.3 468.827 245.325 468.973 245.356 469.121 cv
245.793 469.232 248.405 469.841 251.323 469.435 cv
253.153 469.18 254.542 468.639 255.386 468.23 cv
256.086 467.891 256.537 467.583 256.71 467.456 cv
256.537 466.814 256.059 465.805 255.621 465.177 cv
254.367 463.386 253.016 462.927 252.323 462.812 cv
252.058 462.77 251.846 462.744 251.545 462.744 cv
251.266 462.744 250.919 462.767 250.456 462.816 cv
249.992 462.864 249.474 462.986 248.873 463.188 cv
248.031 463.47 247.269 463.912 246.669 464.468 cv
246.649 464.487 li
246.56 464.569 246.374 464.741 246.161 465.012 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/MROGHE+GlacialIndifference-Bold*1 uf/MROGHF+GlacialIndifference-Regular*1 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 20.1.0%%For: (Ayib) ()%%Title: (Money Logo-3 up-01.eps)%%CreationDate: 30/07/18 5.06 PM%%Canvassize: 16383%AI9_DataStream%Gb",KpO;,7ddVG_g]JkpAlDANoM-OYFCN%9K>GJa]?fmen$RY.9JP@6G8&'V4MR(;[PX`s9p[DH[4uhcmaC-EN;_)+`0FB?N@E\N%6YXNqQpRjuckVFFD.@Ws*iEr5')cpsRjZk6F@;+B1<4PdSr^2dbOL$mr"h@o(<Jab67VFQL1,Q]@gq$.9"LhNYlL5i_/5WOZ2e=:%7rd%g6WmnMdfh>J>9?nErfeQd$)AMtl;HG&L)8+G>:H#7;CjaN"XWT@@IPW3BZ6i*e%M00g(XeeiGl]gc5%V4c3#Ns_=/B"p9_+M%E2Q;7!am,f&*-X$Gb:=C#i)h5>X"2N#8`'6L\k??!X&24Kb)(,DNE68#_kh?!_3SS4+9*5Y]B)@6ukYD2D_M<'*DIiW6p8A"U`MK%(WU?0V:C:9J##;@D#rIkS^l](q0WZ=C%Z]O<$uS$+B58kCcU>$&"<@Z=(Wkd9?h\tjb,,^)__A<!Qa8-nO[<7:gAEB_tbJ6/YC+s%,28q2d!jA,`K5mgkWaIj=):\X\NV;>q.,mBA-noDNWDgKJc%r&flN#V8eYrE@iK*G<kqE[(_>Plf*)B`ra8K^')*Ra<^<:$JJ;Jj%'k'I#&C)8H`rf.Ob@$W/*8RO5IQ%J`mdUnKr22Qd]:=>26g5?c+@9mNao?e\s,/*+`!ZW(T()o=?+_Qt,Ks2i!jp'h2pRHA*:Vlf%$jaok8/B,:`Fk*EoE99.:)&`rVpG?+AHdqrYS^!s,OBi=r':>qpY)BJ)CPY_oCaR;*o#]qW_5,VBhsn_WBf-T"<dT+]ejZ)Yh'[S%8?iJXT\4m2EBlX4%/$6`>db7AP6cDG%\,jK'm<498kHTlMlsDmSeg)-OuDs,bnu"5fNGI2/%0"8D:q?^<ZK7]CcW<#:7"Zip?A;g%QgFGqcJA^,UaUQpnCu4r'ZWHgGcCkbceb6K$mjOR,R6=`);%69&NT9f)8IO.kq7M;[<L9F0-D\G_%(Rt90qsQMdok^Z]/+]9D.Z!%UqO]&,X5*VDG?KI5GH3IAY](9^SnDc1gRkufP!5DQfYeA$@nkk'YGKLHtUU;+7f[^\3In15,EKpA=*6T[T!3K(ik9^JTT9[OoZR=%]m;r-l1*miqS6i$e;+hVW[B?IM4=Q0JY#-Lq$G`JlqqaXU,-5IrKFUp:e&H10I/_;6N8/o"tW5/k<DA%kh#C>GdC'CTV6leR'trK%rSjitOlD<HV]:UaMDSm!DY+<f;qQFR+F#4S!4.(Tn??1H+D@pEHIaEgC,&!G"#L_sm$%`!U9I-6,+=a$7n(Nj/d@XV=d'ThB;OUV%>r9]]NCmZTOp'X3mZQ4s0".]O_:6Fo>rYbF:YR2/`JGFo*=g4RYkk:9fg,rgWjJ_P$N"3lmZZFJ`/mmukTN$bL@u)`qC-/NA4YOe%<fI@P_lp]R%n28*bZ&W<@:?\)=139tn(hm[dCurNI4$l!daoPY5leMW++c9%A_U2Of7a!q+jXVT^%'+&J^5BU*W$hXSDc]l"?nVK%+CoKGJJ_5P;j%/G#Wk3;!AbkrOr+upor%o\%29,&)?*Ij?6%Z9@,hAD)E8Ko@)rV-,k_PbG,H?g!GMO2J@6GJp\O6Q&_/7o$JagQ%"+pjGKbF-*m,S:kphr%tT@][-(_@`LE7[cTJT:K[NVesgiPJu4#,lC>qJ4SmR?h.VGNP_jdbWnf[(tI]JLj,`WOSA3-f.mlR=[qC%Nh&qNiuY6T+O2AC^t^BXB1hgCW&1/oJA.X,2Zu@O?&DmAJMr[_)#&W`%On)-=9gn!qf/hLi+.@DrCqF"V=kl'!F`dj;HX+Q$BPUD%0A7BM#D*>$:-%NpIa7sVgcIgp^p'0]`Oj7^%uOdC'!PiW_skeW3JQfRA(H$F5Y+d"_*fmV_M4:o-NbOubpLdjs4E^rK+0)eA0<(M%!Q\i&;rSUt`Lk=N6V>:DLZ-3Di!E9U5^/GIDTWKS23qehYdZ`%i/p2jO'ka$'&.tg-FXH=lD"NWg$KHj;+;SGV6N!-S![dsehM_D%6gSlg\/'M$i;jJ8"c$csBn!FZHHD^5F=A5bWr<'.Z5f>g@k`^tJC3,FjEoW\J!.So([1R![=gpLmg.?FAT^TQe5?t5d0(4SPgodp%Tb%D!QIQ.(2g!)<O(>ZdG?$UL5,pNh^cd4q/*r0eV-dZG.i*"fRLCh_1l>1&mao/X!N"bi&I?aqPSJ.iUY?pJ"/a3B6;EOcf338#%+M\)q"ao`7g9\Tg/tTmD_CnHZ7:Etd9P[V]5nX\P%B:nnfPe1^&!E?<D1Bu>@BdN:QlMg.?mrA4Q;aYo5f)Ac2G*N&T2(StMLNYo%k1<2RnXjVYrqcaXU=iS3R1..P/sdWj$X+UE"Le,J;HOWd8h.`!.I&'TL8oa/kA$iS70Z2Y@O?dXf:F`O=d.#MZ)^R4bjg&]<H@?_%."9=[2jO!sT5S1TQs21;Y^2Lb#r.fLq1`smf;DP,AubtB!ZnmOnu+EN$';?h.t'UP6AJgo`m[ea,EP-MTM4'.NWn,kIXKK:[i9XM%jeQWHc,k"]Hfj7M-O6LXnn*ZJ:`Kf$FkLiBlu:CMO<,JT:oR6GD*OS[.Qc`Q<*H@Ga=$9ZWkM;T:qjrE$r3tnr/5Qf:e'jalj9\i%$sZ]Ge"c,i!hLk^B9E>-/h,`Y6je_cP=ankV>3asGk+G!m)$sm#<^6N:psN?jFER:n<*lk;KKq\00,^'N61b[EkinJ3gUi5lM)u7%i%^IdHla-"IS`^\5^(hQs'e:`Hr;6;je0!UT/iE?%7>E7S"P5WBER?.+h"c,V\@ZoV?acc?V(.0-pgIg;kBo/EU4g-V\igb(;$_s%45]uD6SG&Cq.@A<'mBQn>rd&&`qF^@,okKpo@<gQU@A*QSq3"Mgg/Pumh>[?*)(@J*p=Cb^Y1Y_rV:HDCiUk%#JLobB?.YMNo^Z+%B#cQ,J3'"=jF7hd9RVH6A]ITE;YE9nI`h?)%TVnX`sCm$Vi/7g"'VA!Pbn[rlVic@WRt@8ItI^BA]SfC]_MF?\MSaD/LOj@E$%Bg%ObJ?>$:W)g4VeCF'U\koXcf^04@W`pA"6nJoKAN]5#aC"p!ngB?-^EAIVHCcJ`W+pYmI`-M4o<^)1I:Za="nTT+L0%&0fkY%hBA0%UkH6QRZIVm-RAoq!^]G<('Z!UOM;9Q:B'iu=**Z@o5dt#5J=?KTJHR#0(c@U4eFk5pe(+flnBkd>b?V<4MR!A=B57<;tBCsES5U/%GG8FAZLR,e2BEl)e#=-#AJ9+Tqi9YebJZAtqCR&NnF?nn*8T;^JqD`f^DRL,B:I%Vah7GI:OJL`8(i@3[.G;TL6G?Q\\':8IqH:_%B1D$\c$pCqZJ8sjNs_3?Khj(5\QH<sZ>SR>VL?(#+6C8SFKoPPO>qZTNP%co)0b'I070D[Cc).$QVPgkjj/)HmWUf=i!9WNFmYM;%A"JPNA+IP"b?5(^B`-Sj%V0LRro:<p:0-,p`A=(VW=9TqQ1+Ku*02PG8hoO&"S)rZ)]_/X/hVLAihJnZG5QG+&*s:[fYZZT\bN1K%/``CXPMa%ENC"rE;Ka[dP'i/4`>p7<I_q0e$@Xt;85@IV-]LXs9(m#W3TNf"ErM\Oit>_0PY3mFOrs5=S"I!4S\"'L?+)g6ds'S%%Q"OM$`%R+m0H[3+p5YN#'3>qEmrP,]!@b<1o<Y\(Z75VTG2Q?,YBSKnW?0;<a6YBe^*;c#&0=AWJ5lOSP;6p%\lPZJYp9(.K,T5*%!HTerfZ6g#3gq,H2'ASbg?$dtj!^.Aa<n+FV;_.cjV,,enG-9.R%NFmfm3fQ\j1:+GlY,J(VGS\VF]D/CNN+E"2F"OS$6IZc[QU%%G).<(a>s)97"S[K>j_4[.gE<@Z7GtM1U6?3Y'pYXr7mqCZHRtAe"\/3pHNsojh-YhZ[+:ZAkjo'l[6<]1\)tUQ]fF$gWV9on27'#%,:)X*[Jq1`S%3noEg=f=gG^AWR)O.$3$VefcG__J2U5Pcc?qd;ZL`tFfJmr*R5k#%1Z'T_qK<fjjAU.Qmc^rrk2`hE"1r-Yn]$tA%eEbUYhm_?",G1]O0n!]JETW)A3,qsoef/6_heqJ5I#?4g%fGE7U@[(;F2V$!CI>gL.aRmo_BUt7>peTZ:\?]>\bLC/pt@HMRj0/Q%fiA0FX4',4.e1bAZ-"^T>n0MZj8&8@i4eHR\3G!rcc*W?Z>[\]Z@.p2r5HBUm+]LnSX"UrEo=q`I/?t,NIl4tZ#1BDG-Pr+\m9os%MflX6[u5D+DUqOnCt(L`EVu:D3SD@NPni)\=s^g0d1K"3q-R/Hfu.6^kb:Jn[tZW6>P:NOOmL4&HN>EU5(=r/[T04)UR3f(rb<JJ%P+jMfnB'`r^?m37+H6t[kZj)<3g5:>GGuWH557]Kl!CS#71+kr:+VM!q#(*5hsARXb:tl@@qrG#fN0(l_b]2V20.qBVdjIP7O.)F%7L_!-5b@ru27O803%uZH#(J?RpjW9KK7=!]Jb#GJO7FT2bL$RJS4Y4&%DTRN\QSK9DZN&]oC;#7]"g$WrK"ZHnEK2YAbkJ)?3WVd%I88R@GM(;rjZseiRN=.fJ&0?WO_KWtBfnVl+M5EIPclp]YL"0_KH/Wk,ULD)'nmCUKH+*FP7lk9BgN<RSWj]`.r#J4/IY+5+Q(/.%T+=(??T<0=q@ToP:7h+8+%Q,9>j;&8IsbpEcXn-EjXnEoqX^,X59G(\iFVu`ZMo5SJ%i!K?e1k$[Hk-t4HIM.AGu?$IO=0^rd91\%cR@S%/'nbWE)c%H=`Zd_)U`>$>:s^:QSmsLRe%WGa=iEZfUm3IKVA8F!Bdi7i!Gs[k@_K_kq5)@l!A;N;fQshK"A47NS<T?\g30U%?Tm]Hpm"%8+'HZCo2DdsEgYm#>O?Od-Lo%QnOs>)S(B]aXDe#>i_'UG;M%hR8oU+0gnb/Jh+M_-K_f=gL\jgg.i'qP5bFgME<&Cn%;ul\Q]$CS0cn%Nj!KQFL=H4@C>%bSakWW2X]s:;.jDT?$'b5UM;6"$qp7EssKP[)*#5gH\5UYgdA_!CUN=u3l[$G(3G:"K1.>=2K%5!oL8/M$aPl@::B41\1ng$oH?c*:4ps-nP;pB+AI4+9IHHQW^q#"?L(?0Y,K;KI7GNRqB0`S=dW3L=4#V3l<Qk$3d(QX\7:Que_8%S6>)G/EY/+4/f#t.H[.F/pf&0r'<(#/'R$tgR!"KQ)X%"s#T&ce9=*Fj.!__r./DY;SW!-mhDD\)%%a?4GS;N0#r%'fVZs;nJkp#%7uuIKGk+&jF$@/*ku#/k-L!n@BGVK]("r/%EM8^4Y"m5q?;A!k$Q&Z5XR4Nnkcl2l>Wh63A?0WkZIR@OH9'O@"69110moHhXeOKL%F[1-'T9o!Vec.SRIJS['(W\eGluI']Ba"e*rNa3)c[g7NIuP4$rH&X8:WNR#.OF/j'A&LJ2em04a&<&h%$'ToAZjA($Bu*us&1qp%a!^U#-OZh-3T']Al'E[`gEgjL$e*7`e":aVLs9qGet6=EGKQgs5TR0YCXN(/BsQ`9fege](r%8$4GFLE&`ZpqN6Ce4jk/llq;Y.)%"l`GZ37#P+]ZVDRmo'.H:WTC1E<[<O\QOJVq;YBP3$l1c.=YUF+(nUQJ4Z7r*jLppP/<c4$J4=ZN^,?Y/1l@8\Caq2BBGRFRBFiM%gG/?RPfU#)SBIVFQqd;E6uA*b;B5?nV8aPOREo'?:FC,*<Wu[j*%27hCC.4fNFn2qqgG<ekLYr0mp-u17jVPOIN1YB[*&cVgZ:-V%bP=f/F8h>MS(coTOo4H1NPE8\?B/C(*5AiuY[!2qqTG*D&R_1,ktBpun0Q:*qZC=0.mI*Fjb5/`TRq4VBhJE$P#Rokm3r-:i=&A=%QZHQ[k2j3"Ef;e'"b5ItZqD9[DgqZPG+fpBdCJU1P>BS?mm3.5a3!d8>C,eiJR]*@9,R$i=MbV[#&WP2J,uYGIYE:<;YatO]CIV%%K@_1]rkBkG^#X^1*:Uo5q]uV4C)iQkn<*s(AlNin!`(c`PT=^LZG<fl!l+%j[dTUhb!%-3Op7Li)CTq6059>j%D8KfQSe2p#(A[K%Edt\Xn-Fos,n76@h^&jsL6@`r"e.'tm;o(NQ[$UScT2U7QJ[IZ*Go.YV)XGCpScOCcK)$SkC(4ejaba,KNq:)pd<s:q'U!+$&.9]%VZ!po69`$8c%*$!r+*7Nc&eK)5UkQ!-Y.uJIef$QZ1>ab7Xc5&f)#"49HWkOn8hI,UPLrISOu164?o,-Sjh*m3?@>5CT#3ecR"2<%@UmHR_a3>?dH$kgpC2T^Nd)qCR=-C;.RWkSF0j`joBXZ,F!gEuWH!*?^/-IIJQhMd\g310?gWqF"FVeK56&T-fobWcl]E4Q38.Cp%?*`BQT]O7U%A/R=3qaN8htL@mgaQGDaku`(HGi_BUA^uc0-U3D,DlLdN[h/(H@.bZaQn<:Bh&+Je4S*/_\S88'`LV#"XHLJ:ma[1%k84$;NZ$uO^ca_2g?eS<>L&;+1ATg\*E+&QEnU!3WVi@oj"GuAR08*`pgj(_4DF_(bj?^&3j\&7&j6-!i2Jan&a()rIEr(LDn4'f%"9.ND@__hN*bS_XQgGKBnl9>t'q-A>O9<Pj8-s:-1a*)^:.P\2I76=MRud_(V1dc65R>KZ_I,bPnZ@XhntX5@NDJDdI`m`$$n[]8%qG=0Si^-GO3-jdA<'DHA(OBhL>[6J/]$Lt!D5ZekO7bIK&,L]:kkUIC0-?HAiQ15TRum60P(,ENo+R&NH32MRr5u\-_e%,3YMA5m%h_cn0mqAUpr3kK!3LY"QgM'%W:pQ.23!]>@/$[cWgTD<9jH>J)j9t%]q&/sX;tk$@d$6i.jm&@W6&+KY1)03l%ECC9UV?E+.%g>c%i"milGonJEPo].]qO&PYDf_kuVj+8HRASEq^Dd#=p>B2:j7o3M!C&2\VnWX]FKBfR7KT_k^o=>^`d-P#?nLLLVWZGt%[[4?q/Zt[%V,J`<29Ku=WUl.c^SM[[lVUoEk"_V-E[pZ3ODXf7Hk&#0LJi;X*RW_'Y,JnZkN`TZRuTRqo.qlR:=sA(-)UUt&@_:#gqI+MnGa6`%(Am*N.OZBj#7f6CEm4:=J*l6;V#PdB:-SHU`2OPI4qaEX6c:QOf87H$QcdG8"JOXr;2.)^WAt]ZHq\-*gH[tWNisJ@7m:@XNFm13%PoOuaT<a'Xh!e))L)lT]#]tl`<P0?IqXdnd5]JT2:V>\N1,B)`9Bah\$:D2D[OGdHS+6YmOW9R5MGohN/f<XJB1h]&S7EJJ07(T?%b8SPZG49_0)/OS72_&\(@)1u-L@U[&g+b?:oNag?MAqm%/gZNdkl:-:LU^RQY7B;75)F;H'qW+a/+!'dqf@^F!$*maa6ZpmG/0Hb%DLaE+rN+GB#t)sA@*4W6Zah&^T+?n,k&br4Qih62Z@QFoKF_=t4bUu\n$no0LYE7[JU^rhjW1=&m`)j8"b,OJ`>c>['+h8s.Nb9;%AJa.9X.Y2k?%j;9:'Zrlpo)o4nTp_DJaq_0LX5:?,Oo30P5lDPbN3a?i(.Zj0B)E9@=%&<GIbCn0H'n.]Uf5cFh.j^'9:ZFq!3Xo%of:ek_?hhKgk.]H+Goou$,BaR:5/l+E4Q#-YeB3ZC`b9pN[SkF58M/FUKD+hmOl6&B8@&u9VpAa27&]i7.sasA;(sZ:P6Rt!o/H*%(!+\iO!#E(L)A%]*U*P`G"BaDmm%DN&i],i=UdIno2q\QF]`%%]4gJ,ZPa:=7nahU-4N\7;P>p<i68kE5`;MG9QIucb$kc:mN033%]jr6nX&M%g;m@>AZN#s4mi`t%Nk84nO@+[8b$Pr"3:D?RT:f6o\2gCZc;Vh,e@=!C5AUR%r4/m[TR:rTq*LN\bf`j?.I>1VW6Q*;%iLl/oj:NCT\8X]oicI1c3-6*GQe)[0\.-></f[(G@SWNt4sIeWk`/#P2ZM"/3#lSn&Kehp''-";qo?D&3=l-W_Z1NiK[8u"4E-r7%Q]#f+7XGFMKhbC8b6]9LMjVhA]2:PDMm6Vg4tZO>>#>,(!o@M\H8#ISP7/`C'V_P]"uLR05**d-Nt:t.)E\kH#A47Y?#Iu)Lk`qW%kg'VVg+i)57,5<LX]W?A.!IT&AS@eO<7/$:iu/63*eY1_=:VM_.4uDJ4].Y%(Bf7#?7ufM$t-u7<k&_Acis.UQkr&gKQ)uRR1A1N%QSK=s'2!WV(66E9A^]N_]L]L;!73;)WJ<_gji2ZR^).c@4rCr$_^,QoQgb'd!/1[p<uUX.L),_u.HNaP_HgKbm6p":?6c9H%)Bh)%guZB-E4fMm!2M"aOXD=SW6XXh"+pkuYBMmB%!OcRBTs"Dks?2(gkhoTk*lVI50o0$5,;k5JD_1Ck^idT0$ep\BpS!5*K(LkS,`S!%3"G'X?MJo8%nR/k`10RZM#\&UTY+ol#Y0UT+c:n,.uPPeVS!H8#\?3\REsq9g+r^HgaRsXrV%Hh&,D<6#5Q0I%KP_p&9/M:872Fl%GJP$(2.FCd58EC,#dOSR"<mk\j'5GDK\(pniEd>+K5N>MKbFn.a;kn\\V6Q1UI.(g.9PI/Wmg9#6K`NE\O977"G&j$J.k['2GVj4%S9"nk$"_Jo"funXf'RU)d:Bk::*5$TKE0R*Z5\V1'Bu5!>&hJj-f>6("'obplWM#G30<.1^`Zp%-n`_:&>G%Dgdi19(f4q2?\:Wh%6JNcK2o-,JY[AGGUiK33aKJ.7fBF"J&<LFM-#`O0@3W4sFEkH&i4A)jSHLRNd,DrLif&,$3)rk#7YpI@$&fh\!mWY.k5[V4Uu=M0%bD2JL"4HL)n2tc[o$"#Tj*!]bYmJc;#Da$WdCA5PG+cC]J\$-F!I@2`#VP6QjV9.X';/hF&-IXobrZ+hNcYn?\7RX34u5CM35Q%[%7GGb0%M4FWZG#0<i/uB?gF!n.hjdO#N0E89>NQ"g/&rD8EUNR].0^N;>E_M^)u^U1pdipAa2CKu?_]O&5VW46;Hd>=\HDVCX9l<k%*Dp;i5mjDSgTo.TK>7ZiP*X;-mq!enoARuH1h\p'8cO,KIf]P/>-YNDYO&H0)0BB&on2?#JFPnh(po"kq&Skb7H;?Xpm#3!b+1FR%L0mEjAM=?CYt><]L^f,",].Do=rK[6ZYRW[qA?XsU^hgo*fXXcnh3`;+&]jl[7&c426Sjl*[4,D&'j5r.D#P7CfQ6b^K?@:H(?B;%YbSD0AH,C7rB(BBFQi=Hl&[EUs'.4Wkj>BK)9R0M;SMnsKY?mlWr^PnSTD9ZD@BIt.hp+l-M&V@7GmAi34ZAM?Yb($&2^%l?\g[4%dCeSmP%5lo#AO#\LR_^Y9aP]Y@ij5F>5j^s8\U^\q<HB\1>8f06@]-f'1s8#8,JJ[;RP3@"Pc/GF5i4](gQD(EdnV4dT6rf6j[B?%KKjrI%c8@g6dqUV)rsPVUbOWi%[Y'p_]R/"PU%W`=d&)#d21/o%V:!<B<d[>c/Q6R%RrGuKD^Ut$HbQQ:+(CXdQG^7!X2t0.$%Y6%0o0.dgUnmZ#EM%N!9pYLVghXGe$V3[%AZ2LKUbjYkWG:hMmk2qNJ!F^gS"r,mB5\15@K7'a<QiiY2(9>HDZG"g%`@EAg;=_5D8HI%-a[_F"jsD,3Ybb.L#`Dp>L9j`mkKQk\krDGb=Qk.c$u/@i46[Ca%.+fW0Lcl%!J/'paPCO`c6lEW_8YhpU,n]72OOp[b`XUYUh^t%e3NZ>]:'q%2Bb/h0_7S`g[1O$B3X-54DB"dI9q:s_q:,FKEHGcBpn+^\^KjdVautmTMC8tnE^.5=tbVVYiTo,0"9H=CTOJ6A?a^H%G4dRAbbZ'kkp`t2=Fb!nU[d?MJ(g2)QJK5,fASmpdN6nG2JhhW`\hGp-dZVu'3q(3RJZ%g7<YWn\Bc.2>_0c*ep@')U=L9hk2*pC%e9Wj']6K<=/Z3OE9V\JJl,*h*f=A+loBL:b*<./WWmnaSN+SKQG`)Aa.;RF_Jhl#U"gUiY$[NSJiuC.;EYOo^B7N.(ZWrjSUj.f/%a+8MA%.IZZV&),T0Xs+f%g$%D4:"k@e:iRO)7E6p'l#L8pk=9+[@q7T,XunKBoSZST"0'g2$0!>:S9VI+bC@pnX;R:;!+U9Q9Gb%%[&Uq#L^1/hh(:f,;tb_p"+>`1"9+U[a-9I%_QhdWOL-:R!j)T#MO]NW!I*3N)^Yk+L='gPatRnACk*Z2IY+KPIHG:O=f%Jo.=f,9%(75n?5j$JcD3=(W/KgJ@Z3b5<l/N[5Sj9BHHEiG74PI$Kk(KEFV8T6maP/-MF[oT-ISe68=HBaKSP4RRnOg/[6<X.NE>*4uoGfq,%]s`aFk#PupNoH)Ebu2P"1Db\b!bR6T5?mAUf&AhfY=$O%4MFOJ?(!G^-VY<;,6;D$_N;Ni,W?*6%!)hLn)fB%,s$Ds]@"dVcH^I=%AJ0mi="'rc<^b`;pOFpTbh[t_-/Goe7s)`%_WL[0-1YMi/5fc"3`9!,&6)D;gL8[46C)_u)HWbgl!uC]5_+rQ'pK?ZQQ?=Q:QaWA%M]`K)5m]G@KX^;FRL0]>$1I>8/TlMPE!::;T9=Up=_9&Q@!\`pgfPAOK"ucV1aEG5fQEilb0jAu(oN;pC"s^0K<C-_9CTk05Ocmj%pJ7PH?k/g,efE&)(3UO@!ph`p"oefYH69qoWM4$>r)\2`Lca005`^G8#<$rI/F5\YR6*cZY*]'VQe"U1B6P$lUlC$l:fu6ja#$!\%iZSVCpA4\B(a+Mj0I$N)6R$4][7r)o_Z<M&Jld+8[KI_!)^u1+#`cU.:EGI3e9`nO5]G`$+UHGATg?K\@*Kj4kMO]IA]J*A^FIcB%a"sX^Fh?^C?./^LZmhI(%s1+3Z$W?lF^&hGcfAR:k(DZukeA8]*j7r&FGTbTVJlZGa2J8=2$:.uIs4$a8X?F"-k&A80E>6dr)1^g%UILusZo:CB&<kh$*L;/n`'Y)_m(*n'6OD304m;D.Tp=2&NmpNA@&7!G;O,6Fp_q/#:hFs\J\cLfX)3jo<X,pIZ8(K$[+b&<eZMHF%p?Ddt;T7erD%;"R4Bu'T)7)sDY,'+ZDp2PAPrI6,nG>?C**[PZ:-^5J:dt'_khP0s54iia6oqQK%kc?2;%-9[*jlT,Y/?`j_I+D:%7e/ZLIqIn]TtG^ocGLPI"s!>J*SB6-\i,l?gLa)334?..3_X;FDJn$+)DR`k=D9H`!j$qBHWhV4';k@o-Is:9@J,-^%9W&-nM$O2%+G'&9KWL0A.IY6uE\s-g8VlHad;UiK;0RY^oLD8Q)s2f0H/=KN2k%LdD1NH>l2Xe4r_<Q/@ro/hnHQDe;E^uUP%?U5K+N5Vo]U_@%J1M7^LRT66SO96n0RTB,!HsKF";2B>mIb8s4-A?b!FBN%GUt3B2Wg;/d@GpO,l?_8O(&jnTj]M9gGoO=k%Kt6*aM/#-6P+;a$',-%3)5(qd-+Li\lG.fMeWC/V+#;RfXf<+2B]D^Jk=7J+crj@8=OU)Nh;0fDHNHlA3c1B%=mG:MZCan[oI:f-Ii>"#t/B2jccCl/<uid%arah_,?]XUiRju-lkn#13U)KO%:uLYU6?RXfqjncS0cZuScSBZDL-j7Z&,o,[P#%)/f+sg^.et[E[#;'Yh*mrBeN_7^B+.K@UgeA%l#'*Y"+F:*q$F)UF"*EAl`WV.5A%ji'goBM`;CdA3p^bSi!!^Fq1qHR2^_2fb0rNdA/U+gdD/A5ZPUqu%n0;.V&FMbnf_,?q#W&6%h.fjg>^?OsPJj&;?&i2bV0a]I^?sbc1m</=0=FkRQ?^AKo,1)[B7FEJ!C&uu_KsC5'jqZ]:!?N/jE)$r@_]QNGT-p1TfH3nKC''Z%NQ/8hB3R=tjE@BfinPTc6*(0o96&HFcc"QT*!Yu0YfBG3(pGgYpUO!4NIf01+X`EQDh#C8^33&%=NTR`0([ViGe-*dL!=an%=!Lm%n5(XBNkM@8dVH)(?u?[e0b2DAXK_)10T4LZi[Cd:DJS"iG#T]q_d$>Of[^Nb09@^+iH!=mXXPV&239.59@*n`C,`$djKck@2=BC>%D&VP6#OhcG2;Y*U@Yci!HL,l`3WtrBe+R%b%D]i58A)!>s&(1'0[;8jgoR!8'dKqUTU/,fO-EQ>@p^t%R#X873SU7ZbLMb]RNk97%>A!S*gaTY_>N]n#oou@>`f-5<k0'6L_fR>b^g^F]Q6)dl0$<92dt+lQgDH7h'm"n"r/dM#>]`*`(]P[un5LQOgcl?gEF<B<Smp+3%6[N%S#\$YmPS*6+f3TbU3(3VU$bq\O3OYI^.>rl,P!V^)r';&`bX,)BC;.d,7iA0r_5Kj:RdKJb[qr?9"?de]]Du%j>uj&+Z"M*E%-%,M]\ZuXS=BSm5[@*-:\Xq#?>:M!uZf2ZmnC`X@(;s6H=b&BPP5%ROXRp`CC%5$RC<L4?NM=mH*n]4WoUHfHC-8!Y\e>dJH2,a/%?.(m)K?]KA5i,Xa:0ks[Mf@q.^u$67E[d9mTT@QtNP?\&R3\Kr8*]>Xd<4h04R%b9DVFWVP)c8<Mn<44%-&">M7s/*M?I7%VF]&h%i?Na,@97+eJV&cK2p)H3Ice'M$+d'MS.:67$(FZHh`t3*h?/.s6qZe>4J[\LgN1U3@'rBmCk2i_0+?'568M=^>Z]2&)l%=$[##ii%CMsB"jmi"+NSDLOBJ"+;lp`IAkC8KpLT0HmT=9g($&`tq18MNFKbcBnp"Cli'><S+-cSQA4+AnA&E3f<"2;X4='_PQ(Z$CQCOK-7%",>%??huE,\C/&<ZJDT3B(`lD7B9J6=<,4!fpsV"^,L\TPO,et%Io"M'aR:::7XCg@sKq%iqdsN:/+IA7SY`FF?8Io?I@nGY:pMB%j-ZD0E:h\]T74n)@uU+bDro2=dqGGTH\^W?7KU,O;kYK=NTWiSgsM2,Tjkh*)*N[eO2oQ?S5HGQ`Q^b7^4=j-jS/peRn$8"RSKsM%VrMq5bV*92)6=T'`d#WNOb3I^2A4=?29hr9kN9UnA02+PfFqn)beZdCdI1aaSe9WE=:5BA'.+0YP"26<gl<PM_QfesYg,YCd4Jc$%Z_j+oP<iJHAU`P[('6[E5u:AkKbeI)ZS$?:%]=obX'd`O(RrGsa]B(Aj5,n%U3hZ`_r7E1Ogsh7AoO34@%dC?o7CRp0jk!b'Q_U)%J4?g!@K=`t!T8]/"ZE)[kakun9=,82',5r`+s)QL::-=31FIMBr-OSPoiElB?,-&t[<M:W.39ueH<'f)o)A"E/$q%_IB=eNo7?*h%,[7dh&Tcbs9<#j6ZPBCq#^`4'de6W0Sd>W1%)7*NPqK\ekH2IZo$L@OPYWTah7Ugu3MT$r#I?'WCq&Qm#5Kka'ILJ',Z#0(d99;4%DN_HJ=U?24'62'lk+J_>F%UF<ThR^m[=-)2n2c,sSg$oT!l<Jr.KQ?_A22,,hokk$X`@H'Z1Ee`-0KTi:D&on/Q+do$L)4SLEhW^%RO<[<PbFGQ7Bp7f_-t!&$&SgfAHsrlpo'EC2_i;W6tM`B(Mp(IU]L_0B;($Y-G*)@,=&4t3^B.R)".uu]I2(*=/)8k7rs(gar.(]%!aD3j=tOUK[OL_UWI.sENRitm1U&QA?QrO\+)W#LC+3k`^A%8MdNfj#,OHsu8rc_C)9Y\rQ#JrIbi/2p<M<^H"fU_Y;TXUH'-jTT%"u8.r4O^MWU^?qa`"[P3\t^)uDQqOBi9gr&aI<tG-:nSlj%/F9T#YN@2pd1pcajs%/dt-`Bh\0k)$5b_*Jd`Mfso5L9fPD"J$(e1%OacL()YhoPgGNY6le2i`g.iHde/fLr)e0=$Mmd^1!6apnS&9i_Tj^9cJna!_Z0`&:'.N#Ln0J]WNFV?idL^_C/j7J5;]s0d_:&Y,%UT,9Z]s$Q`QL=j4h9i`Bplp&_<aTq<fi)8M2%n-OD4o!d"'C,+/quSa>LD`Ck#sr;NI`)P2b"C^j4B-o-.PfgIIOf^++#KN^&`/e%e>#d0l7**O3f^,uKa><uA%=E;_PjpC)RgRCf8G"7AIjK<fb3+p5@`%S`_f7uPGf6:\+"*&lodiML\G7%Y\;CPo!kfYMPKhu8\uf?%e/80Y.("ok`F,I1,odL)`4$'tZ5@t6d3F11^sSCoO;?nHd6JCL7&EL/*0d@k.G!Fj!!9UIJj?EDBKkL"V!-tC??M!6d2V`b^upN4%lQn&YF#6"AMrT9EG/8b[io^A9E,FmUm&s16QDshu7'',#%#`aC12@18Ob*;7b)R%-CAAMD>@:3E)+.pb/`FTG+q>Jr/KfpA=+?*:%!A+7'_:U1PY]4);eP]AT1(-5FP.\o<O@UnMS2iYt9:B;LdPdu*C$L;$+d$8MA0RW?=$^)pN[DKU/B[T';UfrjF[2+VZaDQhiMG%u%k)^8(/ZKFcN3KrK*hnaj#;b1+@#nsnIX+417pJHDB/6p?!$]i,Wd1*OMGph-+jjJf0ieQ5DChJ3Oo:@M1jJfY@5[[57;In\3#0h>%2%]$H*)_RNMiN@llk`R'`I!),A[2=i#3k^(]tO(G6nX=)UoC?fj7H!f+j$Es+36#(0gZC;.-%ETfVmo/k$@B>+R!pV5n((OnW=#(%Tnc$r1VKq;5*-mCMZ.$"BE>Zp6ZC"1A"#qUDho^N9]9-J7D<OHM^S!j84D>HHTdKGN&B#\I<E3nP^F[bgIsI;[!L5YS6=lY8bPDU%#ntda%u5/qRNIQtq[(E0/0J-ZPZC\]Q;KLN.EF^(hP926nS,T[O0usNf,W?ER^:WZV,D2[>`"<"ikGbg(#$(2q4E>b$LM$TN(BEa%$[Ce_6&sDgOAt:qW?_t:^ae;a?oY4)49H#rGX;t=78b+cef:K*aepF5&AaY>6nB'H51p^>Q#2"_,r`#ZTKJhB1R3aCpaoj\e)eUe%Q:ns47B2mgp#H$N;-'FDHugq"Z+>*<M[F$.(/d=BqGuXa-m6"EG;bn.hH^0T0u#BpVU3WNi$DEWm.Xt6^>2N&];']uo/#?i%"p)V%;UGWTd-f%m2@r*B+mW#,QDjr4b)N2`1=1-%+o78C4COZ9qf<7J@1=cDA_CC[k%Q$eZT\HNWQAa['Dp"jpkDZ41"l5C?Ei4HbW&o2%VD<OZq7@jUK6B,-%+d\VWd,e>r4P-S;%HWag%WDJ^BA)KRdRlj)%1GE86t<j'uY-(Igd3l%P!dDl$D?AKs5nA)jc+.aL@TiVBR!=%W4VuHju%`'^oddC0\HK;(tS;tZa76ZoH";3,aO:tVD/LgeG2P=qeQ@XoC4-l$fnFJ#;t,FNK2;io9tNQEZ'!"E8+t7[/C*Q'!jp:%%JSc"XO&RgEkT3HGSk2TK-up+,^-<@$>`p12Ct:_``MT=<p/Be2KXUOb6Q,WM&Dp16)ea?@LO!hj0\)K%npa)2M#-CU<1^M?&*%0%pW!#,WL$phT8MK;JUpVS)FQT0&5h9-3oB%.-sO+r.o0"JfnkT61E"r3Qmb.:3Rckc?o#,K@mqFME9sh.qNquOPG>h>JH5(3&%**J%JD249@SDGpJoDs\X@%Z["0&$J@s!+f(^G@^'ONf8Y%IM(c_aj/nG<Jk(&FrOqfR[_:SW@WosQ5r1"?ML:]kI[^JFK<._!LF:laS@%lsi)dW9bf.3O3Lkf.LqpJ?!5,KUuFXGVZHP3&4;+BJ!Pj->\sM2<)@gdS#Y/PWQ.7WlnB0U7UQ9A(&40Vbs(W0eHn&=oAkBkG</-%<=$D,PN-g,_!Xa&W`dL^$`c,0f0hgK#3)i(Qj\Q\6n+8cQuBgS)Es&_B':i:rZGbURCGQMXTg*_agN5UK0KmR6L2DN#O#^1VL)YZ%A<90(o[\+cePo2:X/&q\VuY#jmHoPpCPQ<sHtlbYaoHZXGDu(IRSe#+&!)A%NTcCYTHV0TIFID^.FF&VrR>?eW?:l7DGnLOZ2gUH%]XrDb0Sf3Xh*cJJZRdg5q@!Sd-?Ms)A&Dd&[IQjQYRd\!f/X+/neB;T=p;:=q\"18i;m>HS=66RAL#bt>A4?%A:H8$cgP_8-/S"i%a$p`>W_KmU5SqV)\Yj!$>3AZAZ`:%/XF3`1pfube[9Hb#9dttKl76>@LAiG86Yp47Q]9\pKRFDGo]e.jaV/B13!3_e5C8@)MacHi%kNlrB3h(@I*@$b$.7ZOI)e`t461A\'I>1.M09:[-'=P8+rR?^bdrf]=*[QDiINJleXW-d>StZWii^>M)WC>[?OnW[&FqD;%9Ms,7%+<L&3he>m8l(k&].(^XC%eoHUju*h_d;d1u%fCc0e_qgk&e5N!)-GO=*ak_7:Ff=`S_Yn@KLQEj5kQ?)HZ^.:eZsipCE6VoMf9"K%;74F:0G4diDPD9#5+$0Ph8HHC%H%MN4S4BUKfOadb\0oEk]7jDZ*mPeEm_-$$ZCm+eli8+9jk3.(-<sNX9V:i4=6Xb7,bjGCDPmF%Eh\(YcI_%X[nrZ_6V"KtFu/1\*hpM!bpK/4%F2d3l_G8BM);@<@7=I/i@7V`p[B^W(`Hh\[PK+nX;1p3)*;`?BN9;Q'0TWUn[c7r%'<T1UW0d'_MnBVJI:X-s?uerP<'9;!_,0M'`-"p08\RA,U_DI=9G;j!dlg5c%%Upa0F":S3&b"SfDnoqF:u,nr=7K.N"sG+@iD>m%9IitZ!&X$38dqscG;hZ=m^)t'bIc@o0'%+"?V9_K7'AMW/\qWIM:OOV/qG8:k@X$d+B=LKJ@"p80_+FdQIsL$GN3T&^m'd.+Oj*9%U)m[<^T*31@Mf6N#)`HhE`"WO3X&G+=rA+ia`aj&g4fbfEZ'6Ni(L</A>^=8Y3QqE>96U<)$D_k]58U@:oB133!\tA:=[7*?u\D)%9=mKCl`OdJIGHEL%/I8+Ou_pW<2nNrk%0n;)aPV<MBt@F!u7_$f3U/,]M5t>AQ90UND1OKi2qiP(</T4(mCVE0C!6Hp&X@bLl,Y1%WRLH-7j'd)?HlB)ffJ1][+_,D;@*Pg@?(m6P>E_X6+B8m7+bjeY9iZN)3_RI!8Gq_enWp9A<N(Y'Hbi^@+K%\_JBg?9'!+9C'g?c%1/_;9>3]H+(*KJMYFp)O!lY%#[Lm?*W^FQLf+fu&:W(ZiHfIc-XjPr:!"kfEmf6?jOB:k0.B47[-0tf??<=VF>n*eW%LWL$Zo15'%ehG#.FcP3XC-(gV,c;D4p_pBWSU-&j(odpq*"&p4fc-n,'BN:SSPU_%_/^Y)"XtK^9.];Ji+6DW/]krfhTCsK[X0MMEX"l<l@(Y>%W+F(MPTc19R$*%RX.!PD9i2T2U[ah_iMm77J<#WLZZYZ3_<!N08FY>E!V=b)UuIpW/iC>QWA'6F;3/\jV+?NZg[3Mg2_XQ4lLi+N%!Wi8-;hk4EWfb@-/N/!0=b6\,l%t-+nj4bT@Vk`Q/>@)1Ga$2J@]lGUE*^,H`j$2E%i6++l1M+gDs$FaDjhK\*<VQF3=_pS0jsg]%gYLEi`\@-<l1J<%1Jj=cJ=/uO,^AX&!Fc^A034L-7Q:eh[tt8@9Jq>?@+u.UX?mODLj.X@;J8p#,5c?$,s$$dQnZq]Nk]7N4p%k9%/J@fgI9N#8KhZksfaL]+nC1c%*)+e2,/%Bf`&ktkBKZ80Yt9m.js]Q>TkL`)!;@7G-Mjn.+cp%S,,s^]9hP9FUm:ELYDJ[s@Vun&%4ljP'7P`ZCdfK+<h5hYEA5BuSh.pK;K`3S!ctP^\J]N^40Nq=nZTT!Q?pWe<YGFq4F:Lb,bGR-6$W):X5f1/,*E<-O&^I1f/Q7*q%Z:%s3"9*UUN`I"Jn#6D7RFah=Z^Q,tZ/W1`K==mB<nP8>KEna*FEJ2lmGe%QEqgN7[g"!eaHAi`?LHNuo$o=m<E'$q<%/9XeR$-C%SGl[sc/Sg!8qN"\j1!"Go:%>?f%aJ%^I8qSjrolXL**kA-LufAD=i^A\bIo<n^Jmk0b[op7Y?Q<K)0"jWWqEM9ULDY<`V9Y[ndq#%2.PKV.;rt<%5fsR+2+n5DZQ[<o9U;lO0[0)5q6P@3%t)<.a^_>mB%MbO[-W+!(!sHXh4KbE=8Mb@S3iNVR<Bsg0;]Hh/iFh<Uutt%&G&[*qg^=Oj!nX_M!CMU=hu$,1>tAu;ZZkD;S]oDUplLiem*fmBqh.Re5QWJPHN^dAH:lMHG:F@E$H\J_?gcJgGL$pEa=fn7>Q17%JcaLI#@bl:]Anb\OcE..X+ql]UR/$D(a7t0nQ6o&C,p4s6"Ru\/Sia?I!U"S^c1H9?0kiHrbSljdG.n+iNH0&m!Z2UG<6n_+!:-r%aeIGn@dDYcd)sHenpYFlr*O]R9lG/m>QUJ7-Jdsr^,8YJP68KG/SiP&iA&M0;tP5Mb:,[T_T'$dLN&Sg3K\(,3-k^gkh*5FGi#f$%p8P.cmB=e5YOeX_o53PHNCe<9mMeKHl:V>nD-uM>AULqC43HsFn\6i8b&Y\2Tf/Qg8kF&f;A`6QfpaQcSeBu7qn2L_J/Tq`'#'4'%,f`OA1r4BtPU$cX0=PE9:S>$ClT>4TriQ>"`D2[3+;mdpXJEEaI"G1Qi;2qaB(QESM\7.:F<-#(.g6]?kYOki^"c:2)=eS+(lt1\%(qLq5#/\8rD1^_X@@_r:O-a6BCh(8T.2X)[>GA$@j`EV<?VIcm(I"c2OIZAnLSH6oGM:AgT-AQS8[[O9?&,=X4IV;%mpk5+FR9@)%I7$8T*l[ies#;C.`W9sTh7`#XL^19Ric:m!Y]t)##?6Aj.Zi[Caj'?oIEQ)RWW\\HnY#7A@po$#Y/lXVc@BCpe?XRqStDOXj)#gi%#LMhT$pUa*?bV%F4#^m"QM\XCUXrsQ@*CmtJ$Rj+C/Z*iiXhl"5gl^]ZOjT'hgYd[%_<.A)7=D"bMio&fl7715!#;AW:Kip,'hlj%c3_8d%+#F<dPj-*gYU91+[T?,7U!1DcJNn-DF,-<@,Ln.O.D2P34;Ng"nEJKXW=OO?XP1sZ]s,@<'m#-:#paV"8MJ3`)Z)NNgWuD%btN415dh'_QgW8uhWBuLG1(i_ZHBCooff<h>Gp][QY[HJA9#h^pr:5&o<d'XQ&N&W%Slp[gZ[A73%1Z9-#M8M$L=s#PPS3\3G`ni%$O8E-m-r8p9oc%DNSJ_TkC$uM')]0(Gaou"F/1TXKJ+4GS(52,YkYLTS;#4opXVCl3sBVrNi]e,V/5PlS$SmAC4kcL4XOl47R01:%S=8N_j21m/#[e5XC6G>Op:FBsc`23.\%\RsDdT'DiJb'PT`QN2?HfW2:-"CX!9hiU9t.ks\h>=lBef=,@B&2,nV`P=+=X/oEH37p%bXth2?FcAO#TcNS!CkJ&`Y[n#N(:BnH,:juJ=":^M'P[L&DQsUQV+)H:4;5/XJNK=LRe`u.H<dpH72h]'f?/-i'sR&R[?_1b#BSa%;FL$%WT)BFDs;^38EnQVam\-%<@[$E6DZI%eLHh-VcIKEmR"5OHhfmV7HK>E[oj\U>]K7G%4(Lm#$bh[_&p'D*K*a.1`kHQ5'KL8%cgO>BU"?'3ak'9G#Ccs)c^<0#\;!4@@cQ00`t*ZCd*JZbei<aI"uV&SN-`Zc4`Fs@_4NT=2QaGW/`>=c)lY?%mI8+%Xt2N9G;;qb%2*:_m"q#-&<ZYLJEV)(&VmpsGZOVIgPHWqh"2#bm+.kXW(pl<q'@GeA,9u!=jmuHapDj$(4:m]BZ<bAtWF00R[5eWH->1P?/OsUF%]Jc%6R2g/`mQ&t7nit!X-a\a.eG4\uL7%4)BG'j\;2o>K87\8[8)ig]O1dI@b4"6!aV>U8L`G4uC=`7e7oEoXfa":VGs3;W/c:O(%(f"DN2k)qYn3O]9H$[F1enEQpcfQ"S$$q6Y3C'H*rrR'Kl$6L@+3mW\"eK6TbL(Wt[)?j_f3[XhN=A\(mN3q+9(uL*9A26U3$*^S%s8HJ&KSQ7sNkI6F@o($YD!:=k,4G8J9Hm)%W$NR!&?^]aY&="U*O5QW.[\AE#U8/Wn+pVnk%(`I_lYR5F0^n=+e2W_cL9Za@4n`=%LBYsZj3TdKO&dipELcH@"bkM`H4&Eb*]6aaTpLY1eH^H8B6JPiO*H(i1rV_Gc]jT0bVG1?mkm6^PAfTNeT^nH.a#(l4u('ZD6LT[%kBhsKTt\bPbQTn.SZ2nV=OPSi7rcf]ht:bT]iLU`dBc"s'<u"$]KW1O>lI2Jr*-!Pi`;>ahAN<Bh9;?\Q"[aZb]7]gl8g<.EN3Ym%AMcQN<Q:N?GEp;=1EdW+o*S[F1tM.)Iq_dber0JRRT@EJiJi7=Ht7r:XjX2u\nAcM@nGISXrQT49'ZMXWsb3J5kal"/?L[41QO"q%ZHB1@q1)1N^/`3QQGuQbAUR1bWGHFP;.]4F+Vcmbhl:YP6`HRoiC`4%ed7UG(X/iaMrmIi_-<GP)_!gJ^6C.Co%-kpW^*HaAk3Zb%2*IsY3*0!`2aVpmA;m!X0u#02MEbiZWhbZe;PhP)&QM:^GuA3H'9+J[SOQT_;VP+*>ap_QZB!#+DVJ#l<Qu:bW]G<)=#HjnC=O>?%8ZEh8T`Mt"FBA48?>c/YeSEEH;7.@.WiCD)\Pi+3iIYg[P(IGI__S6Ss8H<CQ>C9cH`-\B&hK'%>*UD3C<\#)<9n!3S_>d-X/jM8%CJ8U,[BF>H8-[R=]Jrf&ea>AG:@5aB)q4ogpdlLWP<j>E]73o&#F2;MooaNuZd2cD?$OMVe>7'1V62M]@s)'jeC=40JFaIdeEU(7%eP`kH!-9fTFf=Oc!&2hpT%0%12[chqqDt<I=1Ki@c?2:s)!Q3BA$$@]%IUn'C>:kJ=lUNb]I*Clk\26+[g,Xe-<JW+W`VklBF[Cu%o$a^6;gSmT2>8#a?M!NQW&8+Rj>9iN3mtZ$no"l;AmC0'1qYHp^J^E$HWPMd]ROLA8Iqu.5lU/nXf@GbHr$m=X)NN^\r%kSrDgiT%[9aTm:%qZ,_M>:_2LkSgakeFQOabR8<Nhc3>Rb'9l.&0mgU*ur1o/K5Fa#bJXa-prdc*4H=A&osZSm''$Ys6SYGt;-D?nm)5%N/D%4gp1??7jrH?^Tfa[eiN-g:,XK=Zbkj7QOP9FQrG8m]Fd3)bkE,O#is*QgmROKT6rb>$[S1jE8GRiE011=[K]TgN6Xi@^Je[Vqd?E%EM@0r9s)F4?H5",H7NRAe%6OE2LXLAn>)-,=dM<VWcn'sVsq+.8K0#QQg(0Amh,;+rMYfpl%NR,)V@9&32A=^HG2HCi?S8Td$n)j%,ZB7U6P3Eh6Z$)Y)4mG@NhMr3'F[YD,7HmiY;YZU<6&[5S'+8sTb'+g^[O-kqE;Y6bI1j2GaF=INN]E5Dkt9.JAq</Ghj]`in\FV%koM]/i]6OH]$@g?VMt,(1>V4tdWEf50;^Wp5+./to:nlb>E<BkZ2\W`GhJBCOAWL3M-$ck^9Jq#F0g,3R7T9>289m>2RB'ZGSF>>%Tr!TK*3&:a-"pj3/P/,p>=ooBA%@(A4"[")B@8PM&"?Vm\2L]t[:-Dlj0qL[d@9m-2:(nsCW$,3[(\^]Mq4T(19aON&"(T]HS!kV%?(8)f"quO+Q>[V/[RMEbAL$g>N/br=)7qrm%,.hK9&&e$C>AOX2"P00q$!\pTq6V9"$q%`hodZib[?520kXcJ`3.p,$Hi`e%G'_j%RTTI<l,L^C0<WP<$48AFh\ba*W+m=1=V<7EFk5TggN]7-a-gtcTm`i6%S''.G(eNoj2f8JmN$Ku>M9*5/!&`(T[>i\M<`_b\;[W:%\GN]%/:1hdkHjV,id<9K]e4H6KIO8\]+?p56:$[XQ+JuU?$E.r_+!0enLi[D`OjA^PMl-l4_f1%*nS!hp6*hZZ1]pH]>`hS9W$H"%iPf.[6n2fP'"(?>7C3p76bN<aFWT"qMt$M#h%]?kl'M==V\+(\4^F(*H2'#a/]CW:)pDh>hL%HJnih^/2dSNeH1P`B&Vn[ujibB*%XtfJ&-3lio.s2$fh&E`r:%\Cdhk*fIJBbZ#qsUN#`)"uO$&(9VQ"Sa"/"TK>&d^]CW$S#CJSm9A%gXH3$t9F#3uEghdD>CHP7<]3%-Y)YZp[B*,?Jidj@8kbp\fh<L:oeT$%o%(^B@rBmF5]rir>`PnS$M#(6P7OkGX>2Jf2c[7GTFNWT!(eN6M['D=VB?AK_._"V6iAu%of2W,W^3\CF@X5?<;#fEN&o'N3h#ElpS5u^ZPS&=PCo5d3.-Y[DPs73IY)REQWRE)RrBCS66!DiR%3]FUC`Ge"X+]N[F:,Re_RU%%n<@hc7':(,-(^TYBO^O9X=!>G0V+/J9u^`B8JOtJVU9fahgFH_!W0[!\tOlO<4aFFBpIQm9"V4^QZUf'"0eSn[@Le'h/).-QnKQ-%,g+mrF#QXE1F!R^cWY)ZE&MGf^1HVkSTskQQf`>.WT,<AVDRF?[5N9T%2r2*D^[d>q9[#P,7eg:+0_*=:b[.)qa.7CLaf]bW]k/I%$lY1F73esM'Z5#D?ED[k8+A/H:u.L%rP;3m83Yleh3sh&;=H#3Z5$;h;W7k$PTJ@R9BeT"e<_0X;H(kI5>B<QiC17V4nkh_hA!$)%/bofYL%_rf-B&[l]o5soSSt)l_e[#iN,IpkWh%SgX(cpW?%".>-T.1ca^"GgY(O-fhb^?GKjMB/l81?jfONcFJ#GhSlWc"qCq*h=%Gb[5((E5MCnuZVb<F#rK1YV<JRh&i-]#jW^aZC^<r,u-s)Zk6^@BjllI_G=--_BYkqr^J)pH_6r]a+S1E;`V>pt:F"dTCb4HbASt%n*IeOG$it^-Y'*MHAZM&LSq'D,lF`i[cnL[kJ3(lrER+>(7s1tj*>X,K]],,HK`&h*`Ka`X4NQ;X9&(&3d1\tX3m3'^;e4gnFbm?%k`Am!p(M]lBf*qe8@_>fZfTqbTMdDO)r3uoc'd:NNqZ"V.(#NpO$@g?I$X+3QMt+_[Y&SU;<-%p\T4(,.Yf'S'GD!VHHs`]VcRWi%9maca`7]>qSCr@jWb_9_4KBA[Do[Dpffj-ZQm'MtXs[_0^9.8Sl1%IK7%\Bc\W_HB5++oZPC>DHo]_b2Y`X`fLA]eZA:hp-069@s%WKI$p'HT\pe^<U"Oii[V#+p@7eDj?bNZAM4(6;0tEuAVS*ON`#M$#8B-KT".Fi'SI3JI1_q\jXm2m]<K;`S\/(U6+^\<b7#k)J)d%De6b.,@=`Zg>__j^Aq0lq:RCR`'u%mIL:%_,J3I+<[BcocH;"@%d+Wi'k$PRSr+%?TeEH_e.>Y7M5M:7Mb<>Y(tZ$"!\iQ`/Ork0%3#/?s4MW>K\[EM\Hq/VXj5k5.i^_8PM!*(uW"(#bZaHlB%_H(2k3GLkNnMZGX8.&a38p.?'tj3$(CtC"=6MrcH!M(mM4Q@`b\/IL%1==#-_i(E&F/VD6<//P\$"Rm?0Q%U21866kn]ml7[(9E81Sli_Y*d@HfAFAj)3qaBI8LkhHQ`3QqQ$i?6=n,n%a6!*2kY0$<H7'$%Mg+YZ0^?U'F^9;&4(DTp(M)d*#DG'LI8-t[TC)20Q>'39NXM0XE=e9\,/(QD*jH*MKJsQ\g7jm)0G3^--KEJ^nTk<:e8h4=rn<s#%RKA>$<4*@X^!/$EML*8J4U;(=VuI#aN6Y*&P$<K"$%e-(_5FRIkeT0G'jA.In"Vnm#5$a4,'b7P7c^H!#?N.l4[!2'[/6:YRgMSO%*CLlZ02Zle-AhoKPq-i*oBNbG?<*C+DUAt5dXenZ'mLGqh4C>HC"Sc_H<Wb_X.JtjLH_e7+;pA$ZIsMAg2X7:]RZVg#4(RB'6AU<%G`E1$%IT)CjtXKK.^D;@esk7I3?u!;"6bK7.4HD]""]PWgiM6bYrN3KWB$JLl'?-Q86p&.3o5S_KmR\HW]Q;s?JY(I#m^O_d#(A$%LkkORU_sWj[QeRu)H8ljR`9c$%4T(:U:h$#_uBF@DAuJpT]6CI5jBDXY-)'Lm7:OWG?>2.'qpS'TiIZK&m(Z^nR`_</6-I4Fs&(f%g2]%h>set(bg=(5C!B"n44:JnU<g8bG?`btoL9HLUh.5gD,-W&Ja"?r9/AgYgW@uK^#tt-\Jp@S\2gUu7ouW+2Zoj.Frfi=9/*c.%F=,*8Xd^c=Kj@5@mR=$jlp.$)&7[l^gkq>W5!)'I["HqgMg`6N[j)?^%D:Pmj0g,mVQ[M\BXiM=?6TPrCahum5\6M;jfE4RV[oBd%86ttN==PCDDl$F()YlY`n%)*GDPIq>Z#jk2;I-OqV0=)ZYk5'[@>P\hNOE6a9bYtcm>WS\lC"^sjn7l(F,'>DC03jgINMT@,1>Q$%0XZN)!GZ0hlZ5D"V@?]b_fq.lG4""<'J#,ge4ugr@e-A/6jdI@"ml[u@S52<8Fu\5]ZnH:>EMsE:<u\2+N[0dnua"?5.[t%[VFTK%F=L5tkss'#U^^"jQUmgR>X;ShDX<!]8@)FY73CBH[,BCl%'#f_D+MLU1p%5C:0O,a6U7sc.?-Jm68.)UhINTE<QAW88/9j$>+aR7%i_H::5GQQl5l,S^]t?a=gQ3nl]XhWS:JAR:De8F=o?OQRWVZV5AD`D(W)@V?W]Yr*btuF2XA[.P0rr"(%RB</?aiX+I,()4*VrHF%8DdXC&VlGLDf<]JOXd_g<b'hLB8%U!CY:t!;mU74FKkn/7eh*uP;a.kL/bZ@Y8KYYG1@4j7\Ore$i\q]J[i[^aa+:<[;D@!X\)A,%4SJhiC:`h36[!6D7!ajUX\5J*-:>0*>-91j#j6?D:lllD#\0,E/p&46CkL/joBGWp&MsNa3Rp0;3A,#88>1N)QUbi;<=WBE2tskP%:S"&XFlu\E35dRf:KK)s\?+_6p;W93Y%@U>\e,;a,+6LIe&JtELXrb/C[HM0'tUT>h+rqYVSD;nlcQZsf]MeRFSN;VGI?E$m<L``%`n$_R3JQ'6Ch[O#:9Z_?:+^n/BccT3p\E:9FYs7@C\6Z9S^4S'<V^CU;rYp'k@nOi=E86Lq1JRl]Y!q0cqrHpoYob">C3ruZ'YFt%[Bhf2n)<d(Vlkc>gqtj/AF%cipQ#&SY2)ll_G5:Ke'bimY_Q_;h1TY4m&e^(j6l`l(:X;8WYcf&T=4P)Ni="#@^PuZZBg&-1K.F%%TfVg&4>@$f^cE4N1Xe]l@^E,eh"B*U\MKp_@Yi'7p09DITlS]%[CKK4>#i-_\4W)RHE<1*m[d<^PeWoP!/*hVV&H#3e"O2^9VOQS%m.kd8/KWs%%Xk9l'k8nakt!cGei<=&G&Dt,/'N)&QNl&JoT&Se#JQZo-N_8f(L0<7Afm`N(>Y%T(gJLfPj.O"8n_V(o=P1ir=_N/%N5nt4<Mq1hh+1tGZP+e3F8BsRBa,_Lq*%1c<#MO>\uJh0#++-U$.>tOVie2"7fNjlc5!/C!K@#GANVk<]3t."DPZP3C"nIY7K7-o%;3j&6'h85,4-8=.p)m(:&\F1Bk[+s`3S-Y*`Y@JdUm4+0]u`4aOFl\*M&+)FX0[*UT3<"3elfLn$JB!uF2kI"h;?`qHStVo1*E;f%CM>A.$-=Le=CgD(e^Yo4/B]eW?huDCcsL9ca;F)dr@_tY=sSUW<`=C.XP\mm0lX<?NVNTZh*uIEj_r(7J?&gS)^H$X2:D]Tf?<*M%%Mh:+VE"]4"MS.n]%o[j/*ePR7b*=%q?5"`Q?-iLb<OsBTj+!TbQuKlEC"(gbfIEKA>Q:2CJ&!U1&HJnB]1&XJifiHPrV+G@fe$]%oU,jb*E!)rPM4\399EKiBi.`4+&n-T2Q4TV1q9BB>Mu,DC!C3IY*+J"f7mgb<[$/6FS(@$9.]]"D=fil!r9].q@m*>R<rQX-N.Zs%o*=rp.EuRgIp&Z\#-WBA-%#VFlA]Q&1(0Mog'<QY2YZfK+\1=]Yd8TFR84nN=\H;/clu(__"L(>Dt:T\/bq#&Qk+8P(UlQMYRHEV%Op-i+`:P=I_PU>^P?^%0$gP3h*`VC[2&l9*DM<Y"+g7=UWbg.@6.mUROt`6JY%ZqnGZn$/YjFm&Jp1GN"$kn5UuQ_=bAT>o41%ne%a)*!EWr=,TF"`9(]Ct+t&$bu]W'`VQMoV$8L.S>4HSLB$Vt7LQlu+VRaesgbG_4Ku9G41C;@Bg-_\G2`_*=3UdtIC5p&/n>8B*j1%R!i:%As`m!W+]O1Z<5W0%P7>3bK0pr%Vh\[Ze@B6Wmg*1]h9BBGC-^"m?fMKJ,<L)BoV#%rlhGd>,9dp(8SO<hDq,6m:&Diie0o2%d2SOE>-ig]^`jUAeEn48C-.D:r'%)43d)-M+0anSAe_\%8nJs5(b)U]8bu6t-JS07e$pk#Q4hf42BC9*Qr2:VkS<g'-&(^]"bV;m%IP?(OfDRP3e9dTpOuhIU6_`)BI:ZqD*Z6,,)MN8pL/b0(FOgM+s54=R&*[WKhng]NIG4WUGf9M;XD=K)1!J%\%Knme:^ZSu@.lf3%&k7:*@+aAs)#cHSk4kDcF8cK.a=U'M0UBu%[@b:HH8><4k]f*+TJ*R^mXE>&$#$g&1#Z;YaGrgnm-S!0c`I!<5LE*^qWc-i)6Lqs%RE=*PTO$T;,jLT:*M)QXA&0*u<C*-mMJUgSQ4^P0L4GT@\fPeRMi;A5OlEJPA9IQ^2O&@7rP1ZV@`o;PjFF,1AVLODLf]9%()N6%%V<_W3Eq>Sk7Z4rCf7jD5<;\I')=96;(QLecX/PQS7B,s_(hT95fVK_:r4@:TO;+u*od9r/@P)M,XDks,b;K@HJjFTc^;$.$kB3P#%PehCZ_*RUD"!2a$T!9T)(MeG%[&E_CKF7&0hs],I_dY:Sf#22k:(CfA33''9Wh[1ojn`J!+]b:ZZ/\g=\5UAkf6E<_;fLobD_b=+%%qj^RX%T5CC@uCUKk+OB_0P-$>jWQVJWd+Q=6A'Yq!Eb8)(!s5DDcleY3<UD1'o)JAN6^&+_F=36WnWVa-S`8*)'4%M8gZYCjia&%&`e:_mS'D-l98%a[TD^6BQ<bWlTThN4horaDlms6'^VdM5jn!<f1735l)`T6j'".Mk[WKYV'l)h:jOY`'lnn?kB5U^q%MV9H%G#/%;sf_a$.!kZ^X[7dLfl?RPTp=,q>X],-M^X`p^oO$Y%o>gj6A+Tr+^>&_sct;BGSF%,A>otID>jXDcOm58`Huc15:m!!#/=4[j.3`%D`G<qIV:m1?)]9h`N%Je)n4h?_g8e!lfO?=N3N+Rf-fJq!3WGi:U2H"G6nl`o?1O7UtU]LGAI^N+L$ssLGnt2MO#Y#gZ8=@GW9Jo%?(OA(SCL$ukg@Ut&,s*DMGR?Z8SO34,TPb<Nq[ndDqW?cXf`3Vj[<1nic(=;!*;Wj,#3C7[U4+:QI$a&Cq9PN:CRiH)[OZph[OI-%j4h!*PHKpWYu2KhRTI2TC@D_(a/29-pHE3:2C]tK2a4I'[q7SM[T'?hqaXjI!3@l>@F5cE<feH.ZKdJqV7ZS2=E]D)[`bBcV>ChL%LFh.orW;'V"cESYr.VO["D?8ZXXq0@/m!%S\r&7ThW9FUHSalNV8M[Tb'^UC4qsc;1SDKur1+!njBq=&q\*Z]OVsZaCo9$AC?%(o%/-*,*\TFa3h7iRiJ]UY*GFP#]e!"BML\Z1Fdb*4%ZieJ+_X)gu5IB;SAN'F8$tk&V/Qm?`$tj_1rJ:%8g1gZjp:"eeLd'l-fBa?a%qkru_9Ls02rQd:63%uV%q]2'B(XB8Op4dqg;omch+_DK$=Sn0E#&m>,4+6'b?4>'3a%BO)ZiC'Yqp'o*R;B\ei#TT[F;#Qm;SXXB%@"Y_h_3bY>1!tZ$GQ-s8ml@;GUlnnZX2DEQ@IDq@^d0GM3&t!JqRmpr/IOY)@Q7,6I\/PkXS(\7dtT\1Q%e+!pld4$_cR[LjN,2d%qFXQ3Ob!HGb!PZ[3QY27f"[9+]![-8\QbIMVo@&m7JQ(l\OK_)e"mJIh\?F&MP^bKh;nFZMfZ!nG-$S4S$E8,1&9n0&tP@X:QZ>0%fkdTFe*/Vd.O!5W^p-r$Pnd!Uccnr5q/a)Kb4-hq$DtcH/(C051Y;3arU]2od&V+9.hL;u&$p+]YgV/uhb]@/>SOlf_:[mND`f<.%c^"FM"d+B.8PU2L?YQ_G'a+%6MDb>8,PilcWZjpn&splah2TMX%q7'1[k+TpUM@?tkMa`pl2/WTcZ>:'$X:eMa3uDi'm+jk]r@\]%'.KlQF"2pUWhCrHTJJ`2\uqaM?"mP0QX;>sILTS."eDV.m(.qS]RnG6pq!K!)_8%`MlR#nXJ%0>W2ZF?X;5WYL9A1@cK6Ku>=2Kk%*:-d'C?Wejkd2//q\m':$G'gY[REN'ES9+=A"h:SO98ip$$7l+gA[>*4M<GJ`H&<aD2Q.Gf1S8>CugU4CR[H"q9FO`T&-<FZu>j*%9T0KGn@:[1XQhu4UoS=[[A'pbY>u)*q7a^0V.+fuK=/e<Wk:On8pTN'jn8Sn/JE9jV=LEc-MQUt.Bi<IL$,IH8jt%IWCj</eoF2c%Zi";r>9]9#3S^?ZWr5nY,)bnt@\A.YEP^'5hGhTpCU(5RWdA*,@^iKBs3%:;8e6g8b/-&nQ.2hdX[M>j)/uh8&iQVE+]?,b_4e/8%Y+%@V@Bah\enDCVl>.cm-LZI4Y@L:m=rY//\NORUj[H&s92*\-?`,NU>MC2WX!j9.qH1JtXNYZ4s#.DZDSgM3YH(@()6ncnm2%iE%$`h(5F%MXo[8OW:fC<EmXu`L@M6"Eqf"W?mega?CSa4p7Bjo]tIhTLIS5aNNe]uM6@-6Ue=7r\uAj)MMk?"XCY>n:j94UT!dr@(r%#GGqWb!\F6.T>%=/17L4o,Z"6=M*=mP#+^(MbJ,t[Wa:_pjJS+S#r5afK[Y:Tr^FY9p^9rH#6R9B1]eXDqVF&/i,o@!81*k3L,Xe%qi(Mg6/;qGIg<"m1$PjI:"6jWh:TnP`R^K!'\a_(ASW!.cEVT#>,bc=-T(F"=sonBC%B@I9AE^urb,Ok<4j4t7U-l!>L^a)Z.Hk[%.+;F?600[oFLRHKH=TdXo?V``W`Zmp/MMI`:%qD6WJ%rG>8>5U\P?R%e8hfNDc\#BH5Xj@[8mQNk3?IBD7XqKbO!5<dMYHDmaKTW%SpMi;!e"(k^"W/#1efFe5DJ99D0]YaVUS#Xj\i0jTA&kW'PF>I\*K/J9e"i/6OZFCPA1'c7W1CE@W:VWS$'*ImP_(kA<P4i7HHOG%F1?"HN3W+cEGVH:Wi\UK9IeZ*AJn[Vj.UKXV2\f+A?ZKEfcu\ZOkRB1YAK=oPFipU7TJ*.f#9Wg$,O$bj@\Z`ZVrq=ffIX9]qL"a%`RgVS;ajgnD=27@A16#;2VWH@'O\l>-;*?j3-AVC[8o<$<Q`\"877M?bLEEj0;ikngZ;qUWPHd/K!">'3_>dbA>isC>oWTc740pR%@Fdl4_C_=O\2uuVlF"37=fPf1=aAj'gm4VNY7r90or]@=KqH+Mol0<k+7$9T/t3%C\JNd@:%`HGAuN.@%p,.Mf@,&U?;q<@Y(u>d%c1gLG4^;glV^g\P>n<:m_o*:0]rm,@m1RdPHFU[_8mc;4AS:[T=^.sMXL$R/Z+/8/Z!M,W=F/Pg':Gb&<lp3RX-=:NP4lXSFBr46%9PCM:-=k;>P-u,H7sO\dh,[q">%jEY!isFZ$4Xde%XdT$B.U29G)57H';XZR=Y`*aCaMN"[3id"&a"Cd(A"gMg9o)-prF)Ajd)I$%iR\ERA[6]bO:8n47>;!"3:;"bA-ar<4AVknZPtTX;h5?]=g*.A?5,_d-UcU,Y8\CXPolm&RoWsd2%EY,G&:q>A@j^ZjKo'0'!JEX%!ER142E.u7i#p[AilZt`.oP&i8k#Q+.T4q=fsU&G]6uQhI7<G1*`]"blUaP1[iSPFId9j"lF6%qTUT4jft>&<ju1ScKS=T5N(,5G%=k?b9A-gPqEWK2m#b3AubMct25Ui4%rKNYre"]gNVK;Q'9&Vi&>II`C=4OJ?Xq]1Xa5UR<J#!c2j&KbuC"cE5>`O<8;VKr9;\S,q%Nps.snm\B+Nppb2m/4Ca%Fo-j[/7ASUKAZi&?FF2N=<GG@29fIh33Q:_c3C@^qYR6Uh+aVX?S6IH29$+MOQDEFVQXJnW)afLP1-H%f!nt,2J59V>X&0+R(30<1,/_#G^3\+?5sJLCdcHkSbXK/FFa+us8MTns-XfC]4c!hN%aQNi]h[eAi(>Hk\t.Vk,2/Zf[DVqE\G^r%/!S7`SFR,]MXp)YhS0p\.s>]%\G26`kh(7]lVf;0QEJ5R]D$Ps=B+Y\]r]lR:O.ZMc]=^ieuJ1*AfE*673B2oX2S9;SFXO.MV[.g%^.Oc%[KLF/n).KadVQ2C5tQbND")OdKq5[cGomDXlG"@p^#R.%<G*m5m%.eY7p!`,^D;84DhJ!oHll^jltX28Oi!/C4n$W('Rk.3%mV(U<l[ai;?:B#=oTM:kqVq7m].2,I^Y[f04U2n,qkX8cn+#uJG0:KJDhE7'FCNA>O84_YC:uI347++_$.P6li`hQqUthh)fU>r9%.RnNi<&MLk<*h5O"h'SSnTB<F=4Q(A)](#r<*BUrXNHU&ZDTY'j\72Q;l'^Xa]8&O/[`ltY#l//cFNbO8mYki9B>ZAPiIJ`r"?QG%ok!T?bMK5Hl2"T?2,J_M.qb/_%b(7PEGa(G],'!QjJKO)<R\pSlI=5sH[7cUVJG'"dn)E&OVb10eT=gf_fT6[Qff#Ud7[98l1,Pg%:+@@?%qFd5g36[oQWHi3e:4RcC:_'O.VD%KY,:MM,'QjX<u?;OBf00;*QRl&c`67#C?[5/p9[ssQfi/9*=mI!9p]q4X.#+BZC3CA%\OlWHor=H5YEgfEgO+4qFQk6f/^]foWM[j;:7FAZ?!#M:SR3]_WX%'rmSL%R'^iW&/oN0'WRB71\nX=XD)IkGPYIA,`K%?*%*Njr%UM@BQ0M91+`=?Ie>>:Gc9@qed%`W[ml'_h/fk5_#]rn4ObDDNERSo3Hkt8)0SlO7)6q2K)9iirSH<!\+[i&?gmq"@^BdHj,Wp0)]%aP?[f<7_<s5C,M3,R.Xs^K<S"Ru2.S\f]#JGP?!8MM6.(M;@"cHD,N0h0jG1.1N]U_fU-1?+tJZEM#_Shkt"OP"`q]l`Cn[MC@u+%_L8V!PB*O"R2+4ThCdFNWn1uaK%"X@:LA7:MMX?[_j'Q;QMf,gbC!!)R+(;dX@7e2<NX]N>C,F&MRC%ZY3Tlk9V8AC.X@rDgu[EG%="->g`\htNQ!BR]l.YA.?BCeL^?D`["kd\Z>2D#5k,#)*c!@kMd9LeFC1CEoTch%U]]cNaC[UE[T/Q:kF7sK-lS[n%cP:,j6`h1j%eN+'m],+EpI]\^+[$ae%40%CnV:F>kU?4pj2QPs]QJq#eAn!k=H/L2Z:fie$Q?:Zm)S.C5YV#/K:S-:P,IL'n`Zi=+,+'42X5:('%Fu%KF:NUd.!ZA;WTo.hm=<:R6G?(uuGOBdC%0],l/fSQgY,\iZ_(ja6@eY0fQ&kTA?OQj4ELbEWVdFG6Xo^C+ZO=ekn&_SMmj;hM%'X!PNKnEB$2Ud&T['7!q/G]"SoWThg%+_J;N;'`P^Gq!0?Zm0%jlJ1gXE6(t+^(*uS^WN8/+KK/o(q(^U&Oo8^?V;:;dSmlX(i:3%Tia2.Z:`*uo1b-i\gl*V;r?Vq.j)B)-YSaMXNl"/ks:X9)Q2oUWbE06#dYN]gWNU9C^RAmrpCoG4-Ge1JX(J<jVq=P"5f"Uma-/T%G/mm,DRf#nhWjfQ\1=Y.r6b0P?-Wn'?/LlJWLg'*9mJn3iQbE!ojW,;DRacQOt+t:FF(i1iI.moR\T]oDRcb"eJtW^Ft6f6h6J.R%V<6i@YLO"r^K"9TqC3mShmt8<FXnP\:ftot9]Qr>VIN3J`p(j>Q1A,-35)9RSB)s:("m%Ja!h=11`%kYNYRj7iH9G5f!jfGU>sr1%/<"<f6\+jHYGL]94"P2!P:^9Z<K].<bI'`t'WYEWPUs*lZ^oC<cu=cVHBO4um$F_`9W`N_n!./b-i(0m"klPd36q\fKpa6M[`p!C%QkCq>.WeMI]!-Z<Of`TAe;RF6S#Y.SkKbH5$!9K`6W3SH\ot9(Uohkma'b;oj^qBOel7m?;8o;4WQ''hs.st=p2l[Sp9/fob(IZ2%cgIu``;Ab-Ok6>m\TNl^9W@Zq8%7co<'2FL1T&cA4m.4=W.%jG1bcN:N_tWSQM#YI(dC<'HslTi]T5;GR-ME1'BMsVhZQF<9L%=B%e$Io-oK@#uid/+RB@9HM0%(QlN=8!5])$%(*k'eui9j=e20[^mkHmH60%`3;Y5Rrm(B!QOO8<c"n&;o&U*@81^7g_D^XW?br6a'F%Vh=c>fcn)<J,Rt@8SK)CE]G(d<)WVfC!OC^0O:,*p?m+-W!H2tmMd(8q_n:Q</-`Dqe*D4QWNrZDrkZW.5sXtRD.nQB(G85d7;O*%Y.=/$$:!6'o^r&sj))V9rO2knhYMRfpBZeGX`StNS_41EMPN6u';1t6&a&Cjk4J8;gO=KLrg^[<nBL\!5_TfB?;GHn*&3:cDGiMI%iPN4e2%lHT`nb*lT6P]A8(s6):$rGI-./CH(:1CB[,YB)*qNW1V&kfZP,,Xg.;aB'7K(8ML0J9#=0&cMWh6l8R:U$@7=&ZTog54s%q46:TZjK<i[`*DZg.FX]/!S5#T'X*>D6/+WaZk3Un`ekSfBXZb23tb[Of)2?V+)t]WEoqa<gFLp.DO>/\Y$CV.;d0KKstZ1n)``P%B%YYMpjFK6S`aMNm*:iJn`%FLb!+J>Si(FK?7,9QFbdjAEU/762s!]5''39a\e?[Gnr,dKHFDNVFt:"j/,-GXm`)T'jGm[a@(1!G%EEapEMm]oqE3S=QXXa=T9\!s#YIKkkmlMrU0P>=t$_-^oAL"C?1Uob1i!N>"/@[4URG7`%<'OArG.#cZkHF$RF*B2&<>fRI+LkZn%fl\HF+3Ce+Do1[(VVc87RIO:CgmM'NOK<$ZKf3\Ig:CB31F5Q*XC>bd7ZgM_WK!gRP]D!=Zp*&Q.H"Ua;U/BC.R(]Gnr%amS=bhS%Y?!($WK%D3pDQ!4rAFjqFc0!nF`#f>#K8WH\%cFTC3eN8A5hQpRiQ9eT2&TPG4e`i=AubLO`lOfl+@A-C(4RI4sU;!<52;6aEjsh%"^&/:YciZu[W9Zs71GpWE7e;.@+?/\MXkjo"^&/:Yck)W^oB8B3`Dm(._r&AJ52)(#??:SCB2IGm^NTXB1f^G6T/8MkL7)DhH\3)%nOBr>0BKMTWW2=]Htfe$5BSD^fo9g]]9KK&+7%=NI!n^DqL@L&^6I4CO'TnpIm7tW0BHttIq9F_o!r'1RT*I;:?g&M4tTBZbA[(>%XuB=#Y?s6!E7OFMCY9Z,-hmJjV<-V"f2f=sah</Ro9?hsf.V:/4m3??J$34i=/adbn*FAqV@uSXlIXN)Wl'2^8hp.DF45>7p\L.f%L6+=MK7!R>DtPXR.CF0!?[4h6?Zh-Al+MQ-962etX*af.Wk1B;DOWS8']/.W^7]:sC8^h&Q/ClYBmjRd?GH&iZ_h'Ul.tU$EV<mG%\*V)IIc\'8oqj35[^_3jEX/T[p\L/E\kQ>S*T$*`I]Hflp[NB5oA92SI`8(TaQprrHn>FMI6G0nYIsA\X[qjA?GE?egsiHTee[TF%?9abbRr@t8l9j"Y]mf(:aM&_OlW8P9?]$>F\C[oHiS%8,G($RO9^/[.:7nSime&(@F;<Db[Weo^_3p`rrH`E)?\R]_[JTa1mG_RC%j6O;EiMu6F^G`)PY+"eOCJjh&So*6(]m_9,)5)9:FIVa_?GAT?Soe'%[OSC_IYM@IFEOcoH+Z/Z,3\H$^LXhFbihgij(gkNUYn>M%DTOSRX'^)FnPuunbITVhhs8nN<I?5*e!#.Wi\tmroqPgr4h0*^XRoQ.p8ZPE[(e"gF)l6$UO2rsjs@Y.g>q&Tf8Zu;qRq@>UQDSD%_7b<ZVKH,;nTA)jlYt&0Hi:N(L/6^lB>3A9]QA>#?af)GIB-^mQa71iod`c*)DCZu[<o)aH(pLlS_hW)I[P9!h!.tr(TtGurAsOS%[X52b<P,QKHi;rm`8"Sq3m/R\^=TP",FfbKmdKg!<t%BPp#KGoee5M0p\H1o/C!JHnm9't,<V)t4h0+Ib)UUoYFdu"r*0+,WbW"+%ZhRkAEoBhs`S'CeIc\EI3)$miZ2Vnno<7/RDG@W$9haBl33@OaA(Qj.LLmXE(5_eMZGi)f98da?M;Fa4h5877Q*rZ-=>OQq$$Blj%B%5*nZC`"-'PlUWqM)kDJ`55BD[YG,!;cN=4EPVOq"-Df(M<B$%Vc)5pOO;$RIXA_7NXgD)W4Pd5E*:fSQZl"R=:SDgY;Whi[oY-%'])Hh4Qigd*NaUfj0-)O<j6Q,D&n)?J@0bAI;X;%hi0&Qo?$?N\+f(`dec(Gs4dF^`Vt0j+#aD;DmSV"hU2&AVK_[\f_8.l-gn[s%dG5u7o_ie.l076HaOBbYOoP(O0YIDW3q[Ogr:Y-hB1$KhYGV#1@.`'gcAXtCn6p6DL^1>oOfP%^?b_)Y)8(Hf>T)\pjQ">GkGdsq%Q]6o[YqIUh,;YtK?hn2O.H&;$eW8gK?u,NJ*6Hh?QG$!$4C'%'%W,R&fHk)nf@0':Qe&?YUOf[Sq'gFi,i0mtlN^qghbQr-DAI'n%/9f`.rD<BEFaRb9*IDuRiGELV``r90D8f_-qlo\a*.GMq9%(4/oZPnZj94:-q*rs]/hd6mI!Ye^n.&lFRlVL(.S7]oB)9nh\YRa^%j)<b2gmCd\5)^Pb]].2'qfka\?D'=XiS4>sD;smkQIp*55O\)>c(0EBal-ab[Mc_po*8Tt)<(4NF:B6j!Tl-RdTOiP4`!:-DgqS,%4LR(1oX[q)>@0m)D"-l5b";PN'575-U!>BK*!Qi>e$g"EEgfiiT(1E(_h?Ro8GlBqDt(A-?P$PDZSnhaIR.;$j0.M8X6.M5">o*S%-c_Ofm]YSsIYc[\NsgltB9UQ/S<:4EAc;_.]NJ#Wb/U3CZak9a"&J]I1%u2_@i+bBi\6i8m[oMlX8&7HHUf2mIa-X9D6mb_Lh1gp%X4*gMN/]HqGNRl77F5G55Fi69:>8"82m>Db'_^t8(iE@p39Zu9pqn_Z?cDBg!;sDaQ]->Z!YJfj[+h?@5$&-3#E'!E7#VG'J@;*.%U$YEf/N6FmP47cY%6H$DUUq?;oh\>2pj==Em4VsZ1N20c`P7GL#9%gCjMBD8r6\I?Q.$:gbl9l31jSeDGj<oZaPP):Abd^9%#0,4%mXK7_8(N0#"l32^1V@(j&bF"`15IE@a@Bk!/D1X$)r[\C>[<a:\b`V=IVJ(N@9*3KU<4;ENQ2:MlaJ6[QS37U7e"cmN0ett?[7LP%JXp^Ti"h<iV?ZealeWnTdI>W!a3M0FlgW@Hdh7-#r0Yeulhgc@V=QK/5Jp9`P(kY\Ha??i:65M]^[=md[r2a>qpTP:D<IRLD9\I$%gg#`t%j7!q#K2Irb0plNLWiq>mX10S@NcHE];sugcc+f@b4`\hpbm42#n\G?6+rrP+74,?U=J,]bC1]8m"I`kQXc)YZFLnOFN3ZC%QTTO'(r\,/n)]UHRZ2Xh\h[H]Go(k!Gk5A*oYXM$3WF[J5'[XNNR]`eVfh&>>28l/3iYP.#RjqJZP`;YWH,_0;Ts/VLMta.I]idI%*!*eL3^laMecs.[ZX7bJB(jqeF(!H%2.DD-2"NS^n\#sN/F;u'H0FTJAoJfAjg67PZYISH:0oJl,.GKYn>ecT==:FUf4E5l8,gr?%nB\p<"%NPWI;[uADhnlE=lq[]m\".+?_>!fIq`Rl`:`oT(s*cUA'5g:4saU8+#c!RO+5f7Y6;X6AqIV3a,UQ7bY4'XYd6:S+;/<&%$)_R;,2Om+^:@TBF&gTVK!/sJV`446/f.lcWZuD/T\b<*!FSsLoKKGGeNu7)?eb)D7kGe7l7[uUp9C<@>oT<'>hXH&i5%D-Sn=Q(%a'RT^F:@Zb=Lqs4lblNohkT-H0=@c]KDh0[D9g_Q"5'MZNh%76:5Im'CHIa31NW$\amI[,R(cFdQIKGe3'iEd7q28J_PS/6]pQe_%2Xmg1`;I`LZa%$G*\??pV1]s)&)QB&LZs"Jqb+91YRGAtP[+]h/UEmZUYGUQG3[9KoR-idn*e3KfIX36?t&s(hT!C77gEs53dpMN%qNE_ld@%IZ,CJ`pE!;>3Z;tYa316qIUMJVJf/q_;]^ASkhTspT1p>4hc5WNtqESd[N$N`om2R9ng)FAqokT[q*3N"e'Yg,MkC6!D%:/\@&LhW=E@f?645Im9^JE>n.q#Q&,kLo.[0(FigHNirZ?*g?CE5h):"ROG-!j>u-'#&`R"8fIr^AQ1:Aeo=Fk'.AjR.9*rf@JU.%>dRMuUEL:<(XHl5r7<b!IVq:N90>An+^]S6[VbPd4'lf75k'uF8$J,p_XPWXMt9(l**L<lRdbcT*F37n6PGs/GlU?=HE^n,l-nH.%HtE*;k@_^a2L0_T^S:29kj_1?gs;R@>i+E3p%LQ;d8/fu+#Scukntt_gPJ(\(.ND84L",8cc_[3jj<r=fQe:N/hN7RpO6%Fn+8;@%r,OER71p#5[=#1\S.9*7!;kmNI-5EWYRCqik8TEf9<a!3"-CrOpZ:Xr5OYF0b)j;YYi?4d*`b#uJ?0INLWL+"oak0P.a<XS86@ki%iUsg:^mj,nWj1+7?QSq8W>jLChbaKfGr(0f6H)"ZV5BU3,/R)?\E_\p.@+(rfL"_ZN(3S0@tIBmqEqqSH[)$cTuLm%KR<aeDE##R%Ni8_51"3(.%8QOie)g2P(nrh=+*a/Xf$.!^((S^Sqr'a,)"[nIY?Ze7YXTs4XmoeClu`:m3hSE64s(9p4q6F?pW5\El(5f_#0mIc%"`qQ6Jt_o@VmHVPqPS?hfn<$(,ONG$S$;P_3Ru;$hLa@sm<B$4dp"MDr0HH6+Qbl<C1\.)B"(^uB'S&cJbeM[HR,RBJCDj!KNYbR%Cp8D_^):k+g/6nTT=kSV+D/C$G^A79Y`3h&h?<i#geG<2r_S7QVEMD[2uiP"6)DF!Z<`qnCZ-7LXGDc].[lq2S:9]R1./Rm:i.(,%J8:)-7X/2i6Ph/hVidK<ROUsr;0,O.?(BJPl^E/=mLWC-ZBf<<Af3FU`T5^ORsR68BEf\ra\J)ETo;'aXGg$2>?grO*r!%Q:Hqu0%42J;HqQ^YSr4u7mE0BBF`\EhGG)Bej=`/Ql#KP7,h[,=R44,43\NA1Fl`I]3hi&[4[rdC=6;rYE45%cFp%*Ak7(pH$^fj?cBV5<:%#=*UE44_ene<AA&U\J@0GkqTMk`Gg*"2r4dC[#XQa`3V"K*K]0T:JC_j/P4s8eQDWAEh,^1B`1k:(K)55(.#hnn<WAKf`-qLHISm%GHC()N4O&.1N#3V"Y\'[ctFS'<p#^CI,TUX422iM9Pl&iMSZ:2:$:-]]reF3f.k^;G8:jB8YrZ+VIOLR-@d0;WhZfl=$AB<>B>7Q%kG<Ip=F+RhH=l4=])$J*WIk_A=i?q^%npe-hZkLFM=9[$>8nF:Y)ecf&m]@@etn'DMWr/)mC?->^*5_mm6H*qoA)ZKp@``=E%+`g%ooB=g"/@)ZmK_T"cG+A1TJem$;LZfrn$-3_Hd)4H>!H6XAK.,OhV"@Kq`^dhrhT]OEFd34eRq^pXm2@>9@p\H0cDe:XjMAIOg-@L%>X&lE?YnL'[W(n<NLZYRU'KG4`*)Hq9i!@dmg[%DT6oaL*M`k$*M@;r08Gn.Y8hp-Mr`<JGIg"YjE_),CNh\7=$*P(^J1r?3M@e'%=1;3b7T=$\J%^!VPllr_KW9%I8s-X1E]-:1c<\aeMrP[6FZKeGD-Ml$b4/d)?))9.l@YeNGMX;bgLbj?'[bk!hP=nF:c5haV7hs&%?^c4E'#PgCHnd`5<[Y(`<i4RFYN[8fL]*^!jq5@_BT@R`5C`O6$N+<3\SnG2:SXEN(o"'hU!"&?<aO+hI&=s;fZhR5R"%/c14)^I%p@cr`+!(.M"c3*d\uE_?Gl@3nY";p,,K!UTf[m<BQiIi2[1Il1FNDJ8N;GW12J_@ii!\G]>(R^0T96OL3!\_C1.-LO0JX#CfrR?>%_PVf$kGR2i[*P)"b`8j3Mm_pPVPet<cd*]d`MYj@I_($foa/b!3"Os!MrD,l<UK-kQp+)1.)j1BJ$&GSV;o.FPg#r`)!H"d\j!<(%p85h,[tP:db"9B$%_["nqY7]qN`^b9p1mh_9Kp\YGWugr*mdR>dMq(*>\:$@QbX[.P9F.AgTt^*8-F_M)jA#YL1\Eof=Q)EEK('u%kc8P#K'[EmAdnGO;ODuAG;o<F`O<h,7t0(M[:%WW@sTVi,3KK]SiLh/bmqC@j0'[4A!'r%<4?MP#LRRrH1^OtEfP#n8b+!mdjC5t%Sd19FQ>Ceakm"!H33]G0Dt7*!DQo&Poi]P,F;,b;<JRjZ>Qr34bo@Nb*fM\3V>Ja(jD+VCg_-B(R4'>No_&>jh0WDCpgGBj&&9nX%q=aX_f\X6<3/[N>P_dAn@14o>6)Hk'0J(g%3nn!3,Fg-b'Agb)0hcZd;a\cYS<];iD\nasR%<$("["A3N7)]1a/_tdN1"rHE@8$=%`P_-]/,GjMOZ<H*aL+)K?UGX7__cNHSDCGln.&I0AJ;Mh87Llb#?\/Diol=c'lkZ[?CMG;T-pE",gE<\de.i@J!qCLr;H63/5j,'%5;:I-giA-6'l^(spDNDK2q/UmZ?$udH<L1V`4*=lN,j`bF4e7D1691'm/5Jf,cKLZTNh!`pK[t#ii@a=r;4Xfr2h+0*I;D/`9tLB%(r!`@"%G'1"*^>`a-SD+3'Vi+n.DEoo8"NJXUPTp6urHgR^[RM`cmXm;]&/rGR!$/oOjVprq\E<*!WB:+iB]M53=NYfHIP'R.o*Z%K:&6S=kc*d;95g$Rh9k,Pi@fF_i1["XfiXaBhD7+W)iR#[A?uJW)hSXSJ;m?%b3&W@&keY*NE+o-T<PV1N1r5o_phF=JaOt`Ktb%%%r4@88&=JqMnn5,`LofN=?%9`2UUe&(A<+hG/M2<orbV,3auOMU:4U-Zu=#t!.KAbc)d$KnP_VUbN3q@*&O[pZ,r%_F0d"eTCtu;%'^.,6Q)(r-5s[qG:ZJ\o%hL`k@OZc]4SD'/g01"X3D/$mq*&d.beCMmI"P4/0$&2`hWk:V8mP0R3*WR^H5ioC.tHf_k,N^F_Cj]Z%iUt"k"3UGd+D$G9TKg4phV:6`qV$f.>l>\rQ;]M5gU"gf\TJ=h/njQ&%bU)fD]>Q<aQUGW8K@Cg'0\W-=W(\-D\Wu'pZn29YLqRI%iuH(\5LP@PrD9Yl_-A&u?ki'>U8)-re7`Q!#+3i&K2G]G"pW]qqeOLA9ejGU"1?=o$d^]D*"LIF:;:nloX'V5XYmX=5b>*.R/$0L%f]k0pAj/+hIcJunEgW)W()u5g)OHm5ebR>`aJR6(S;=^`S;$/VD-a2YqSphs8t2T]e\?ST0PO\Qqjr"S0)\a_)e7'-F!ANti]F\#%o0/Y\dLPI+ZT4HkG0TNjqS_n4d"YY[jo2"KF6a?PTCX4dQ1DX"7q2Ru4D2"]T#9h2L3Xi@nI8/mKj*9'!W$&hd0Da;HYBVkTP'J9%SPd2Z*Sm9&,R+Bt0KlP:`T_J*4WLSrk/jTZ[-h$$]4:+hb5FR!j-VAZ`L$#LDe3OS/^1WUh#MV2#un?chp3\eOl'Gu2P9rgF3Yj(%]_6+W\]'m83PX5%,%h'd]%ribCCP1g?lsT8m>9BKd[<W6S"SY6_&I1=$@)+sR(BnF+0a)A'YGsI!4KEQ]>!_0Cq?:&p%Sr-aL;G^%s)g(\K171TWfi@/Xr'd-E0&<E)Q997>n#6%C4q!$C7p$(o7F^eVtI;%r#i4H2nI'/nDl:bTip+LE,U!Pp=6+e=WX"19WmHf`cs(.%<i8G*LpL6Wcfr$G)tsl8*$RfVL".gJ4&);t&mhUJ"D`j/:H%EMg5Vcu7%I<R;SsO0=SY!oh'd3^P!iP&a`[U3io/>JqS6`Gd.H&@%e'.I[dd5WL02&XZbO>B+c8V@;5MQYpAF8&C=VbkffWt;CJKI%IE"nKJE3JM/I`d^IgZ)VM1%)KK`e`_JN%4.k%rQ*;S8=YTI)f_m%b$LO5D#9j-#%qs.XH.##e!-eum0Zse#\ESm0t/p]1)>&JIVe.[L=J;P.eKW5PE_L1]tV.(QlJ>.'I$K(S97X?67/]5Y5'1X=\!^\%;grGONA0'HpI[Ph_%b,U"huh-ZnG>2j6&pK+FaMTg@)eh5!(-"Dn/-EH:G(TK0R#]U,hMZ>lbJ):3,G!aR&($)'fU0%q@2GY7FZY%=9b-jYW4DQ]+pFdJ&$"<b<)A]m4PZoa!i\kCM.^=I!b1jjP7%*XnnaBVk'JpeSeM?Ji,<p%]c1Y19)EN5_o<7eF-8TD.q.?mH:Zb%ZR2*hGr7nea+aJ1lLo&o0_fq_]K[Z+/q$?f'P\F9]i9j!K0)/h[C+EXOCJ$.bP?<&%-I_`ae[E=r:MM8QK8%c;:rap'C=`Jisp,*%8RO>q&%Y#W'\-g][?7J<C=:flDER3V*'<^>'g-)r3q[l&9jmDFJf*Ws?AEhGf_\grD0jqeFgd9diGTf&U>?+:lM!Zk`fKT>g`Ds9%AkagWA++&Hf%;t(L'9%3"_MPnj%3(_`qV$<"Yd)@iDO(NQ%Od23=_jh!&fh*>@n]N@Q#9hi)m0FDL)5i^@"+$ZaHVWP?YPH@g[PS%1:/39FBP^n'0BMl)p4C%m>LehU\?IKbn[ZFppcDZ'Y2gZ%^CtY.$#*#1k[6%>#@?]lh+_8E"8;#O,:.5+>'bRnWV.Q'p+l)%W*6j%gG&u8k>6!Zok>c7*6J'gW'UR7s)8so8hXi)O#@BEE\>2dN)hYtq=!N:/q<_:oL=-G41iZML^-QNgjnifCaT(Z.X1.sC<<(`GM[c*%SGAFY9l2U3*I[7(27:DjS9X.?>HFeU`oP&g]/1t[(mFAGhZ7N8AP<dOmk.oa>G[n/.hPJpmB`[u(fQl-[_\Ed@SC_nfjMTipfN))%<FALJl21(X[rJa`lGbAQXQ^(.aIE'>N!SX:UNBnk8Uk)p?=`66#<p"h4ttL5Vd[OBF_"Mb>@kG<TT.5$'N8hJ:#O3i5%n1KrYCY:%]Y-+VQU:(j2*&6Ap?*VaXm_m@22;i\aYLrh"fg5F15-CH^EkA+4UNR^*8aIBaRChO"p^40,5It1Njb:)_n:I`IWF<TPH)EmqF[.)%be[-cAAGucC_)ORQ4ra!5$!pr`>oEr\WXZMQe+gaT\L>Y`U24O<"6gkUc*0XFak2Phh$1-)8'-9qL8FADo`UmmbbZG(ZH=gc3sYW%Hlj4)F6=&B^Fjp_/.Vko3*\u:<Wi:AgXnMoJrTdO;2I9+9$=pl>L)re,83"5+U^2?D'V[e,57?D^jW!BC1-%20<:tQA`7YY1#f&_%^X!t>)jkYYYE-=`n(P:0+Cu9[QjII>6l,>.,%O6h2WTWUj"ae"Gf>t3o:?nWT0dlh$,u(RgGMU#1Drf5?0I3LB38+a.k<?R,g7rp%Q(9(*I_QbrD,t+C.tEO2_?;HOLF//TK5J[^-Di)ZgC+pY\&3-+NeO'K2B)VS*mlKKCI;FdQ?Qef7k;C3B8h/ZLWLl1"Cci0?fUgi%;;%HJEUqQ+i*6A5VcFRXrUk3"$r6/a(n7%ZMT,8N=I>L3qE[DM*K?'Xn[@4al&KU@Q2\2!VpFQKHU];j&j?5l"1?&C5[0g8c,]1!%gKf-JprN]>^m!C6V2/nC+/^Gq*,B#;ocC,Ge/tOmQ=F)])aO(T-0gol.:k'N;*^dKjF&*t!"jV_3&UqroP*X$?(]fqSK$\4Gg.`7%bUa]Mkqb-d-07"JIks9pU5Hq4mP=1?EZAZpmP:PaTq#j?!u+6!9"E.#<!#*ZWu^Fd;\%5cBAI,'Yrd.&;ia#8+(F?p*[Y%'s-0FV%M:oSIJ93VQ&;[uOqc>=J()R$bA.6S=)2XJDD+ON(W"Zr?IdTpaD&SRaO)ps7hJJFFM[[^d)4C$dpWARkj?@![?[E5N3c$/Vf-=@4%.+2Nc&[t7uKn^d]S[B,N4+qj\)iAai:'@Q%NJ8Vt[M'gF@eGI"*OZXGCTjF&Kb<q1M9oG+2\bM\SI"I6eJjBffM3^;;l\DFUr.@"%EO<;\6]hl5M9rqSeJjCQBIAB=:HF\3Rt>`7Xo)1@3?qQ\2^Y`cljRZ=!'^?t3Gh,b9c>bh`_2"1`f[*p`o&?iIV(F7MA[&>o@;=V%$CdsPrAP08c:8-"GKmhl)b@,WEF`uIBg\m^*S%*h#TNO+:LgQ'\Kr2%*'0-h7ZeYI@h$\mif5$%p\/8Oj4a&dFhW^dg*S'"#E+Yq%?B]Z9S!DKGhZ9K8/rj_7mM_g*H>fe(l&Y6NZ8St>L#3u?_bersG;Y0O1n(f$qO]QlJI#D.&4EULEqf8#l=p.[qUbCgs*3G5^<-1n%`qJgR+'+u9Y.e0>O-c\uMq>SAqj7;]rlOu^MsK]&>.V:i\@h)Kf*!26lsdh*eu2*58BKEep<q9#ok*UYme#2\:[_\g8U]J:*2ROX%fVj_3bR]Y^fH3W,HQ@TA_-U^]fQu[)_U\q2/gcS`C4h:!Hu;q#:FE\/9hno%;kn8tY+?D8QcD:+IHqiHTQ%oM)uMgg*M&[I^3mD/%qVfp$imIV\psSLG?\_ua=6;/"/M&H&><)B`YfX<K2*#gWDO-!9L&0WpB6a2pC&.7?m#2c^DHli"gB$H[?duW+V2ZX'o-*P>B/"Cu%Bj2)6RNKVl*unBkX,E;PTVMtrVn[NJ5r!f&;:J7OqF'UXD&W-hL]ie%rP6bpgVfM.`a;g<G!8KG.<#)Bit!`U/q%*;g0]/Qq7=4`%[(<m,2roHn]R2Loq=8ue%Up`1HaC'VD,)(cqn@2;Z[2Lks2Y&+5B-&E8&e,#"3WbC6*&qr;X9,87$u"'jHNinh);WgDfdCB2l'@[%FLr^6bCE+9T9q692$->Q]%#$PW1#&r*MJ,lpiWhR$Pg'));E*$WrS.W5)IrbHd14V?-9I<N&Ke1o=4QGre&BHJ.[cU*ot-1C,)Ug%PLXMd#Kh?te:h%@+N1LlOJeXu^lO028%RjpYTh>JP-N>_NT&031(<ea0JNHXYX'Rl+UfJf9I!pA1eEuIeh>siI58^7*u]VDNWun7%nhal>H4pqij'O-<?,Q@+m4R0PIZ8qG\T@:^/&MA8GooCVg#:ScCFej0,NatUk'+cV5Aa+RHQp@7o:K@pYF!"2m\$f]_@le.8$BsS%,\YR&4ua=_RO+N$0?j\UZ@&.gB&:t67BGVJ2JLP[]oV>HB^:(V<fVYS9D8I:'(ciWrbk[FZ2F#"RoOnr,G&/e_1.NJO7-EQPCm_>%0lq2Eo3JkU=Lo@qI/ql>o1.KAI.pnWipGp&jmf9uCb+:u;QZ.49V:*G)t#_$\F^u"leAqO7qdd/6W<?-`BQB*WYka)9-R'lbi[Bs%l.:R,V6R8=ZEjDeCM;8,4%2oL.A*oi`SgXfVbU]1EKA9M`AkGN-lA?jIc(i4eo(qG^B1ka>oJWcHuJiCj"1,e_oC-jg!2MR@=!)C%)Vi#24PG%l2Y2.^DThR$l5V=&?lO<EA&2t==eEC\W9Z?YA+lV"IhAs5A4Mn6[QS-fbgS`&J6Qc"DKL@(0uY_/9,\at)Lnk53&dO8%1tJqH&?'R.?_=E+*5'l]3nX@cH$tdfT>u";ZDUJ.Dr@g_):j[2Qfr!3LTaHdQE#)>?dlGng<<0`Jfg[Bi)]/N'8,Vc@r>BrgsDXV%eZCb>.MOl_"3#+p/BIn#n_'06XitK2I<B>R.Z,<2_`[n"A8E::5d0]GVX7:T3gS`ho_n;b."0k8De:Z_ks9g*c(2uBK3qj\kbT%l%9.RIIf@r&pWNFllSNPGImFUHi\++M&9n#':9M]!`X=p@1E`'4d<Km##+g2s\UI*75d#k>`rMWE5L:iOG4mY[mEke7l<=et(=]sF'%o:.</W;;5U4&U@;lUOB\Vt)oIoroO'DPiNMOfF38W8b6.boNd0fT3&Yl0_g/T;Lq'<0^ZGFOcGpKL>;k;Y@79<SZN0FGOi3;<d_;%gl>>slpla=DG".3oV<Rojd$q[!NFk8Wjol>XbZkR%#uW0G)0YirMZaT=L\7-gdYQiig@=g*TC1>qGH?4;*$0FU=4Qj,rjJnIT3.<%P^:oA._gg<&]JtJO/di@L)oo]au3+s]*I&rIT3geD(MI"IT2?!SF&kt_gYR!M-SU>WgeH:RTnotV!;AQW[cf0qgMKYg?GV5>*XP9%p57c*^/$D#ck642Fi+K4!1n8eDJ7!b`]:A^M4/<:s%cV(A[6KB5^6'TgbSP>c37p!<k&`N(KIuAleA?m`;06n`?!>pnR?",^$5bi%B,01us&:X"b5Hpq<9XQt]jgBl<o]2L4+-Ceklk(M@,8_,:dk]A^$PtlSY5hJ1+7M)$S!d3pd]Zs'rO9Nm!NSeJR&CUe9*FC<2%At%edH4d2cBI,HU0[DY'8>&8mh:Sl34S`D!DTY:=p=071%Vcl.7/f6%<;;G%Rd#rVBoK%Pti'*+eARFq]lJ&;@,QggEBede.9X8_;'a%ZL2>DG>tuBFC!46S"ag`hf7@aO`"LNTj*E*@Fek@S3u]0X*9bMki<_dmd8;N=;kGij;dFtN`GGC!^,f,oaPM9$WFe%01n3V*s(J5%Rp.@:Q^"Jd%Sts-j$-2ncc*6$Ur*j8'24H7bC#1O9Wb"uR=6gO^L"Xt[[:f%Rs#Rhoek/K5)AnFV]E-gDn"*[!H<AX>KpnT8N^PZ%Gj;t6AD+].2gPZ67nTnZ$[T/eFnGU$Jf4E^R93H,Z&\^j,BVljV=r9>eDS=lpZQS,-3c=dTmo4O^=%#n3,5mY!M1Qg?$!nAl!0cY%PUE$-j1M_=i\:(<_u7KVl(?6a4NS[#TcTcE^%LNhD^^@OZ)#q17N?UMkiOt05#,P)nREOf`HVmt\_$a2SdtG3dJm!1Q1toH?.;S4%-'bQa\pOrp%21;e(NGs@Sh:BSThW:j@5#>:18A%pXGk--S(T=R:u'&0P=c7e*.)O[c,K&CbG;PbH8_LaQb)V2m)b<:6hA.AAZ[E)%r899NOulCb$S**4i]-bD)aIc"`e9%a%21i'^90+p64H3QRA>J3gHBG'H9FCA3n&-Jm)8h?Ipkt*2e@U&hressmgY-ji*Al7I=e*(%m[CCVlh`EFI8=4fG5CXt:])RX9@\)r/YK*p<_,tVV^;g6QbI!o'?&8`HCS&W1o]_eR.'8VXr)V3W6A%1B5r>!8=8SShT[FS_87[l%ch?@bUQq\12])(t?[dqbT23[ZUZrTT-8m7Cjj?jL/VY<GWktg4-GuF5[I2%+6Qf-XP0YqSlJ(ltksol>da5!9h'.%8Hp`b<8Y5RM%M<0=%+1(0f5(.W-jn[gdX8?o'\SaG(b+sC#ZV@0J5HK2i_F`>ciBQsi)-PF*A1hZ*WAqM"Ar;mOF*[?#*:_+=@@f:@E<nSLd2j)e%)og0.bNRZl8WkCh0di'")H9EVKe%n)R=*%*f[S)W8tf#":9phc<Sc"$F/JCHd,[5t-d27NDN\Gcck&H+?bO*9iWJIViTf%frRTZ:%Y+GJl5O8(-^\Zh1l=W6Gk=WQD$DC\eIC4e)`QcrhmCeQRp&;)j^7gb4q59RUl\h+qL\nEUJ+ZS\B`H!$hYL.M<.F3'GPsCdPBR']%^gHDphfo4o4Fo03pNc`7rsf"PpV#RiO7;1QT@`S"'"f=dQhs+t%uQ2DkLbRl?NuI<i(?K6K-0qPkheVjZg3-=rrp/R^^knpo\]Vk%li5=]Gi\O)iYQh9\7,p/"gWVEH=$VW+8mN1rTdMT.oZ4YnoXSLrV4]jrQ+nC41h)Qg:b(B3P5<6HWBO,gq1>@N6fg':Y5?UqWZ=1%fDg!dq=iS&e^W+&g&:%"e^MRF].:R/g$qDTp\Q=^YKh%_dmHo*/]+2g4WWb\!gp$[DqW&*qVg0)rI:Bo?=2hjcZs=#iV!0_rp]#V%3*Ds4p'Nu<Y?,!&aPt+drRKBbg#_nmo@+KCC,TCfDsM?-GKlJb.[oS1lcYXP>tqN7`N_$2B/W6O:TiTi1d/BuJ,OD9G5LOsm.0E-%r^B&pqBm(#*cfQlp>P#n^TX95\sNtC#:2bS+)6@ukmt%"(pJ1+rTj2N4%#HbJ(I*L4(h?%GL-)7F]bL2/B@8qnuIEGq7.IoGs;,;%IfA6DYlq,IYlaS?NqFKSocK4eIkSjrl\kUTp&=o.I9R(_k6)6Y1sUr7>TK'J3iG:a'`L=lJo35X/2)JJ>Y4sST.O#+4f`tEdXSX\%.AS&C&6)9)Jfs\_\)]%0"_jV1j/@-aZDm<ucosVB;E4`QC.nR@@FUAo#_>2F]V,H:Gh4=-C+q1^8q:+ud.\HP%m4jTIGFsCqaA@A%gl&ZE'Tn?H'+O*'-j<NFWJ`qV)!EX1]"e:])27j+r!>I&S<[?0G`g4%(&Yuf*2gEa)!ET6e5Ug.bC/1JDu1fh?]Tc$bP8WH!CnJB%&EEVdM`qq*op9Sq5Te4,8G#!9YVXL+#qdo7\!$4u"UdjQciR,R'Q>[5Qo[J?F3i1LOqUXnNfSh(mt)6:jIRE/^](6[H:e6JZUd*S%(XF^H($X22&UYl1Ji%dW?j]%afN9fr;l:E6h:%:5aT9K0LS&s[!_)r7p[j!qoTsJp5gf'i`15;7B:-"<>bK]14H(J[?3-i3A;m>/%4O<WHU/]^`KFK4[e6q"_"<*VG'LI&YZ];ZqD9/PdkB./c[0XO0-7^O^pbCG-E3gNT?jY']7e'5$^lX+i$of5f+)cT!.d5f#Yf4Gj%I/M6aAERM3FI&4(<'3=_=[OZGV*NJWQjZlJ7U0'Jn7<l/[Fs4jY9C5-b<54`Gu$&a48WT?m]japQ>Cs`2Al%r]/J!A)!D$HbhjD5%C'Ye>=^92@Rb+5F\m*i6?k#s]'Fr>*n,h!b!lT]t]V&U3pA'j>o!f[J#@'j9O$Vj=cQVb:?smWS"D#7SYJriGC8N8\_K`FU\2?oK%GVu(`,6[BPP0o`MHI8$Q[![4IrV5.UM[7n5-f?CaB(V$ZjQ/S2Et."jH[9\u'd.feo(#:m'g_e'R/<C`1'@V#+`2>k'_feJ\GPc9%L21t0Qr;=qZ-iu*iIX@Z9TKpX#4YX&L-[30C^nI@rX[<.*qI1br5HY@SR#;hX7V>`MuQ)C$@t_MQD(;]#Y`Y/+BV#S)P6L&1+h0e%-jj7oCHtEj6%bq'Eh3B4(O.]S7nZ)W<Q.3@MFQfTTFo,;8KYH`&>cAKJ<6etm#pPk2'eqSYP%o=Wq%I?'>HD)l0&%5<B[.X`0Pf<%)b!s?!sRKg4S5%qV#,am&V2>VN?A7JN?D,p&P+l[mR^,]JHVDT;+$!R+](kK$VY:H&#C&cJHDga#]Bo$.pk;%*"GpMd!2sP_A*0(%KV&uaB`#^M`'l`Z6(0)2+@?l%\<QD[5)4QBkUD'M0c's>OVNca&G6KsJRB7D/2ZsPSPp"(<GE[R-ZiahUB`JMGYBsrT8/m-]g.t\%LK\QXJC_7&"9^It9Lu9iKs7P=/-<]3>a!J;A-<u1likC\%0kB.@JY9sOiMhNq#P@P:,i=8'gM%@R$?YA&B=km&0B:IK]`Luk5b:C%k$SdO,2eq_K&5So%d8K[JjCdY3=1QGBG29u9#b-Jn/gJJa>.geKJ9WU?qX#0+H`<4q$of<+^g5bp&kZ0WPjU_!.17E@16!uF;,=1%k7CibAMu^Q)SFqL6[&)'O7!$gOh]n]cSm]C`8S9R0pjo$K&UOT*Y6W]Y"o*'ZH.`Nl3jUHR&I_$'VI]1!J<-T"LNA=J?kk=a5[/N%UN-s/opYqI9QH4ic6n,ZA;%+;GU=2HiD/&-@<t1VE#R/Q(QKg="UARMK&c[[3T$]aAo5g@lji+C?@27MQ_&Q>!72d3\OSi,hhPh@%X17W]c^u:s?XF-ef`V8fBFop,j2CD*:=b@'n_ra#m'[QT4prn9n2m.GQ]#@E0CBp(icd'qk+G.O3%EOBhnd?$gGilD(F%J7i6H7N%jDKDB#t%%O@`0LXRp1utbUkAS`sT4":SpDYJ=&t!EeW5PP^\LVCQf!F*9R^n(LTPGat:Ejj;-l5o(^1k'dob<+>XClO2pk*9``MM%S1g8K2t,J8O,FAU>TEC4s%Ac)2/<(#'E8RVrsoc]*LN[pKU=(l]E'Dl3tl(Y6?n`D""pm.IsL]Oi:deboS9>og#$40ptkp3*r5K^%1[Z?.3R!p)e\;Z;p]]8,d&SRtoGC]#T[6JbZ/(L*r;"VAJpkU)oNd(qaZ5gRgdgcc^k*&D8f`"=gA$DJ./,_Ua*]]mPJL^arMI"c%2,&7&%7f./2aa:BNs4qf%0XX`4>?qZAoEII=XD4e`5<c#YbSlC7h/A*$?V>Z+VK;/RD9@Xa]D7L?NpYm!p#jUH.m7p-5#8p)J_%^%C0V/TJNdaSGc3qaBL?.TrqR"19"bZVE"s?3!*)BqU^oc8j$&%tHq_;S9m7*@J&%>B2^8n)*Xr?q@KKg>kaH$A3CQt*Jm\j:IJkYe%.7/[<G/.7R^VH'E.Z5B,r#d6rR-k"O&7@(Ui(&*.S:WKZ/G4EQh7uBb9->1I<4#QqObOc"Bc?3dn;YgK)]fpfZq"GY/fE;-T+\Vr%%F6*=,))dP]ZMf_'QdM%S.3%H&tfLS+9E/-:C''8N2-blVo&(*6J*qP6^k8%d]9VH^0MOWZ6Eh`BGE1-@r3V50PtF1aVUI0_k;<p%Z^F-OMEHZaer#qL3Ls4S3%5\#LEjn&(C_Ynf13nK/gpoF8C+s67uZpF6TS+D*ZV)uFHe0BoFV/]GWHpu78+Wl1,!*9/i4pVoSAND%^C_o,2MogtGp=$Oi4TpuEiOg1PD]+i4=1nkR?A"t4r?=6"Z&G",S"46OmigMV$3"--DFQBi.6=a+CJe)X]"tScr8A=R5f%C$kXol%B8S=]J.k!NEM#,,QV<T)/<9FnJ0)u;@s!A50Nb!)5luWl49B%\MEXWT:KlVNBE8mIfbMaV%?`:6.NE.J7Hume'B*OI!SRqbMC7b)%$:/&bHR(n@Q&(_5K>TO766B=.\H<?Eg(8i5au@UE5\M?h^kRY6oGe\X"9KhZd2@^W=/8=>F3-ceIoZ(KTG<Cei;*2kK'9Eo#>1m&%V@-5*&K65I+]VoLTb7Y?hEjH/H.D(UK1$9<(Ib:#&YVkM(M:5k0bk6\npk`F74F`E@_F%]a2Kj2%BBJCN1!DW[GscBkF8%7<0.0D%7.ATnQi[W;CN)NYp5!1Z^c<7V=(9h48f'\rJ-G$8?&$:Dln^CYNXMSb/bZ#,1om_m&2qo@jM^"%O16uDJZ%=N3bjAe&n%HM"j(b`%q#h=q(Kf!kO?/Nj\QPBo1d,='9TWRGa;cZ7L(M[lU]rQ.b[)H8&RPWu1(6%ni^nr&C*;/hMT?aT'g2f&;.6+H*fW[OW5+PgBu4h?%:Z@$0P'V\V()bJuF$PRQC5Ec1k^;M4^&PeV"FqHph$8MTE+3p'L69h*JJo1o6pDk5"0^GSqM8p?VXOoMbHOqG!BD8*Zk.>;$5/YH%$9X+^'KY,C89/,7*q:sQFC23Y`*T*Nen?HS8gN#kG>nVf]gFO^FBCq!IX8buN[:Pc'prM#E,p/U]#lD5Ys9-8GW)gMp]q-X6UG*m%k/')(`uq>fVX-nL&_@=hq@g*;^dA87`*/ht.5J<=)A6N7L(kZ`-]E#;6o9iB2j5K(K3&(VPhC-mnQIuil[_5>*_E!<WZpGR!:ke7%'P!^iY6&u<L?9d0)$$9/Fr4sf=2aS.EO[>7+;0Q`i3GJ0eedDs$"_18*`?sD*%VdR`]X@^i%u@R,LALgTJhF0Kd2VR61p%%&&pd7%QJV82_kAk25I]JaADA4\9N7IK$PT1rKNc9DjnaYJYgt4#G#'A4@K?%J3X^\!*u#]Q:P&VM"It[ab"/:=5163+`&Q0L!-,9"lDQ!`%g(FOB'^l5]j<S@,<HO7:mDm7dNW&u'!-!8na;>ZJ6V`7Vd+iWP.*r,RDaoU@*B\h1N<tQIKnPp8<C9Y=J8?I)$'&_<>T%D'W5J+>%6lIhXNJ4&0O]mdfOtn!@qjphhJK5)WRK=418^B+hUuVDk5*j0>i6blFA#oPZ$>3%LeTICdL\kg;,VM(='!mDqr=a.n!HLGB$WKYo%K_Q<Ra[g#.:ir?Q:-aj<Q2lJQGpja<&-Y1)C^?\*^]bF$)GNLb'Uj1kY^\bYJ>$;#lp1]40e"scn4N"g,%Th1dU0@VQN>s+MAU)d%&5O+`Ntf8u)[AVBJ:^s?oJ&g08j>iAWi)S=CKPi`9b<6iRrr.CZ'PMPlVE%]^-;'WjQMIjo0TdQcE8,5U3dT5a%+O)Or2,*U,Lp`%kC>9'V"oPYciT>hBbSe/,`h*t6R.e6+Na0o+A-EFOQSU=cn?u<Hh\q_ppmSr"IL04$&MKN-NbC2'GE5b&3_/'%Le&k;20V:c)UmU%N*^?&hNDWm6JjJf!<!30!lZkA39j@M,eOKTdg172aH;mJ:66cQNTN2]XR3S5-9a+"jK(QHqC!;F@A,AT1g9*#*NoXCN]0MMYPB.G%/!XiNIJ#'&Po*,95Eu2/Hb*13?SIM.m@5.PF>sQs'>Z\R^<SH+J-mSXZTDu>.KG(c+@ooCl^hf3jc_0K+ARLoG_A?$FHJtt+-<=-%JQi6c(!0%s\O.tuO\J9?:FPjSOHTe]!Cd^WJl(s0,D,D@IL`JmTf%(^!NJ+3#ag[9_V!ZK-o"j63?^.V:KsS;83<YQ&?$F0(g'7_%[6Vlj+cRW(=s8p5V<)M6-5iQa?Zc#U[4.qNK`cFaBGETF(nq&N%-umWLb:^9pV?b6aZL06JYV%PMP;:6<KLRLFrhpC0]Znt>NFLp%N/!)`5&(;#T`C;,+OVN(!;%e+"4?P98<M/h4GN2f8.>oS01^Z@FL8W2JWZ)_lfo!%0f(c8-b0U_=>lnE/.N4N"<n`K8HDCB7>^!W%_.5Ha]K\TTI?/pp\[V,`^*oJI3ap/P\=fmP9m"S`SGX?2a:tAHRmeAZ83D!^@c9?`b(nQe*E_DoWXq`9=@Rg9Sk*MPM]fghPo,/i%.\$^!Fj-u)W$P%A#oXU-VQCib73@m1E1U=GcNS"Gqp&"m^jZdMMd[_s4OcH2P:>RCm$kJ<&tqH'';Vsi(8sa0B;epa`M7D@cmo*Z%*$M!CE;Yn1s%<p+2q?_N4'?2(6'<]oQ/+SK)6?__BL(fF[*L%&B#eZ?0R"0nbW/UQ]43joA7'\jM;9DLSY`Z>%#'r741e!;$a?V#%h6Wd(m`!KuHY(64g*p\/.,0kE)q>(12R=bm(FQJ2MhRgG_3$4Mo,=$i-k.EW:H>Y]"K"FrqC:P/6RS`T]^sO]'Z$B92hZl'"SNt2%@f-NY"&p@=J]mjAEaX!m8>]:k6$Gc57-_l2L'[7Cr<k<9"Z)O?.[`1jd1(^bY:E-FO<jAkTF%:O$f)$3ho(qu)?<dS.(q>DK*eJ:%\2t?+'q.m*B+bchc[(>E!sg#72"Fef1akbaIe"(]INJ=e(A#8!'>c^/.f+gp/F]o\$r^@JQ(aiTJBfqB!Dn^YZVcr'!@32:e&?a.%.:][Q@UBOb^(??t#E->g>D&66TACF3lD$%*O-fq-K1@&WKdXBg+Ll8\=8EIH!<JWb(hBCYaaTMP!ZD\RotHP0SjZ/7!8Ybi",+<i%\\Ru_%1K)=5]lfXNiK2e=pd&n[R07XO.ScL&ujAo9p8%j#kNV`8J.aWQMe$46]3\GTJ::73^?,=M@$6"0Gk^^4Jmq-5P^$W*8K3/%n']d]dtS)_5("n9:4VbSI*;j+GQH1L>sLZNH6HejKLu%(q.'dAUSMZ$1@:-QbmJi\hB*ZVBBa?T^mM27k[Vn>jH?.N5_KDP,),'7%58"Y$@c!GkLWVBE]B79SflH8uC7%0e4l$]T<kE@UdSZ9=3G;iX=>E6T"P6'daTD+O7u8e9Wc.I2-_H8^Xt3;=McXACat2r;<o\gP%k-FQGFt7qS(?A$CZGHhkdON!Ca=Zm9?'j&j$@F<_Hq>4@=IXER#+]4pDj2BDPQM:Z3,oRD'IjM(!1%G/UuJ+%!J/d\/34XQ;t[CB%`[..r<6:eP;clAM4QV3;$qWaj,:/HHEs^(9.2g6&]6SCSELor"HjW5nN*%Ym.P]@n7mQ>')Ijl>+A!K6`6)9EX<+4L#gs-6OGCF*%0D%hcN(ea*CSF,U$DS4/bQ2PmLm/.EN8_"\Iep(/<060LX9CKaj=t>9^&ru732M?`pGid%P2$ENnhBkA5rrs30p[jA'8n,<=J/1r%^kAsJLV^9EO%L@"Fole$`dl<g51RY'bX_2;%8>Ll!!Mi35eJg@iE[qf#F,f_X,OnKTjbTr+r:Fa,:Z4kPg8;SETU\K=u?>CS^W*1%pSF"!*le$_(grIC_`VDEUrG!2%RCL*MkQ_`TZD2m5U-(Vn/^F&!BnS7U?X=P5iIa/J?ThH7aRu[XYE]L;[gNs!9]]W:s1tV!?&$`%OcKhM8$<FT/B"cfYKtEKfb%=?V%BDh`5j]lF?(/4O:Gqk!G-JraN+'0$#bZsimnA;eE/%NUI\J:.@iST4/_[.&7rDM<DKn+,uM<D%m]AU10Cg-+Ot+S#P/uj9O-P0T<W-5<Ijjo"PhjI58:EPU1VZ"Y,ghbNk0Q^!=5uK*[JB]TqgPbbEnk3ebOb]BbKG@@mH(m),]Ffb%;G2Vq']BR"j@)<>5lJP5Jcm"51XDsIVWhd9Lh.6L`em;/WC^Li&[QuTq>s:KQO`Aj&!X@2P:@4_V.rn7'J_qlGR#G>WJW#u!X#/(%R'r[IO6-N(0Dmmn?c)dGW[P:O5OC,9D'k%t%QJ1M#5>9q>aKRAs+e"Hlb&><Ip5E'?]4/,MAS&1SF\4A%0(ZXbOrr!l>SqD9#((\%.#_(r*=W6sLTK#,g*^f[hS(9X:l*4u2Ot'4V0=PRnq;BTrB;\['ZSIEqj(30,>^.8?SiK[PI=30n1F`q8A=:2#shLc9L2L".:q>&%'@HneOE0eeH_'4X%mZMpSd^oMlk_>O*$?QnO^9"<-F#apqsHs+#[U4P(I)Qq+-2[mj1idlO=,%ZoJ]=fqn7Rn?)fB$0#uons1`Y8%R'932*i*Sr$V2t1-o$8+9h9+=-U7^PT=1]6QAou9"(`gpP=P`e-OgF[Z2pd8.+D4I.2#26BGWD]@h_hM^b#TpST,AE^VKOdoNe#$%JZ4*MCKDZmI$"NB+P1lM0c.n6=LsI$(\Wj[d:)Ko!4N"M7SA9a<<L_50aM6g>6:K[B/q(G$c!I5#:)Pa</>M$Pi\RE8d%T@P-)XW%Gq;]mFSA]g9XE1`)RcsCMLcCCVtLEqDOO.';:n\RD*p9gP>'<L^dJ`l9I5bhN@+_,5(mm*gAG!7nsRn'NhogeU%!]]3=0)A9/;Jo%E^[s@$OSrYm*OfJXF8OI-Rb`XPQG:14(Yb.5g[u.nm12,.8qi41-2]X'OZ2\(`3HlJIsran5TKOQ.!Rs7$#36BB'P7FcR(MBTRQk%&*$ku`d'eVh=4KCY?1X?&@jB"Q`cp`J)+I;p+Q?E+-!_Ll^LN6?gW1f$i`8EhlG<8eg=NsLE;.,K1nZSUM<,HH-PE."Lb"c?%boI%<+-X-][M%M^]JE5qlnm?&\KBmAI?M`<cEtIM@(&FlBhin%7)2VZ9&3b$=,oa)2us@KFfF3L7k`-]SQoQr"/>u5QQr09aVC<!m-OF%%:VN/?UQ"Q9#J100WL-F4CoSOFBenC!I$gH=/VW:WQ-^7$@*A;coZk&Klp@@)H'HW"BM(%S5HI5J6=Z"UBR=lq&%^N&F?l/WK<@'%Ld2h,"8%8mkrD$ULH`cB8*CVB;&^JX@7+&nVWT0Sn:>;-^]<RQcbg_O"A&rH,S8I/4D!D,^qf^J!Q6E?$UG2$9q!\(;?5c&"6Od'%PQ;7&)4ap;+X*]^,D;MPdI'K<"4>0+Hoh&t0`WZFW?k@doSHIX5)l]nWLrZ)U9ueY`PcF-+r8^!,"Q,4R"KpVY8X[]]P<#M+j#oP%.kM==Plj0U89HNj$CHn7ENC??:FYS*J1r<uTj\"L.l!3WFteqn#n`sei08caX!+>*3R8$0JpC,<2_dBnD_=X^Xf-sk[R0.$!r\3=%:1.@d1+N?"S,uP8;JBGp5YJ(\)5&&W8M@u<)kmH>WlLn,D2m\F>ceeS;$@2e!u&&mOK)@qRRrh6O;;_tMF?Se(AO0u;'ho!(JNMC%HLVl-JYaqL/kn,@+#,R,.2?XR$,_IhesB,s>+Lo7pTd23&(iB@*JKZX('fXMFqG9CplR<G#`O:L!^Vg#BU="Y+X>u]"I"WFN1,-'%b^cW59*?,4Xr9J8H@d"]jU7eg:-;G$@j,`h@3M<k/VY`a!n&>Bbnlo5!bOY8q/l0eX?Hb"'Z/:+kXT6*52[i/nj(nTi&il"l9k%t%qWM"/W[o>P79X+jQ-Q)V2p"u0Zb?4["K8Pfg)Z-Z,kmc:b7PtW1M1M54%ge_VA1Kg!Fo+;P_el^LukV_C_;LpiZ]!4=UQ*>;]q05%>V(?Fn2EH4T1eo5!3%C)Ftd8F1+@):S%`2VSig"tdbIY,,5dN,U&q%M:.Ug6Xcp<uCLgpQmfl9\2he,dE2X(_gE?u37Mqm(<AQYq%YgRMfG6&TiOXM'uBH^3nU1/\JJb]dpb5de.#!ON[+a/R#UrGPN,W,+T_&AF)"-(DdT!bq9(=H\Z=c*Q7:VWk[4_ZVkU.&Q,&glj+%X8ip-;0eN9#R&k@E^9CL'r$W1F+Fr.`$1m@&[S5eW=pg;eN2&-?s"k3PS0_F7Tpu_-B+3GSma;b)A2gG,s4QJTa::3I`um81aN_J%:r+RI#1ka6Sc`Wf3Q:1q&aZJ(lrFaLgS%_WA/s.C)&PL\%EBSS"Tc?E*.pNQV%?9Rda')u)1IF\MnKY/?ps\.A+V,1`)%_BJCpM#%6(I5^1g<C)+pCl5&Z/r^,B,?:Dk]D56o"P:nB>=($*L0FBq\7DNMs"6e6CClS.)4u.C1GF4h%VHF_eu)Yob=[1^/4tn7iC\2#T4%%Ve+'nVV,etQ28^e$#$_$(8t=o)2/Pkj/iS3Q$Np7:+Is@8't>SN=r725bar"XmGQi6a<B/idg2Hk(6jHm/iPC4;=iRZuuKfN>42S%&sgH2MV0qf^n$!\RP4G5A@QPKR0K$oW-*=69-`g0$o.->)>5RCU/1&nC0pR"qC)'`Alc[rSIY<.BsrX'6A(q<;nFm4q-)rHV-NUq%"4Etc;<Zn_%Lhe[0^:>/-b_cU8b@iQM(GW&Gr/5s"WH\/beP>ti/sPG;Rb#/0sKQ'7Jfmuj^#u)P6X$u#0V)$0Ehe&]#6H8_u'a&%QI[Xm_NUC+b.o]>cF>XY%@DE7#Xb@RMc7NYF1?EUK#VT*JN8;^<YT6+J=-Q^:LIB0UYZp/\3V0d]MMdY8"kQ#;cJ]jfO<=7>>FN(%"h#UI`Yoh/:*mhV8-Bg4`'B9+:m.^t_ij7p0OLRip[-@J@G_4"`+T:2&[a$oe;^Df0TE;^nSRWpML$Mc<EM\G@jR\Q&qqUK>mBNA%p&G@4Ao<;Ri@N,e_j:M$%c.V4-m1/VEDh?`WJ37"<En1>dM5e3M`_'T_'<`$OQB5og9cVi/&[Z30C&gu\FG,2c_9*O`I7fU/CpFt%o7aCQ?U]a*(KhNWE1IEL7i7>KSl,]:Giaii-rn#+-&,iA`HiA7OVAY`m@isg1E`MVBjOMa,2i=.:iXCd3B%?i+u_,oDq&"`I$nWs%W5tl2@d%,PKMB0;"A.Kl62F=5:nI8`O?=n=^!]_[9u>rEM?I<4NE*m;Gf@?1?9DLM,pF%PgaX:0.*Tg&+>uPQI0qa6g)Qs>0l!D"%p6#6pSg^F*P8^:LM/B/m(!Me%,KNr8jFH`"JJ(>GSc`CjSJ(U/W+=qb29K*p*nQEd6pYQH9lg^+80r)7DiRFO5uJiE")_F>J/kTm%BJ^GAmE-*0Zpe'XLs3D;<6q#/!IAo5bcic+"o>AEL^4("c4uDF5%IO7dIjIE?^\sE7V5CsRTb!Q/J@lnZq>k?/:.,f1"-3;CZskY%Q<!8A3^QGG)7IP]_-C?BA:Wob1'8_5\Y5?,aAH?m?n/Ar(rf>7UP]qNY<7_mL)H-FaAA\9*=q@C'$MoWdmfbRG.-6Q5n/-2<<r]?%9;+NPC+c>\gM9%mO+JcN4bbtFd]+>/[Lf6*CIH]=E+'551gW.q^:K+;*oki$e1O,4!K>XK6>_ke;#-4c8lT.cM2[SE6mS(I'8'<-%BM!`ub.JThLF<dJjGQ:c/F8+<S;u)&@>2fl?Q(7FLRn^fP^e+14OV[^"k^n05g%H$1glGk'oP7h!KnB-H+n6gN2m)Uhdb*tl)-Yi%.[L0Bq`rmQg.D(5h:`uZ<\4S%9k;-)>>fMrM<^VM1Lq$m7H*"k4Y1a&FN:JbO#960!kDje"NI\D"Qj-a$RdYkU:tF*"9Kaq-tGU>%<A0Rloc,0J`EP+Y&EM$%$Fj-<O\I<6%o4\"3JD'q\1fG]&s*Ct)!,8#;?l5/&'Vc`fE;@Db-s!^d'Ht9cn(\$0ra8JA<`W]#D[;!%9_oM=ph$A>\:O1m!CB$Cb=9L'i7__Z^:1sAAb)8Z!2[(d,^IF$4n&p@nNE_j5Qk[Mi6)ntrCBK&`K\Bj84_daA!/MY(&5j0ZUA3"%,uNt^HK])1`mS@MiD.srUDUD6_Z`3OiVXHP*9bT"[[Zc'7psj(!khA9&4&nnE[X23R2<GSO*M*-N2@?68("C@HYK.R#+Kpm`[S)A%Dd3QH9UQ\+$q)d(BcK]J-bYW(K;%hUX3eSX,&Veg;DUi0/YU9)*URP%33+m/$X,Se_%7e7hmhkr-]J46OTqP-*=@cS.GW.bO"aso%NIj91^)<ZEkCT4(\j5MJO6SV-#Z?d?+#P5XGLks><N1E8F99BqE<Td43iAkHC^9?,WEJ@W*qPu&>UY/sEf5\I<X.dZ8=<I]B68sT%>,E6N>ErB,V\6.qq)7AcD0'BUqOeH)*UR1l`pPZ5"I^4<c[h["I3dH.Nf_>G2X$f<0G1H:lN.KC`>fko-"I"_ckOnH@Ch_Y$#Qld%USG3i;Nj?p09%S#:R8?sXpN&u.FBC"V7Z"^]LBq`nO=k#`>e5o2*RCPEpbXi_5%"lPA^]*A<1t<C"*?3)4W@9)fF.G'*!/.OJB4\%0H\pNi]T!2bRnB-'TS0r5[GQ]YVEC2,k!A&HkZ)_\d]U1UsN-bZ3)m"$ZmYamWO`b.ONm]c=2,rd%:lD,41bn1(Z_oAh[HSTI7I1%Bm/35N#E(P6,Xp[FI>]';3Na!JFHS*"0,(Rpc/]17g?nZ73LnBVj97;X.E><E-?L(S6DmH1E,jMeOC++AZ;"7.]GuO/JR*DT.3/P%]_=6:gP0"-;@kKjp,rN<fUe)O;k^MepHW-?#nA$1i1f\&*2%"b@B=kpR`Xh9JcnCRT3>`%GF04Xf."#O72A$#-%1%!'BXHZ9#!q`%-A*J7RH_uHX_%lR0HUlm_Dg[E]oM`Sdaqh;BVL7X=F@5)i7TlX5^j93=+pqI7tX>oRfuj%89uoJG.V<NMs",f"H_&?8-FOpAbKB&%'nmdP/O!)8/]&_G8h_BIJf``_j?/2#TZlc<OPp?5W<S;.9I9hX6>_BpME;K3lX#%IGXbegbn6f*hFM"[TP5RR#9=DYTeXh$L.F/g%$)@Xg^YqId?KH_l7XKf[('7W_4CEE4+VD27+.Zb.1QaRr"8WHY._lZGr?d7f&L;WQ/jd0;bi:Ti"X?^NP6&!\an/tCSm[rnJ]s6s%0Dum%++,#h-T&\n*m_@9J7V4TGGS,J<DnPim4BX"W[M!3OJ<&9Vpefo9V8Z*'HN#2OOB7;%+O8Y>nG#`Fa,kLUaA_kR^@7N(MY]7%[',3HSKYJ$JMCY@OGfUjlZq(,M3K@%`4Q9M$d;M6`d7]+7EA-TERs64`YXbJABjI3?dVKA`MCaT_9<EbQ%3j0$KLui\7,q9;iGV4%j?/1[Cf=e0e8P^7AGjijY^:p*T2>_.<mGD1(WOadkkIK+YhDG-.:H%,L4Peo87FS5dQXV=S?c"Hd*S'+SjAm$m^\.h5c6V>qI?I\%.)PWE6sCdb`FJ@iB,Dj#2F#8FkJo*L*!MLgd[l$Q8*8&mfsPl0NMV?811On6FZWbqBrDpp#Xh"N+.IN)Dp/Ao\3A=h6TAmeV7pQp%\oEp/G-F@QBg!K-H%$TEN/=?)VnerU+cM@bOC=_A)^0J:H(fA*L1o`m8231ipFPnE'JhpL(&7E#,d"7H.*GC\hAoL7bQ)3^83$s'%r>9*49Z60GBb6RT=S+DbOIBPh,7\OC+qt7C6g`Amhha"OR4W,T`_g3p'ZQ,U)-J]sRWUD6N+<935fGj@\Oe]'K";E=Z'[Kk3c(0;%k@0h_BZnKCdjNJ(ic:-S*Fp\HB;huMQA3(H8;5bjRb]k&casT>Lo;$t!\#'To+T?JjOgb8X,=u@Yi#XMP&\[9I&.?6dN)3p9>n/G%PXOg-!!F`E85-8l`b[%KGn(k1JalnJ(sPQI^ge$*eEDj^SP78Cf=l>0M&8T::LrPJ2bQ$VPu3`AM_u?Z7?Go@;3kT\QU"^t6Nghh%I5PE`VrqP2-@m^_7G,'+JRG9-MI3_OKJ@=B0X>Nf1a:PWV9)nneJPa%:>`&VACr)^q5FW`mTLl\g9=!gh3=FY:<$^kZtnn3Ubk,c%Z"jrm,2q7`"CdMDAp>)#/6`?MDDXXk;[VaaAg3hRJff'h&SJu%2bZL#_Arc2O9dCM:a%tLQ$#,4f0G/TKdqWj4QTV,cr5bGR-LK&%'#\?8F<-e@jOb:6JqtY/6b[XM.Y9u?p1/2Ad4ft7S#7IUbaUd(Ct>$#oj^UlpJR1T`#&`4R3'e*<!=^(_,^d($i@6M@\ekQ-U8)C%NDCIQ)IbJ'%:XXZmtNlPl<o7YZo*In=D#I9bWI7^Y6eWsLQl:c+,_uteKusdCHUDM+E4P3"gM0n!0*UY.g$HDhSkS.N3)G6"p!fH%77L".G\AJAUKDX^;&<?c&8NOnqTH15$[1<fRE)$UG-5MX(8?bF*(<V@34GZ:=RAoIin:,g-m2M05dB1f4R&=o9m@.8h4[<IKP*qR%"T:?n]aZ\AHPG/"XWmXIHe@/%%hM%VCWqhZi0FQO2@Y=m&V>7t>=GN:#SLP[kEBV^#d5Kh:1bOK!j6"'aO;f2LgcgCLXh7:Ze>);%Rti,#;Vb$l*J+?&(<3n1S9Ti947aHG+e\p6DB<pg%rKU_aj&kAE>VGCWHed>4e&QDWHm"E==Ir!4V=&?,>["*?IJh7I7doM_\h5q%&.=j3pmT\p:?mb^Z(of2"A,3l]9NNGm7s3;"/e,[<F?\-'O%>qCd%(Rc6='XY@2@!'kX$Ng]m'n4caCOd:fO,4c`NXfr"+u(5<A@%e[!kRBok*5h1_91^p-#.7`s#ODgHEE4c8U,4S!;'$>/JK$KCUhb0HciLXnpQfm0r?.[H#a\:jK8Y%&.,ka\"o*XIt#8*B<pgie&2%h"P%a[4\.I-1#?)%t*\i2U>ejICh-';66:nM$Y(00Uch"LU-L_UmO:\o(Y;>,WdXgV!L2F)8U!loB6;3aA8"jLTo/"j,c?N!@qca%X[h&i1g(^KWfb@nH`<jBA$+0?"(>=rI2!XR=S'sOkKt'E=Llq-*mhOuSPnmS6$[/$1T>YE"G0'.l8_NL[sB^(k0XbsX$q>sV%bcK%-K<N;_BCQhF/@AKU&naJfHrJ:cr=/UK2V=),.#&hX=6$Q"khD<1lRri1mU_XU!,VnGW_Ob7oUF2(+]lO#/8@H,HdQS^"X,SV4gC7%X;sT7;tGfnH#^PgTOe5"QSP"5U_s13@"\3<RRcG7Cc8%[c(j<XMh!35%mcfXh:+R("C_6X-9%"4L"eEio,O&_#-hW/oRiJE=mqU#%bp.lMC_f3uqF/]ij2BH[k/Fg9\)lT$l2nUT:1rrb]O==.;^@'DBqQp16XX<NfVrbLlemEWR96pg<s:uMH.`o"d=!+1j],:>_C5n$%1Rb:^O"U!2?Fk(dJYk?B<pjsb"LqH!qMH0:"lYs'eVT!Jk<*>3W`i1F059d62>T/t7)[p(4h>%BAG2G64g&'G2Dn?5mVrl__FbpZ%as'AKbClj8%mg'gSYU:%hnEN(0iYYQ&=qcs$MRdr>e&qu:#R.QDf&XWgS;jpQJ%_<4^+b%2.3N?UE*gKduQUB\@Gjt%S.ZLO1^^t%'9=fRl-WJ?8*B;CB;qlcdoQ[k=\3-L;7nBcH.kHa1rd>,EmFp/Q$Y.1<:0c=@[`TS';3K2">S#7LgKE,**^1G)EKA'6\tAgaV1>!%49PhBRDsr-#`P!A4beD"maUVIKEiu4[td5*GW-5dm1Cb.G5g]WEC"U#Sc_[Op<l4+gXDc+[Rq<8@%)sk4Unu=O!\\UNOiqe(8Wfk%&qYrVmh-Dug'0>(SFC?&L<B4'_i;PY0&*.R@CFg>`,CO^:t8k^7r!g)QH#%Y0HnPRofK/,F+Mp0M0%ap3_(D]/;@;WO]?IN_e6X'%k>m/!Ra:J"fNMQS<T4]:A9$i:Q0f_K:pJ%W'9e6_BfD8.a4%C2B*%>(4Tqe3WhJs(Te4Q_W]d(@Ri6("p5&X6/Yo)74_!Fm2pY@K%*`8`?+B,X;![&1HrLflJI8bf<MY::GU0jdJ<4(fuVMk/<D^Io"cJ36`SmHtB+X8)9?Dt)^aso50'ZOUSWqL,T!h1&D=g#`'LH=r]%;ia:MRh8dUW,IiXbP"KB7*L,02_4!u%_u'2&Ujks9dmrc4[LB-FU29]8(bg*UDfh/PK$Ni8CW='m8-8tAjgdLU:gEMW"fBoe>^mV%]+iUGodp66lrh!+%N$PL+N!+V*C.>h5VfY<jOQCE0KWFWra^BbDbCPpkT#3P3:GFg06T?b>c&R+QiLmW4="`sC3\>,'PYmY:r]2$%<WFm*]Mut1Ck3'?2R^+02Q`/?BD<YS,;m]c'O//@c]:a+-HAjaBonVJ%M0Kk1XDI/0?bY/DC[-Of,ED;k"I`JASl%O`"Ys*Y\FTX%U_)OD=G`aD:0ON-o@n];EMU2KR?]7*,ncRoCL)]rFi*:;,-Lkk'hdJe-6aa;K[B!n9!/G.;qKgf=CB)TAp34&7udqS`N_[PHR`9\%+=1k7#DR?aNh"0+NC:L!;2B")SsH3mc^%,Nm8o+9`i<YI.]Wr:ZXIOrKubhLTKl[F&)`KQ)0E>koL3+*BZ53'81A!RP*&`i6bICL%6#]/1mXPf+#ol"/XCqAaO/:qt[cIk&EZ?%:V#A+8&j^mt1`/-rM#GTlRrkuLH>Z]3^eu\%5t6kr5i`:r?/=E?nNJ&K48acVSd[#*%9N/4=R?D/DdCj*q-ij-PrH_b<I9>kf=hg`M#niaWAIg`K'X6M/k].FqG;G[#g5SOV@tsS0Z.*?%W5V2>:oqW9kLQKG6tTQ&05ZHK%LIk9c)5'bt/Ri=&I>19fF?*rHbn"CX9;IV&WHcEb1X_O1Um);KY]6EDX,ITM>:*gN,Lt]:49)@hYM#<h3Ke`@IYYJXO[T-I**8+G%+J8`Ad"9')Lr!n[,1K=>L6MhS]unRT4<s1XXm$?X=0'EbN6I+I#^:?2n7K5rDJbtk)HnfjQ5_gT</Gao(#O4$2#@J_Ru//@C^"%]%Q27)oPf*NFS`&,Tf-7%:IjU6GiC:O!DKMS4-i8o:U00SmgBU]`Us@6%oob>0"]hcU+.0N)+dR0K1FAC;Vjg!fj/)ufX-,NjD7$FJ%h$@/'2GRnNNNl\oirb`-V>]nCEV,iBqDqaWh7JR@3bk?o"e7#^&N!1oY67@cA26N6'lg)8mg"c+@6J>rpXj4t>0U)ZcU[!)4eXc8%G!gS,4R!NJ3lT5kS)0HJ(og96O"*PO)I(H;Y3q`tKqPYL9>QosI\$!`)2IL%<^]@9Gg0n:.Kl)dVA\>b&1pM(C,]m`nOu;^=&;Ob%<>;)[O"raM3G%0@<!!I&6$V)Ib-Q7U!_QAC#Z:ldj*`ihEu"Zu-dBHgBfUEDO-YLrhtp*qAgR+J@KU;)fAM5-S$V]\@k:)`e_$8j%.OuJU^="qgImf)(4)cU,hrB9<L9Xd?\+p#*C?qkTQG;&R&WK*(fS;4P'jtpAo$-:'@C$PV#OM59CiR02S##CPeunJWCbS1K^1IR*%mSM),2m"m7*oL35C;YIqjP:BiilHBh&Kf!B;37/uKn7RN<%-1>dA\G*&IR"bb\rr)G%h%;rPTkabSp]Y-D^S?:#Fj%kQIXW%uA)W%KU*]9+(4KZ8]qAf<(N_8D@=0'KX2`;OIL>YD7W`%)$g:ciA<u:Ieom1Ch<^eoL+54go@P^4,hmqFs&HmCbAJ!mOb;NS`3a1BO08.%J,!;BgNVkd5FBKj5iCG3Y12e@g;fN$Y&$Oc?h[f6Xf57chWBk\4amZ7XZu5Bpa'H69tlaNG$%q<U"^2U@$/EYF;_b79ATdS<urKF%DZdkEN/LJ9-Y/R(g;[('Bni'8=E[>=%)[.gU.b4r7R&6NTAVTE42XiVe]Y=hL;Liu]?=uB:(=/AG'EXoMqO:SH&(L^YN+[#Du!^o%;SN$Hb0-a"S&1*`3F+mL:Yngn29s-q+Wc_.X!d],$*92Iq%$hM+>R(AT-&lmKZtuZ!-2f];PU=l'u8dU+Lo%fh]G:tbS@-IO(Dm1%ak?)[osA1YD)kY%F91&dBj1c@JI7plNKHT<P.ZHqCPOc1.EN!`hX8`;:\DZ!IfeI/+H(8NDE05@):7F5h#5[AO8b"Tjr'iS`6!b8%n4opBHm!SY9@)C_A^?o8aCZ9RCA,-k[Y6^H&n8&6VT^tSh<2V%p.!,d8qbi^[B$4Q/A!\YX!IfK-ueHU$ks-E9.LM)hJSIN%&hA9%df"EGQrj=X_]=[JG<Lh9?O6'Cg7nCen=F(s7ob($e5Fl\^VGE6(#S3*2WeGWMSIK1THt\^/bn?s!:KjSP'C]^gc;"YTmP**r,dO"%;giom7qjlc+(dL2=oLmg(kZ::%CebYZ6;t>,BAb-'3GJ#HI3>k`!=!2e8NTh2R_50+obW&`4.8=nVH>icPERteUnNE:I!]:NT6SF%'dIH7_(PqH31p25WE5eB(\YRnWg#'&cMfUQbZg4.g#-iO<$g3am_Ttgai,nB0\'q*4;;iG\i1#[`t*[pmPY!?ldb:U.q#WUQi$FY%cS9Km_q(Xj>*-`4*IIrB:Pi,O)=;F&LjI4[2_ZftlLE8P'2t]+C=&X;?!C+l;Q:qVORJ&1Z7D6*&/MW530W,-9<7#"$B#='r8++a%2$&jRSH`H:#r;I5pY?Hc(u%.'o%41X]bnRpNco4&;J&esh0H`W(&AoOZ)!q=_3k;MP4tVEg-+XHKGoAP^JdmQkGMp?XnD=!F6C"k%h3+l/B>`k&7hb=lkdrlJ7Sagq.IG[r,ZZ4PpqL[qSE`m/h)H\9*c?SlVaI"8cYj?u/0C58^]j*=6FeQe_pIt)kBlHHDgWF%DmVk4%\O_NhO"FdH;Lb-@fsHPHYq,-Vo;PllP(tLu.A:R-d[FDlhER=f:"XMplOKjh3?JlXfE5:0og%ldX:)_lKT5P,,)QP7Q$A+MoKgM/%Tr=f!UTJb'*Hdqu#2B4XW2k4t_/PuD<ER@TIC8YNkWj6^@Vscc+IZGW]_$]@i-/OD^`iWqlLXs)gLHNE26uI7Z$R"6+TLB)[*9#7%m(BPUN_L$T:52_Fkrin2(!/;'#c(IE7Fja>%Y-VE:SV?R3"amST.%Fp/:(_@eTA+8W>d@f:B4Qum*e:e&6.gE/O^4'7FfM<P3VG'%.ijL^M@/me`sp7SU.A1rA0CD"-]XKbr_!EmT#YWi77rHLg@q,=6KZZ>"CZj<&+h6Mb6FnH3Jgn,cE=h@MgEAInGtdbWH1*NkaE4F%\%N?C]#1&@'+lM/Vpk?_V(0WXaSV@WCWgWia=_mWpuYMe&_`F/JNl!Un8YE%FXoj)$`)2NmAA6XKA5l*ojuP2)sArNLZYi9VN\Ch%r-`K./5K:Q5/eWF2<,mDDJK2OH4AS\YtacB/-JYTBsu>Hb=rAm,kGSa=gc)[Me"9!h?p_9##,uEXk[GHXWER`?;[2e*Hjp3Fno>-%br`idJ`ID*Cm<tg7G0[8RpYqW<h,!VW$brqV(T8/pR*O\`7A3%#[jW7O]>qI!GXK*I.[20WY]H_f!8YnQUH$8KWmXp&EM?@:aDL6%MrhG>ojg'cZ-ZpjO%\B8gVc`j3p)*3Je!'3]c$Hm<cCd<Nab=,jgW0AcW0tk?>\&tH0km#%sHi;JDsROjY"B=,h7!s#]`dh^>>N:%9Qoaa#qdR2oA:h_pfJMncaq20a]S^0<,F,26Kg]Qa27adomV[1(bbh=N.`4+J0#_'3abO#ocXRT(g+170WlBZapP8ij@`i0Jr6Io%4?hpJYmGt''e?[Mr%!Eu3/dK6Njs5aD*KoLo^:Y>_U9],LRi.:n^s'SflK#TesGUO)s63#SU\u/rG<g5o(Y'K+bjnNZHrD*$Lj;r%gs5f6^,RG[;7GM'hC3[!9K318P_9Spr3;5ub)S.`:7_'I"\8"@P6'R&EK+38RU"nmKVYdhk,lQ!@DE[/T<<LKA$(T-1Z/eB?E#,\%^TGl!c$iT9?'u%3^JXl9kkSf)(F/kRYhp!ImkXKHXqii@<#n=!)da_eMM0Z$BVh12>M*k-XNr0cQeQG7l$)C%S,Ie$44N-3/jmFh%L^ba/NG=B`[\n:$(Dc]`2$2c9'u+Wch9tXKTVW*Rg$]k*qgASFKbV$%pM%AY;_SrrFp#H\0N`ZW)Xp2?#]ZK'^"pB^"RQC5mqq-T%!QPQiEd*m"`O@=+/'EJ'dt`Rq$oeI9O@Y0HAdTbF*NLp5a0)mpi7+*:hA%>*Q<9EsQi*EHG0PP5"?7ZEAet;p_M$f#Zf1LJ[g3pJ%f@Z8nLE!<e@*VG*drNb;Im.Y(jFn%5ThtR5gkJ<X0,oqiVbfjIEPi`QClua3=OXq;AoKluC";UOZq+!$FsmnU</nh4350ApR?)T;%.>$)>,E=LCQ/QCG*$_R8N%ZE9@;>$k@Dj87N3JchnH6@]p^K&)c@8La1uc0KoK-U%0lNgTKj!q7s'4WDGXp*Qq`T\r[:gDZpgjdb%.umV'$jIShecmT__Y^ng`\QP@;*u5@1?)DX;^`)sCR.K&>B,I:LV1.@3*qLWYbI]d!Fa!1;&A:X2rdP^LTobdNB!2+DH?[0kMPlO%IiIpZr4:r\=RcSVX^o.$^X<E3\;IJ3Kd#A"L%f7(VBNEomMoasB5(!i;%uQ1:FWSFpqd#j(.)R=+]Xb1(g"N0FG*Il_<g^B%KbKY%e4ulm6]\oDP<0R]$&-?HcL/`S#h>?K%;Jnldh=E4_dMbV:)p_DXXLGR\[^K=?V(dpn\=#W!1H>kP.M=iENZF8%uJ?jE`UCU,IN#.%Pe`Xu3!5>,\;SThYTSujj>Rp;aPuNIFka:K:tV#'H+`4sYBH`r;$^F#\3LFN-8!R:;%<tfO*>Amgg#PBoB*@$3cspM-d,A[=MN'/%4b4GL9<OQj(#NNfBtO'.*0>lpi6Dp[JIRfgn`![T=knLhXESEViCQ<"'ApU[JX;`-;<2=h;u.bM&YOjIT^>u'k_k_.4R!XW.Nm93%#\=*%I^h(,Z=s^(J^q]P%loJ1UF]gd%l$C_aR`0rYkt-p%;WGLpg_V*X656O)!)Rfh;,am06dH&AuYNJ;f,GZAS5WF^.MA-K[4GU%HPX;%fCm$7G/[q?+^ijD44osp"Xmng9P4f'*2\PiXPr1qTW,"h8'h^lAZ_@%bup_lNoqT;dRut6ZsDU?TPSQMP<mX@G0&:P]Pc!*%,eb[P1C`VL#M)p-A:V3gP^"m!pY:b\jf?f^:XIs('2K`#9DL/3$&*Qd$enr544L\l^fY+.2WTFI4h/X0NH4_lOS*_Q1ZoNr-R(bZ%d36/-jg?Uu#2^OY>'T>MLUms%g&>`I33$e%Q^5SBE7!Zn\crC;m_F4"4,D`L8:MRQT_uA8L+G,Kq5\UI2pS[8#o;^K3=*^PNtdES%duVHK7(/Jc8[+=8+MIk%XGC,_K]H3@:o:PYM.,A]L6_ehSKL'=m*C$i!Co&3S]1,879o=_rGbK]V-LHiNZ)@CNi&OtC?=QF.+AWA%(R,g,]Z!Lg0J4ok[hUqsQueIi(HT5HlN_P)o#*"[lhi8),'O66GfO*]?7_+lWS]l>12*MJ*1uK[F1u/F]e8eo5.fR9Y:%Ed.3kZJ%begIJjcq[]Dp7$=8'mR8S.R4lgO"5-Jh6BP73(e;!t,4THb8e+#/L9AW9T$eJcQ'Zk]5$oEXYJ1!<N7F#[RCR)n!T/oO"3*9#Atu%L[;l1a-4=<\R=Ij`1]kGodd-.ec3PP?LR,p\&&^R^KjUPj0%opY,=?GG--&hn;Zo:T!@tC:uChZ!V6Bkj/t'2YdPgFZ'IZF;e\]:%m\^;GA5g%H;DBoE"%;AjqjJnpUU`afWbT39]gDSb8c9ObCj0/1P\0-')@WVGe0bJ12#l1PO0cBuaCSj;UOm+nA/V"*:eG"Zb,BJt%YB!<_%o,[&LC<2&PcXa08?0G\6>GWrW=nnQ`CY#"(1E90Q58dYi]?t5S7gm$7J@>h*8Zikp`7VDr$d&)]Q<82?.hC92Whnf((a_o%f,%u/2g40cKG9WjfDg)EC#hH#_"EP:B?t>ug3>1$/9N)p5+"VTbZ6I>=;RK;EJNV=1[R*-I=_noIa;U<^N#aQo-0.6r*D@Wh0.><%,)"pO6<Ynh\SDe@D<o>.Uk-U++eTFkUV(9C:5F90]CZ.0[megHNf;UW)hsoeAFCSa8OnD<\`_a#,Qa-B#>st>2tY$=r^&=(%W/P_%3:02X&Frp^nk>jB1g!2#fN)m7!P\Ys@b2;amS?[FC\X_B38n9'^GX!\2\N.d(eOEG%9!6r(WOgLV+`XNn;X1G^&K3#`LMCiL452d%R]*qCP+"=-EE$I0]+9da#@t1Q@,j5(;FG]TICo3dB754HNN(:,?KHS.Y6=%50E^RU%`GW\;K5ba#<et,i)Nd#T`?I5ZkUPg8aST=%(N\!m+QF[D\"T7r)lE\m[13p`UkacPQBj:$0]:T7XN1K"IFurJN0<Eof+bj=X'I](YC?Xg7/o/>1BHEm'KMb*.i!ZF]FS+%mne-!%"IU?Wr`_:OV":`sgb%>^:DY)SIG!ZGCH[*qpC*FUhUr7HcmH=tTjn!ACJ[*ke5@!OK?5m!QJSA%o`9.*_WfBq,BIAYQ-DanVWeBJ%NU=k&nJ039<f.e&g4N`GX1,%1CYJ*pYreh._hT1=C$?@A63>;$.e873AOds0XVpa9U_1<Q'W;`(m95fR[>@aH&m"3NUKN.*&W[(r%bl]/tWnJE'5ZD_DR<M2g3!/**J8.u.Niu(UrCt.=#oY1a*E#CMZ1IAW;'F#G#qP\?_nb4oK!cddUid>kXSIP9eb5hq9=3Fu!\P$4%k=<Yb_9QQnq]`=3I\p(&o4,?o`0FMa,$&aeDBkit,s(^b#MY6LP_fp2/P"M#+3Wle06R)+;D5M=gW0u/cN).Bg3"5,Y^8RFUCPe.%E/"g>a]bKCLL8b0TT@e:dr*Q*<,%pk*>N"6O:QVtU.%-\kbNCSFT?`(c<O^$cdMdbc6rgd+ele3mLWKoGnErrSmVorCL-$iD4lJ&%]L7kbKA/S2$It-<R<F].P4]R#P589"SjSO6pfN2cWf7V00s)HBH:2hr2Z*3r:##B@etc2>D]L3!Mt3I_9"CP?7X2WAV&)\-1dZ7F%LN)<ld-+QqVUYQBOg?1He/I)D.`mCuauUU]`hep"<Q13P\Q&,e+C<J@W5!]aDV6];Wq%`YZ,@8ak^[i=1`&e!*)fk!I@IYhT3L][%D!QhqN@gF54_:Zg*tP3JFQC6@J6EE8)oN%C]!<"lZ^"kV.*TirhNQFZnW!*[-ekZ0AFGu+g9`,P%fI_GScRjPa=A-ZSmaG%pL]H\%D"G'nC,N?m86?'UF.6hj.hsWcH`Gc-`TOUK)76KS`pc-7p3!%rIt+E@*Jhl)fK4PqJVXqI&RZ*M.\LkI`57s#IVL/T)W1lAcrp*N%]@JTo9EI5MWN4Q`X7T'XfYX?BE+r=O>-H!EW(^s[+Y71oRdN<f7bDm<q?m0PZMGE]B/%FA.4S?3o=VKCp.b'q)=Kg<A`&2R(.aF?%__.0gd[-[U7OZc^4Y8AR=9L>(W_"p+5On092Y(5XBI/Z*>&75U`7DnO/Bu1-?S^f'kFGF/f^Bq#'_ZIuKD1I&Y^:[%@Pm!;imC*2%\pC:F'`EOb$MLf!b&A3@M=9Is[)SWs>FUMtVL?25.uqMci9>>)n)9T_g+DglH@4-+S82KGhV2IdXEj]P(e;6>=[!<S,rd]Qh?IPi%E.Sp6&"uEVe(Ua=4ehl,7bU7lq'mMRfS!+AK$d*^9=OL_81q_acRIQ+q"_o\IEs,,1<PWm'ft'S8uKTWE.YLo$RnGbK*B:B?LOK1%m;M<eph(EfJL6E"j24-X'eB.N!?JHpfd+!Ic&PoWoLZWh6mh4^fr01dr3A3hPKh%jG@h6'>EZ'8S4%O/RApXU;[sBm8\D.+clLQ9%3^?Y#JApH=22Sgd\^9cDW)?C!7H:_rQdMJ)apqtP]a$rgf[2>&RMTJQ$h8Tbg<eCFNnP0P*.cgb]ee_-3MMeQ'E0&@cc>3";$m$m%lnYs2i.,K5?U&pJ&A;_<^/k(+IM_Ir!#VG2Q%V(rNR"JUo^r@O%U(!0hEbuK./0NB$2XKKcXc#N\F13kWc?\O'Xkrh;]`<o-:GM`%D,Q4t^8i84@mQm!ItPO5ID.5=5bmIo4WUqeqU'p/?p?l)3'[aG6_<_h'3O2m-_tG]dnWZ9=S%_ch:59`apl3G(e>94]HT;8E[N(t%*#?Z#.mnuV?)fF]*pKagCh$MBH6=&rgJtkg<hQ3FSJ2ud'2(>;r`lrE9I[)BMgcm98LL"=3Nb"@<8J(.mf=KijT`#Z(SFsm/*C?+%-`3huiDUYPhK$UPf_q6`($jSC5^TCkN>HZ)k,3C5>Ubm72nYPLXjgWB/.;;&T+1W:_(rD.S<*s!"Y,Z&b7dFg<SelJ\'AjUnA=Lh%l(-7X\kFrDi::U</'hRbi#mX_!`\#PmIjNdB%h2p?">Q8BiZ:7,9q9a[kCZpi!$1>*U:&ugL&lh/t7:d*^sV\k2Ictp0$Z=T^tdi%Ze7Jn+23o.7#iMDF%GjO&X9@P:76P[aNurn);c1co6+N0.lA%:V3S,kM3*)$,f%,]ng7lHH7`=R99NA&N0R&OT)NQ,ikA@u@1Akf%\g&E7F#.nli[^t.d*Tk=(IRSDb//S/gq&#F;Z3SmW&3)o4Tu']HU>%3.eI$lC9j`h&($A3b*"H^DaD4D88greBL"(:I@j2/5JZ*^%BY`5+b6TR"MLJqDIR*CL[*0gR^semF+BN's!@8<SMN&GD<&'0S>GJce=b)NCOPBU3$!\2l%!)JFe@:t]\.M1I-S,diQ[)aS^aP+k%2&?L\fRh2b`Sh#T2$jh8!hS!s:LN%.e!bL-C7F%RCq1BqZIK!6:`TO,6NGLjJt((-,^$N:m^+WH``$&)/IHT<@b.$NTYAXpaS8#;%OaNpIWJM=[i.o,cIiPJaHen(6#>q4uC/5#LG>=2EEYnJkJEk]TF:?n^o+T6;mb7&+D-!0NrJgd!HhLSqM*9b0c$E[fAV]VFC%MaJ%COlg=?QE,%U5lYG)&dE)U\Oe&ZhU`Y4hk?9-bh9$KE#9?i5!NK[;!NN^Td_D;786AO*7(!XW+MG,"XY`<^H'bST-+#AV+@a)U<NW%m.`60"hf30O7.<"YDElDl6(&hfdQb`0Tr-6ar;$#"hg99/gsl"`OD=blb@?3I*Y<2)5-&?8+j`JoZ&oM?lKT*L>X.?UPMJ+IPPZ_%7GMe*&EEa#rp,$Zp[mW[r!`Ur<;gLG<*ORp<d#e<jT4J>fOneBgW!cO5B+'j.W9!uo;d_\h>aQ:PhUK4O*Zn-J8_(IO72<+96Y"4%=&pkQf0Tr1%XEHVq`+pQi=XRU^b"eO>;[,a,pE*cm:ptu*:Xs?"?QaYNV&"]/*+&0!`RJT=t#1&`t&1Ad)@#`d3jOjO#)k"*5#>B%&QI?#7ld4Vj\g#)a$q,3911,n<BH?($5*j-9"6(IB@.40:5e;RT:Jg6oE+(3Eo`Od#Om22lFD-2,HolT]B#65d<e])c&^nDHU-7?%>*/p]pa#m^G/`YaRHAYV@P:G_+9lE'lt%eOf[(2elgQD_]t0Ld-lN3h!):d:3ekT%d!<rRI-G%F2,>LBL#Sf?\u_Q=_MRl@@.R@a%"smND<io!DG?/'l<3'Fo6cJ1jnJ(Kt"r7.H3C4A,@P(I_SSEkcIThS?q4;gje><A5<cA)_OKD,B2=?2*;[uV.r/f?0@M2KL/\cMQ%j(RL1):holVP0MXpHr>BB*hBF*g:?D&_(uq+JGaAG<j<35;$euO/I0/8ohU32'5X$H=VS!il;Sdc9(RK/8i(A8EW.2P0+e;<\NOL%RQ:BJjgk?g>%QRqEpYn2>RGnb<M.ufcQ/'r]:eJe-W]_&c9F\$A5EMlRlY)H`duj5Fk'jZa4f*sj>ngI4I,W#En?/]=1bbMNJ:=/%(%kCOQ.RKop3PFi[U&.N^D8u<H`e82#\Ct7$K7VBRXNVd&-2Kb"DX68Ih.%[>sg<%FZ#a5O:_4h&o8fR:YV.$M$,+gX>:d"Dmq$n%i=Mtt^L.o29FG\[HaNr1&rA(\49UHAK"m3Xe";'F%ZTsP3S)5X$n:NpKODR"W4ZbipKH1LUEF8jCUfiK/EogeD#sag-)kqK-/F\E%9OIH&+q`(m&57bj+ge)!8Cc"H]X06?WZa/4:gP_urRgu[>0b(D7KNb%P:r,VR?rFt-jB.578'kdX;R_[HM:'2e^@\f>'QRDn\78m%/$!jp8lI5hiqRb)/E"YjTZD9?E3^?X;!%os%]!cL%a:AYF"i(3g_:`>r=3O4VQjP?F8gYV^5tK2&!0uGOM'4Yn9LgueLptP$A"Y9%@DDRe*e!oRYYEYT.L?lg?[9sO099]CO7n=a?%`s6RV?gGM+=e/!=c/RbnY'jWLGG;=n_Mm,VnEmO=DZ`cB;JeHL_*AYWX5lM:A=X%gOSK^_e*:bYg*^hb+mdsYr"UDV1KY!mn%$H+l!h1d?\_<2@e^FFFCLm-PV45"Ds0(Is+M]V[<*hh8d]p#KD@6b?7crjtc3XM1^s?%JCn</,6J>O@;M-,l5W)t9-D3n[O_1<0ds>E`/:pl13[k^8/oD]r=([TN"ukH<CDeY["mI(4Nu+THao(oa>G.^/EY^Y,h9lhQt<rj%H+Z;6]KO8^o<_H)jLa1Mifk8"2ce]0Ne<tLLYm+@,8c-+\8`]L-">8i/b[qjScO#^M>!\>S;5+NAUHDab#E[t(V>h?$P,;j8O!Bm%Z&"<o"W=&%_o0UoaIs0%#daB)F<<]hfh?#l?rRB+!+Cq'h/L>!SWQ#5<DVgkT$ahWQD,Bt&p.1d1.m&_9hNnba3aZr$hI?qB#,I+%q@#en1\V^sW"2`]7^D$J*CFuFf?+BeF4FNqUbet5f.Y8e@TJf\9-Yg.eP<jPeL#3K>I';MkSg`c9;QMCbt.QD@k*#ZQqI0d$$ae]%nnX)49RL^+36&Zc/UkPS9sq):b*Ua87908Q@rAn!;(Po@GsBNYF7VdC:dVugh)GEt6'"n,kEH&g^(V1@A48i`,.s68>Itj!D5VE_%YQ]c;Ah\2un+,k*2pOQH$K&?,Yp=$`05Q?a-8+(gfbX6lOb?D:!?6UW+;SP\"]HSPkYt"I%<aL(5cWIK'm!fA\@HdgJXW#O,\62o%Yb/WoDE'TMf_'F?+sD#[1J;.0;i'[8#TG-E3#-C6E-e!)mG_Z/oX(/2Mq:@N:WF35;7NZ+?Q?YDTYs`YmfsAc*CdH`SB_,\AV&1C%ZW,GSKF/+1eeD>K>_*f;*:?8cdQIc+CiCCnOc+h_f-F<slk5VPg4j&?WY\'[%]m9`Wqqh-DJT_/GO6$@*FY;:5mAM:l4^ujVN.$]%`'iWSZ5M642`(7Ma,8J+<L>Mr]5fEHbjG&0G&0?T3C&N\^"gY</EjY$TWrn*N^F//DPQg\0JVOP3:?'n%Jj5JXVoCaoDWA=FPQKk%rScb^U'GU_qMnSM[FRS@AkV.VjIUh^5g)=G$33(-6c>e+qT/cK-A%4SJRJ2@@F_!T!/m7Ph:*SeUEs`7[;1Rs7Jt?<&1u0K]&s+Z%foA:T*k^b%Hf!b#,W8_27M!65DdGKlT.22cqS3$gQd;<(r@e3::]KH.J,\c+?@!_/Nr/HU55b1Os0_mkTE"b+T76WdT7?[mmlp[E%j+%*nc_(7!Q_49Jjmt,IrquM_rm0aLIerA;s7VMGrpfgA+2@aCk?gFQr?$Odjms"4s.=f<^H`j,W;2K=rptX:_h\7&c0;1n~>%AI9_PrivateDataEnd